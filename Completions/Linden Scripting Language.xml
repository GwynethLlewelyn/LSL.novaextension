<?xml version="1.0" encoding="UTF-8"?>
<completions>
  <provider name="lsl.globals">
    <syntax>lsl</syntax>
    <selector>*:not(string,comment)</selector>
    <expression>\b[a-zA-Z_][a-zA-Z0-9-_]*</expression>
    <symbols type="function">
      <behavior>
        <arguments prefix="(" suffix=")" separator=", "/>
      </behavior>
    </symbols>
    <symbols type="event">
      <behavior>
        <arguments prefix="(" suffix=")" separator=", "/>
      </behavior>
    </symbols>
    <symbols type="keyword"/>
    <symbols type="type"/>
    <symbols type="variable,constant,argument"/>
    <set>lsl.functions</set>
    <set>lsl.events</set>
    <set>lsl.keywords</set>
    <set>lsl.types</set>
    <set>lsl.constants</set>
  </provider>
  <!--Keywords-->
  <set name="lsl.keywords" symbol="keyword">
    <completion string="default">
      <description>
Name of default state that all scripts must have
    </description>
    </completion>
    <completion string="state">
      <description>
Keyword to indicate state block or state transition
    </description>
    </completion>
    <completion string="event"/>
    <completion string="jump">
      <description>
jump statement
jump label;

    </description>
    </completion>
    <completion string="return">
      <description>
Leave current function or event handler
    </description>
    </completion>
    <completion string="if">
      <description>
if statement
if (test)
{    statements
}
    </description>
    </completion>
    <completion string="else">
      <description>
else clause
if (test)
{    statements
}
else
{    statements
}
    </description>
    </completion>
    <completion string="for">
      <description>
for loop
for (initializer; test; iteration)
{
   statements
}
    </description>
    </completion>
    <completion string="do">
      <description>
do loop
do
{
   statements
} while (test);
    </description>
    </completion>
    <completion string="while">
      <description>
while loop
while (test)
{    statements
}
    </description>
    </completion>
    <completion string="print"/>
  </set>
  <!--Language types-->
  <set name="lsl.types" symbol="type">
    <completion string="integer">
      <description>
Integer type
    </description>
    </completion>
    <completion string="float">
      <description>
Floating-point type
    </description>
    </completion>
    <completion string="string">
      <description>
String type
    </description>
    </completion>
    <completion string="key">
      <description>
Key type. Use NULL_KEY to test for empty keys.
    </description>
    </completion>
    <completion string="vector">
      <description>
Vector type of 3 floats. Used to represent 3D motion, Euler angles, and color.
Access components by .x, .y, or .z
    </description>
    </completion>
    <completion string="rotation">
      <description>
Rotation type of 4 floats. Used to represent rotation.
Access components by .x, .y, .z, or .s
    </description>
    </completion>
    <completion string="quaternion">
      <description>
Rotation type of 4 floats. Used to represent rotation.
Access components by .x, .y, .z, or .s
    </description>
    </completion>
    <completion string="list">
      <description>
List of various data types
    </description>
    </completion>
    <completion string="bool">
      <description>
Boolean type, either TRUE or FALSE
    </description>
    </completion>
  </set>
  <!--Constants-->
  <set name="lsl.constants" symbol="constant">
    <completion string="TRUE" value="1">
      <description>
Integer constant for Boolean operations
    </description>
    </completion>
    <completion string="FALSE" value="0">
      <description>
Integer constant for Boolean operations
    </description>
    </completion>
    <completion string="STATUS_PHYSICS" value="0x1">
      <description>
Passed in the llSetStatus library function. If TRUE, object moves physically.
    </description>
    </completion>
    <completion string="STATUS_PHANTOM" value="0x10">
      <description>
Passed in the llSetStatus library function. If TRUE, object doesn&apos;t collide with other objects.
    </description>
    </completion>
    <completion string="STATUS_ROTATE_X" value="0x2">
      <description>
Passed in the llSetStatus library function. If FALSE, object doesn&apos;t rotate around local X axis.
    </description>
    </completion>
    <completion string="STATUS_ROTATE_Y" value="0x4">
      <description>
Passed in the llSetStatus library function. If FALSE, object doesn&apos;t rotate around local Y axis.
    </description>
    </completion>
    <completion string="STATUS_ROTATE_Z" value="0x8">
      <description>
Passed in the llSetStatus library function. If FALSE, object doesn&apos;t rotate around local Z axis.
    </description>
    </completion>
    <completion string="STATUS_SANDBOX" value="0x20">
      <description>
Passed in the llSetStatus library function. If TRUE, object can&apos;t cross region boundaries or move more than 10 meters from its start location.
    </description>
    </completion>
    <completion string="STATUS_BLOCK_GRAB" value="0x40">
      <description>
Passed in the llSetStatus library function. If TRUE, object can&apos;t be grabbed and physically dragged.
    </description>
    </completion>
    <completion string="STATUS_BLOCK_GRAB_OBJECT" value="0x400">
      <description>
Passed in the llSetStatus library function. If TRUE, the object can&apos;t be moved by grabs.
This flag applies to the entire linkset.
    </description>
    </completion>
    <completion string="STATUS_DIE_AT_EDGE" value="0x80">
      <description>
Passed in the llSetStatus library function. If TRUE, objects that reach the edge of the world just die
rather than teleporting back to the owner.
    </description>
    </completion>
    <completion string="STATUS_RETURN_AT_EDGE" value="0x100">
      <description>
Passed in the llSetStatus library function. If TRUE, script rezzed objects that reach the edge of the world are returned rather than killed.
STATUS_RETURN_AT_EDGE trumps STATUS_DIE_AT_EDGE if both are set.
    </description>
    </completion>
    <completion string="STATUS_CAST_SHADOWS" value="0x200">
      <description>
Passed in the llSetStatus library function. If TRUE, object casts shadows on other objects.
    </description>
    </completion>
    <completion string="AGENT" value="0x1">
      <description>
Passed in llSensor library function to look for other Agents (by Legacy name if filtered)
    </description>
    </completion>
    <completion string="AGENT_BY_USERNAME" value="0x10">
      <description>
Passed in llSensor library function to look for other Agents, filtering by username
    </description>
    </completion>
    <completion string="AGENT_BY_LEGACY_NAME" value="0x1">
      <description>
Passed in llSensor library function to look for other Agents, filtering by legacy name
    </description>
    </completion>
    <completion string="ACTIVE" value="0x2">
      <description>
Passed in llSensor library function to look for moving objects
    </description>
    </completion>
    <completion string="PASSIVE" value="0x4">
      <description>
Passed in llSensor library function to look for objects that aren&apos;t moving
    </description>
    </completion>
    <completion string="SCRIPTED" value="0x8">
      <description>
Passed in llSensor library function to look for scripted objects
    </description>
    </completion>
    <completion string="CONTROL_FWD" value="0x1">
      <description>
Passed to llTakeControls library function and used control event handler to test for agent forward control
    </description>
    </completion>
    <completion string="CONTROL_BACK" value="0x2">
      <description>
Passed to llTakeControls library function and used control event handler to test for agent back control
    </description>
    </completion>
    <completion string="CONTROL_LEFT" value="0x4">
      <description>
Passed to llTakeControls library function and used control event handler to test for agent left control
    </description>
    </completion>
    <completion string="CONTROL_RIGHT" value="0x8">
      <description>
Passed to llTakeControls library function and used control event handler to test for agent right control
    </description>
    </completion>
    <completion string="CONTROL_ROT_LEFT" value="0x100">
      <description>
Passed to llTakeControls library function and used control event handler to test for agent rotate left control
    </description>
    </completion>
    <completion string="CONTROL_ROT_RIGHT" value="0x200">
      <description>
Passed to llTakeControls library function and used control event handler to test for agent rotate right control
    </description>
    </completion>
    <completion string="CONTROL_UP" value="0x10">
      <description>
Passed to llTakeControls library function and used control event handler to test for agent up control
    </description>
    </completion>
    <completion string="CONTROL_DOWN" value="0x20">
      <description>
Passed to llTakeControls library function and used control event handler to test for agent down control
    </description>
    </completion>
    <completion string="CONTROL_LBUTTON" value="0x10000000">
      <description>
Passed to llTakeControls library function and used control event handler to test for agent left button control
    </description>
    </completion>
    <completion string="CONTROL_ML_LBUTTON" value="0x40000000">
      <description>
Passed to llTakeControls library function and used control event handler to test for agent left button control with the agent in mouse look
    </description>
    </completion>
    <completion string="PERMISSION_DEBIT" value="0x2">
      <description>
Passed to llRequestPermissions library function to request permission to take L$ from agent&apos;s account
    </description>
    </completion>
    <completion string="PERMISSION_TAKE_CONTROLS" value="0x4">
      <description>
Passed to llRequestPermissions library function to request permission to take agent&apos;s controls
    </description>
    </completion>
    <completion string="PERMISSION_REMAP_CONTROLS" value="0x8">
      <description>
</description>
    </completion>
    <completion string="PERMISSION_TRIGGER_ANIMATION" value="0x10">
      <description>
Passed to llRequestPermissions library function to request permission to trigger animation on agent
    </description>
    </completion>
    <completion string="PERMISSION_ATTACH" value="0x20">
      <description>
Passed to llRequestPermissions library function to request permission to attach/detach from agent
    </description>
    </completion>
    <completion string="PERMISSION_RELEASE_OWNERSHIP" value="0x40">
      <description>
</description>
    </completion>
    <completion string="PERMISSION_CHANGE_LINKS" value="0x80">
      <description>
Passed to llRequestPermissions library function to request permission to change links
    </description>
    </completion>
    <completion string="PERMISSION_CHANGE_JOINTS" value="0x100">
      <description>
</description>
    </completion>
    <completion string="PERMISSION_CHANGE_PERMISSIONS" value="0x200">
      <description>
</description>
    </completion>
    <completion string="PERMISSION_TRACK_CAMERA" value="0x400">
      <description>
Passed to llRequestPermissions library function to request permission to track agent&apos;s camera
    </description>
    </completion>
    <completion string="PERMISSION_CONTROL_CAMERA" value="0x800">
      <description>
Passed to llRequestPermissions library function to request permission to change agent&apos;s camera
    </description>
    </completion>
    <completion string="PERMISSION_TELEPORT" value="0x1000">
      <description>
Passed to llRequestPermissions library function to request permission to teleport an agent
    </description>
    </completion>
    <completion string="PERMISSION_SILENT_ESTATE_MANAGEMENT" value="0x4000">
      <description>
</description>
    </completion>
    <completion string="PERMISSION_OVERRIDE_ANIMATIONS" value="0x8000">
      <description>
Passed to llRequestPermissions library function to request permission to override animations
    </description>
    </completion>
    <completion string="PERMISSION_RETURN_OBJECTS" value="0x10000">
      <description>
</description>
    </completion>
    <completion string="PERMISSION_COMBAT" value="0x2004">
      <description>
</description>
    </completion>
    <completion string="DEBUG_CHANNEL" value="0x7FFFFFFF">
      <description>
Chat channel reserved for debug and error messages from scripts
    </description>
    </completion>
    <completion string="PUBLIC_CHANNEL" value="0">
      <description>
Chat channel that broadcasts to all nearby users
    </description>
    </completion>
    <completion string="AGENT_FLYING" value="0x1">
      <description>
Returned by llGetAgentInfo if the Agent is flying
    </description>
    </completion>
    <completion string="AGENT_ATTACHMENTS" value="0x2">
      <description>
Returned by llGetAgentInfo if the Agent has attachments
    </description>
    </completion>
    <completion string="AGENT_SCRIPTED" value="0x4">
      <description>
Returned by llGetAgentInfo if the Agent has scripted attachments
    </description>
    </completion>
    <completion string="AGENT_SITTING" value="0x10">
      <description>
Returned by llGetAgentInfo if the Agent is sitting
    </description>
    </completion>
    <completion string="AGENT_ON_OBJECT" value="0x20">
      <description>
Returned by llGetAgentInfo if the Agent is sitting on an object
    </description>
    </completion>
    <completion string="AGENT_MOUSELOOK" value="0x8">
      <description>
Returned by llGetAgentInfo if the Agent is in mouselook
    </description>
    </completion>
    <completion string="AGENT_AWAY" value="0x40">
      <description>
Returned by llGetAgentInfo if the Agent is in away mode
    </description>
    </completion>
    <completion string="AGENT_WALKING" value="0x80">
      <description>
Returned by llGetAgentInfo if the Agent is walking
    </description>
    </completion>
    <completion string="AGENT_IN_AIR" value="0x100">
      <description>
Returned by llGetAgentInfo if the Agent is in the air
    </description>
    </completion>
    <completion string="AGENT_TYPING" value="0x200">
      <description>
Returned by llGetAgentInfo if the Agent is typing
    </description>
    </completion>
    <completion string="AGENT_CROUCHING" value="0x400">
      <description>
Returned by llGetAgentInfo if the Agent is crouching
    </description>
    </completion>
    <completion string="AGENT_BUSY" value="0x800">
      <description>
Returned by llGetAgentInfo if the Agent is busy
    </description>
    </completion>
    <completion string="AGENT_ALWAYS_RUN" value="0x1000">
      <description>
Returned by llGetAgentInfo if the Agent has &apos;Always Run&apos; enabled
    </description>
    </completion>
    <completion string="AGENT_AUTOPILOT" value="0x2000">
      <description>
Returned by llGetAgentInfo if the Agent is under autopilot control
    </description>
    </completion>
    <completion string="AGENT_MALE" value="0x2000">
      <description>
</description>
    </completion>
    <completion string="AGENT_LIST_PARCEL" value="1">
      <description>
Passed to llGetAgentList to return only agents on the same parcel where the script is running
    </description>
    </completion>
    <completion string="AGENT_LIST_PARCEL_OWNER" value="2">
      <description>
Passed to llGetAgentList to return only agents on any parcel in the region where the parcel owner is the same as the owner of the parcel under the scripted object
    </description>
    </completion>
    <completion string="AGENT_LIST_REGION" value="4">
      <description>
Passed to llGetAgentList to return any/all agents in the region
    </description>
    </completion>
    <completion string="PSYS_PART_FLAGS" value="0"/>
    <completion string="PSYS_PART_START_COLOR" value="1"/>
    <completion string="PSYS_PART_START_ALPHA" value="2"/>
    <completion string="PSYS_PART_START_SCALE" value="5"/>
    <completion string="PSYS_PART_END_COLOR" value="3"/>
    <completion string="PSYS_PART_END_ALPHA" value="4"/>
    <completion string="PSYS_PART_END_SCALE" value="6"/>
    <completion string="PSYS_PART_MAX_AGE" value="7"/>
    <completion string="PSYS_PART_INTERP_COLOR_MASK" value="0x1"/>
    <completion string="PSYS_PART_INTERP_SCALE_MASK" value="0x2"/>
    <completion string="PSYS_PART_BOUNCE_MASK" value="0x4"/>
    <completion string="PSYS_PART_WIND_MASK" value="0x8"/>
    <completion string="PSYS_PART_FOLLOW_SRC_MASK" value="0x10"/>
    <completion string="PSYS_PART_FOLLOW_VELOCITY_MASK" value="0x20"/>
    <completion string="PSYS_PART_TARGET_POS_MASK" value="0x40"/>
    <completion string="PSYS_PART_TARGET_LINEAR_MASK" value="0x80"/>
    <completion string="PSYS_PART_EMISSIVE_MASK" value="0x100"/>
    <completion string="PSYS_PART_RIBBON_MASK" value="0x400"/>
    <completion string="PSYS_SRC_PATTERN" value="9"/>
    <completion string="PSYS_PART_BF_ONE" value="0"/>
    <completion string="PSYS_PART_BF_ZERO" value="1"/>
    <completion string="PSYS_PART_BF_DEST_COLOR" value="2"/>
    <completion string="PSYS_PART_BF_SOURCE_COLOR" value="3"/>
    <completion string="PSYS_PART_BF_ONE_MINUS_DEST_COLOR" value="4"/>
    <completion string="PSYS_PART_BF_ONE_MINUS_SOURCE_COLOR" value="5"/>
    <completion string="PSYS_PART_BF_SOURCE_ALPHA" value="7"/>
    <completion string="PSYS_PART_BF_ONE_MINUS_SOURCE_ALPHA" value="9"/>
    <completion string="PSYS_SRC_INNERANGLE" value="10" deprecated="true">
      <description>
Deprecated -- Use PSYS_SRC_ANGLE_BEGIN
    </description>
    </completion>
    <completion string="PSYS_SRC_OUTERANGLE" value="11" deprecated="true">
      <description>
Deprecated -- Use PSYS_SRC_ANGLE_END
    </description>
    </completion>
    <completion string="PSYS_SRC_ANGLE_BEGIN" value="22"/>
    <completion string="PSYS_SRC_ANGLE_END" value="23"/>
    <completion string="PSYS_SRC_BURST_RATE" value="13"/>
    <completion string="PSYS_SRC_BURST_PART_COUNT" value="15"/>
    <completion string="PSYS_SRC_BURST_RADIUS" value="16"/>
    <completion string="PSYS_SRC_BURST_SPEED_MIN" value="17"/>
    <completion string="PSYS_SRC_BURST_SPEED_MAX" value="18"/>
    <completion string="PSYS_SRC_MAX_AGE" value="19"/>
    <completion string="PSYS_SRC_ACCEL" value="8"/>
    <completion string="PSYS_SRC_TEXTURE" value="12"/>
    <completion string="PSYS_SRC_TARGET_KEY" value="20"/>
    <completion string="PSYS_SRC_OMEGA" value="21"/>
    <completion string="PSYS_SRC_PATTERN_DROP" value="1"/>
    <completion string="PSYS_SRC_PATTERN_EXPLODE" value="2"/>
    <completion string="PSYS_SRC_PATTERN_ANGLE" value="4"/>
    <completion string="PSYS_SRC_PATTERN_ANGLE_CONE" value="8"/>
    <completion string="PSYS_SRC_PATTERN_ANGLE_CONE_EMPTY" value="16"/>
    <completion string="PSYS_SRC_OBJ_REL_MASK" value="1"/>
    <completion string="PSYS_PART_BLEND_FUNC_SOURCE" value="24"/>
    <completion string="PSYS_PART_BLEND_FUNC_DEST" value="25"/>
    <completion string="PSYS_PART_START_GLOW" value="26"/>
    <completion string="PSYS_PART_END_GLOW" value="27"/>
    <completion string="OBJECT_UNKNOWN_DETAIL" value="-1">
      <description>
Returned by llGetObjectDetails when passed an invalid object parameter type
    </description>
    </completion>
    <completion string="OBJECT_NAME" value="1">
      <description>
Used with llGetObjectDetails to get an object&apos;s name
    </description>
    </completion>
    <completion string="OBJECT_DESC" value="2">
      <description>
Used with llGetObjectDetails to get an object&apos;s description
    </description>
    </completion>
    <completion string="OBJECT_POS" value="3">
      <description>
Used with llGetObjectDetails to get an object&apos;s position
    </description>
    </completion>
    <completion string="OBJECT_ROT" value="4">
      <description>
Used with llGetObjectDetails to get an object&apos;s rotation
    </description>
    </completion>
    <completion string="OBJECT_VELOCITY" value="5">
      <description>
Used with llGetObjectDetails to get an object&apos;s velocity
    </description>
    </completion>
    <completion string="OBJECT_OWNER" value="6">
      <description>
Used with llGetObjectDetails to get an object&apos;s owner&apos;s key. Will be NULL_KEY if group owned.
    </description>
    </completion>
    <completion string="OBJECT_GROUP" value="7">
      <description>
Used with llGetObjectDetails to get an object&apos;s group&apos;s key
    </description>
    </completion>
    <completion string="OBJECT_CREATOR" value="8">
      <description>
Used with llGetObjectDetails to get an object&apos;s creator&apos;s key
    </description>
    </completion>
    <completion string="OBJECT_RUNNING_SCRIPT_COUNT" value="9">
      <description>
Used with llGetObjectDetails to get the number of running scripts attached to the object or agent
    </description>
    </completion>
    <completion string="OBJECT_TOTAL_SCRIPT_COUNT" value="10">
      <description>
Used with llGetObjectDetails to get the number of scripts, both running and stopped, attached to the object or agent
    </description>
    </completion>
    <completion string="OBJECT_SCRIPT_MEMORY" value="11">
      <description>
Used with llGetObjectDetails to get the total amount of script memory allocated to the object or agent, in bytes
    </description>
    </completion>
    <completion string="OBJECT_SCRIPT_TIME" value="12">
      <description>
Used with llGetObjectDetails to get the average script CPU time (in seconds) an object/avatar is using
    </description>
    </completion>
    <completion string="OBJECT_PRIM_EQUIVALENCE" value="13">
      <description>
Used with llGetObjectDetails to get the prim equivalence (land impact) of the object
    </description>
    </completion>
    <completion string="OBJECT_PHYSICS_COST" value="16">
      <description>
Used with llGetObjectDetails to get the physics cost
    </description>
    </completion>
    <completion string="OBJECT_SERVER_COST" value="14">
      <description>
Used with llGetObjectDetails to get the server cost
    </description>
    </completion>
    <completion string="OBJECT_STREAMING_COST" value="15">
      <description>
Used with llGetObjectDetails to get the streaming (download) cost
    </description>
    </completion>
    <completion string="OBJECT_CHARACTER_TIME" value="17">
      <description>
</description>
    </completion>
    <completion string="OBJECT_ROOT" value="18">
      <description>
</description>
    </completion>
    <completion string="OBJECT_ATTACHED_POINT" value="19">
      <description>
</description>
    </completion>
    <completion string="OBJECT_PATHFINDING_TYPE" value="20">
      <description>
</description>
    </completion>
    <completion string="OBJECT_RENDER_WEIGHT" value="24">
      <description>
</description>
    </completion>
    <completion string="OBJECT_HOVER_HEIGHT" value="25">
      <description>
</description>
    </completion>
    <completion string="OBJECT_BODY_SHAPE_TYPE" value="26">
      <description>
</description>
    </completion>
    <completion string="OBJECT_LAST_OWNER_ID" value="27">
      <description>
</description>
    </completion>
    <completion string="OBJECT_CLICK_ACTION" value="28">
      <description>
</description>
    </completion>
    <completion string="OBJECT_OMEGA" value="29">
      <description>
</description>
    </completion>
    <completion string="OPT_AVATAR" value="1">
      <description>
</description>
    </completion>
    <completion string="OPT_CHARACTER" value="2">
      <description>
</description>
    </completion>
    <completion string="OPT_EXCLUSION_VOLUME" value="6">
      <description>
</description>
    </completion>
    <completion string="OPT_LEGACY_LINKSET" value="0">
      <description>
</description>
    </completion>
    <completion string="OPT_MATERIAL_VOLUME" value="5">
      <description>
</description>
    </completion>
    <completion string="OPT_OTHER" value="-1">
      <description>
</description>
    </completion>
    <completion string="OPT_STATIC_OBSTACLE" value="4">
      <description>
</description>
    </completion>
    <completion string="OPT_WALKABLE" value="3">
      <description>
</description>
    </completion>
    <completion string="VEHICLE_TYPE_NONE" value="0"/>
    <completion string="VEHICLE_TYPE_SLED" value="1"/>
    <completion string="VEHICLE_TYPE_CAR" value="2"/>
    <completion string="VEHICLE_TYPE_BOAT" value="3"/>
    <completion string="VEHICLE_TYPE_AIRPLANE" value="4"/>
    <completion string="VEHICLE_TYPE_BALLOON" value="5"/>
    <completion string="VEHICLE_REFERENCE_FRAME" value="44">
      <description>
Rotation of vehicle axes relative to local frame
    </description>
    </completion>
    <completion string="VEHICLE_LINEAR_FRICTION_TIMESCALE" value="16">
      <description>
A vector of timescales for exponential decay of linear velocity along the three vehicle axes
    </description>
    </completion>
    <completion string="VEHICLE_ANGULAR_FRICTION_TIMESCALE" value="17">
      <description>
A vector of timescales for exponential decay of angular velocity about the three vehicle axes
    </description>
    </completion>
    <completion string="VEHICLE_LINEAR_MOTOR_DIRECTION" value="18">
      <description>
The linear velocity that the vehicle will try to achieve
    </description>
    </completion>
    <completion string="VEHICLE_LINEAR_MOTOR_OFFSET" value="20">
      <description>
An offset from the center of mass of the vehicle where the linear motor is applied
    </description>
    </completion>
    <completion string="VEHICLE_ANGULAR_MOTOR_DIRECTION" value="19">
      <description>
The angular velocity that the vehicle will try to achieve
    </description>
    </completion>
    <completion string="VEHICLE_HOVER_HEIGHT" value="24">
      <description>
The height the vehicle will try to hover
    </description>
    </completion>
    <completion string="VEHICLE_HOVER_EFFICIENCY" value="25">
      <description>
A slider between 0 (bouncy) and 1 (critically damped) hover behavior
    </description>
    </completion>
    <completion string="VEHICLE_HOVER_TIMESCALE" value="26">
      <description>
The period of time for the vehicle to achieve its hover height
    </description>
    </completion>
    <completion string="VEHICLE_BUOYANCY" value="27">
      <description>
A slider between 0 (no anti-gravity) and 1 (full anti-gravity)
    </description>
    </completion>
    <completion string="VEHICLE_LINEAR_DEFLECTION_EFFICIENCY" value="28">
      <description>
A slider between 0 (no deflection) and 1 (maximum strength)
    </description>
    </completion>
    <completion string="VEHICLE_LINEAR_DEFLECTION_TIMESCALE" value="29">
      <description>
The exponential timescale for the vehicle to redirect its velocity to be along its x-axis
    </description>
    </completion>
    <completion string="VEHICLE_LINEAR_MOTOR_TIMESCALE" value="30">
      <description>
The exponential timescale for the vehicle to achive its full linear motor velocity
    </description>
    </completion>
    <completion string="VEHICLE_LINEAR_MOTOR_DECAY_TIMESCALE" value="31">
      <description>
The exponential timescale for the linear motor&apos;s effectiveness to decay toward zero
    </description>
    </completion>
    <completion string="VEHICLE_ANGULAR_DEFLECTION_EFFICIENCY" value="32">
      <description>
A slider between 0 (no deflection) and 1 (maximum strength)
    </description>
    </completion>
    <completion string="VEHICLE_ANGULAR_DEFLECTION_TIMESCALE" value="33">
      <description>
The exponential timescale for the vehicle to achieve full angular deflection
    </description>
    </completion>
    <completion string="VEHICLE_ANGULAR_MOTOR_TIMESCALE" value="34">
      <description>
The exponential timescale for the vehicle to achive its full angular motor velocity
    </description>
    </completion>
    <completion string="VEHICLE_ANGULAR_MOTOR_DECAY_TIMESCALE" value="35">
      <description>
The exponential timescale for the angular motor&apos;s effectiveness to decay toward zero
    </description>
    </completion>
    <completion string="VEHICLE_VERTICAL_ATTRACTION_EFFICIENCY" value="36">
      <description>
A slider between 0 (bouncy) and 1 (critically damped) attraction of vehicle z-axis to world z-axis (vertical)
    </description>
    </completion>
    <completion string="VEHICLE_VERTICAL_ATTRACTION_TIMESCALE" value="37">
      <description>
The exponential timescale for the vehicle to align its z-axis to the world z-axis (vertical)
    </description>
    </completion>
    <completion string="VEHICLE_BANKING_EFFICIENCY" value="38">
      <description>
A slider between -1 (leans out of turns), 0 (no banking), and +1 (leans into turns)
    </description>
    </completion>
    <completion string="VEHICLE_BANKING_MIX" value="39">
      <description>
A slider between 0 (static banking) and 1 (dynamic banking)
    </description>
    </completion>
    <completion string="VEHICLE_BANKING_TIMESCALE" value="40">
      <description>
The exponential timescale for the banking behavior to take full effect
    </description>
    </completion>
    <completion string="VEHICLE_RANGE_BLOCK" value="45">
      <description>
</description>
    </completion>
    <completion string="VEHICLE_ROLL_FRAME" value="46">
      <description>
</description>
    </completion>
    <completion string="VEHICLE_FLAG_NO_FLY_UP" value="0x1" deprecated="true">
      <description>
DEPRECATED - use VEHICLE_FLAG_NO_DEFLECTION_UP
    </description>
    </completion>
    <completion string="VEHICLE_FLAG_NO_DEFLECTION_UP" value="0x1">
      <description>
Prevents linear deflection along world-z axis
    </description>
    </completion>
    <completion string="VEHICLE_FLAG_LIMIT_ROLL_ONLY" value="0x2">
      <description>
Removes vertical attraction for changes in vehicle pitch
    </description>
    </completion>
    <completion string="VEHICLE_FLAG_HOVER_WATER_ONLY" value="0x4">
      <description>
Hover only pays attention to water level
    </description>
    </completion>
    <completion string="VEHICLE_FLAG_HOVER_TERRAIN_ONLY" value="0x8">
      <description>
Hover only pays attention to terrain height
    </description>
    </completion>
    <completion string="VEHICLE_FLAG_HOVER_GLOBAL_HEIGHT" value="0x10">
      <description>
Hover only pays attention to global height
    </description>
    </completion>
    <completion string="VEHICLE_FLAG_HOVER_UP_ONLY" value="0x20">
      <description>
Hover only pushes up
    </description>
    </completion>
    <completion string="VEHICLE_FLAG_LIMIT_MOTOR_UP" value="0x40">
      <description>
Prevents ground vehicles from motoring into the sky
    </description>
    </completion>
    <completion string="VEHICLE_FLAG_MOUSELOOK_STEER" value="0x80">
      <description>
Makes vehicle try to turn toward mouselook direction
    </description>
    </completion>
    <completion string="VEHICLE_FLAG_MOUSELOOK_BANK" value="0x100">
      <description>
Makes vehicle try to turn toward mouselook direction assuming banking is enabled
    </description>
    </completion>
    <completion string="VEHICLE_FLAG_CAMERA_DECOUPLED" value="0x200">
      <description>
Causes the camera look-at axis to NOT move when the vehicle rotates
    </description>
    </completion>
    <completion string="VEHICLE_FLAG_NO_X" value="0x400">
      <description>
</description>
    </completion>
    <completion string="VEHICLE_FLAG_NO_Y" value="0x800">
      <description>
</description>
    </completion>
    <completion string="VEHICLE_FLAG_NO_Z" value="0x1000">
      <description>
</description>
    </completion>
    <completion string="VEHICLE_FLAG_NO_DEFLECTION" value="0x4008">
      <description>
</description>
    </completion>
    <completion string="VEHICLE_FLAG_LOCK_HOVER_HEIGHT" value="0x2000">
      <description>
</description>
    </completion>
    <completion string="VEHICLE_FLAG_LOCK_ROTATION" value="0x8010">
      <description>
</description>
    </completion>
    <completion string="CAMERA_PITCH" value="0">
      <description>
(-45 to 80) Adjusts the angular amount that the camera aims straight ahead vs. straight down, maintaining the same distance. Analogous to &apos;incidence&apos;.
    </description>
    </completion>
    <completion string="CAMERA_FOCUS_OFFSET" value="1">
      <description>
(-10 to 10) A vector that adjusts the position of the camera focus position relative to the subject
    </description>
    </completion>
    <completion string="CAMERA_FOCUS_OFFSET_X" value="2">
      <description>
    </description>
    </completion>
    <completion string="CAMERA_FOCUS_OFFSET_Y" value="3">
      <description>
    </description>
    </completion>
    <completion string="CAMERA_FOCUS_OFFSET_Z" value="4">
      <description>
    </description>
    </completion>
    <completion string="CAMERA_POSITION_LAG" value="5">
      <description>
(0.0 to 3.0)  How much the camera lags as it tries to move towards its &apos;ideal&apos; position
    </description>
    </completion>
    <completion string="CAMERA_FOCUS_LAG" value="6">
      <description>
(0.0 to 3.0) How much the camera lags as it tries to aim towards the subject
    </description>
    </completion>
    <completion string="CAMERA_DISTANCE" value="7">
      <description>
(0.5 to 10) Sets how far away the camera wants to be from its subject
    </description>
    </completion>
    <completion string="CAMERA_BEHINDNESS_ANGLE" value="8">
      <description>
(0 to 180) Sets the angle in degrees within which the camera is not constrained by changes in subject rotation
    </description>
    </completion>
    <completion string="CAMERA_BEHINDNESS_LAG" value="9">
      <description>
(0.0 to 3.0) Sets how strongly the camera is forced to stay behind the target if outside of behindness angle
    </description>
    </completion>
    <completion string="CAMERA_POSITION_THRESHOLD" value="10">
      <description>
(0.0 to 4.0) Sets the radius of a sphere around the camera&apos;s ideal position within which it is not affected by subject motion
    </description>
    </completion>
    <completion string="CAMERA_FOCUS_THRESHOLD" value="11">
      <description>
(0.0 to 4.0) Sets the radius of a sphere around the camera&apos;s subject position within which its focus is not affected by subject motion
    </description>
    </completion>
    <completion string="CAMERA_ACTIVE" value="12">
      <description>
(0 or 1) Turns on or off scripted control of the camera
    </description>
    </completion>
    <completion string="CAMERA_POSITION" value="13">
      <description>
Sets the position of the camera
    </description>
    </completion>
    <completion string="CAMERA_POSITION_X" value="14">
      <description>
</description>
    </completion>
    <completion string="CAMERA_POSITION_Y" value="15">
      <description>
</description>
    </completion>
    <completion string="CAMERA_POSITION_Z" value="16">
      <description>
</description>
    </completion>
    <completion string="CAMERA_FOCUS" value="17">
      <description>
Sets the focus (target position) of the camera
    </description>
    </completion>
    <completion string="CAMERA_FOCUS_X" value="18">
      <description>
</description>
    </completion>
    <completion string="CAMERA_FOCUS_Y" value="19">
      <description>
</description>
    </completion>
    <completion string="CAMERA_FOCUS_Z" value="20">
      <description>
</description>
    </completion>
    <completion string="CAMERA_POSITION_LOCKED" value="21">
      <description>
(0 or 1) Locks the camera position so it will not move
    </description>
    </completion>
    <completion string="CAMERA_FOCUS_LOCKED" value="22">
      <description>
(0 or 1) Locks the camera focus so it will not move
    </description>
    </completion>
    <completion string="INVENTORY_TEXTURE" value="0">
      <description>
Passed to task inventory library functions to reference textures
    </description>
    </completion>
    <completion string="INVENTORY_SOUND" value="1">
      <description>
Passed to task inventory library functions to reference sounds
    </description>
    </completion>
    <completion string="INVENTORY_OBJECT" value="6">
      <description>
Passed to task inventory library functions to reference objects
    </description>
    </completion>
    <completion string="INVENTORY_SCRIPT" value="10">
      <description>
Passed to task inventory library functions to reference scripts
    </description>
    </completion>
    <completion string="INVENTORY_LANDMARK" value="3">
      <description>
Passed to task inventory library functions to reference landmarks
    </description>
    </completion>
    <completion string="INVENTORY_CLOTHING" value="5">
      <description>
Passed to task inventory library functions to reference clothing
    </description>
    </completion>
    <completion string="INVENTORY_NOTECARD" value="7">
      <description>
Passed to task inventory library functions to reference notecards
    </description>
    </completion>
    <completion string="INVENTORY_BODYPART" value="13">
      <description>
Passed to task inventory library functions to reference body parts
    </description>
    </completion>
    <completion string="INVENTORY_ANIMATION" value="20">
      <description>
Passed to task inventory library functions to reference animations
    </description>
    </completion>
    <completion string="INVENTORY_GESTURE" value="21">
      <description>
Passed to task inventory library functions to reference gestures
    </description>
    </completion>
    <completion string="INVENTORY_ALL" value="-1">
      <description>
Passed to task inventory library functions to reference all inventory items
    </description>
    </completion>
    <completion string="INVENTORY_NONE" value="-1">
      <description>
Returned by llGetInventoryType when no item is found
    </description>
    </completion>
    <completion string="ATTACH_CHEST" value="1">
      <description>
Passed to llAttachToAvatar to attach task to chest
    </description>
    </completion>
    <completion string="ATTACH_HEAD" value="2">
      <description>
Passed to llAttachToAvatar to attach task to head
    </description>
    </completion>
    <completion string="ATTACH_LSHOULDER" value="3">
      <description>
Passed to llAttachToAvatar to attach task to left shoulder
    </description>
    </completion>
    <completion string="ATTACH_RSHOULDER" value="4">
      <description>
Passed to llAttachToAvatar to attach task to right shoulder
    </description>
    </completion>
    <completion string="ATTACH_LHAND" value="5">
      <description>
Passed to llAttachToAvatar to attach task to left hand
    </description>
    </completion>
    <completion string="ATTACH_RHAND" value="6">
      <description>
Passed to llAttachToAvatar to attach task to right hand
    </description>
    </completion>
    <completion string="ATTACH_LFOOT" value="7">
      <description>
Passed to llAttachToAvatar to attach task to left foot
    </description>
    </completion>
    <completion string="ATTACH_RFOOT" value="8">
      <description>
Passed to llAttachToAvatar to attach task to right foot
    </description>
    </completion>
    <completion string="ATTACH_BACK" value="9">
      <description>
Passed to llAttachToAvatar to attach task to back
    </description>
    </completion>
    <completion string="ATTACH_PELVIS" value="10">
      <description>
Passed to llAttachToAvatar to attach task to pelvis
    </description>
    </completion>
    <completion string="ATTACH_MOUTH" value="11">
      <description>
Passed to llAttachToAvatar to attach task to mouth
    </description>
    </completion>
    <completion string="ATTACH_CHIN" value="12">
      <description>
Passed to llAttachToAvatar to attach task to chin
    </description>
    </completion>
    <completion string="ATTACH_LEAR" value="13">
      <description>
Passed to llAttachToAvatar to attach task to left ear
    </description>
    </completion>
    <completion string="ATTACH_REAR" value="14">
      <description>
Passed to llAttachToAvatar to attach task to right ear
    </description>
    </completion>
    <completion string="ATTACH_LEYE" value="15">
      <description>
Passed to llAttachToAvatar to attach task to left eye
    </description>
    </completion>
    <completion string="ATTACH_REYE" value="16">
      <description>
Passed to llAttachToAvatar to attach task to right eye
    </description>
    </completion>
    <completion string="ATTACH_NOSE" value="17">
      <description>
Passed to llAttachToAvatar to attach task to nose
    </description>
    </completion>
    <completion string="ATTACH_RUARM" value="18">
      <description>
Passed to llAttachToAvatar to attach task to right upper arm
    </description>
    </completion>
    <completion string="ATTACH_RLARM" value="19">
      <description>
Passed to llAttachToAvatar to attach task to right lower arm
    </description>
    </completion>
    <completion string="ATTACH_LUARM" value="20">
      <description>
Passed to llAttachToAvatar to attach task to left upper arm
    </description>
    </completion>
    <completion string="ATTACH_LLARM" value="21">
      <description>
Passed to llAttachToAvatar to attach task to left lower arm
    </description>
    </completion>
    <completion string="ATTACH_RHIP" value="22">
      <description>
Passed to llAttachToAvatar to attach task to right hip
    </description>
    </completion>
    <completion string="ATTACH_RULEG" value="23">
      <description>
Passed to llAttachToAvatar to attach task to right upper leg
    </description>
    </completion>
    <completion string="ATTACH_RLLEG" value="24">
      <description>
Passed to llAttachToAvatar to attach task to right lower leg
    </description>
    </completion>
    <completion string="ATTACH_LHIP" value="25">
      <description>
Passed to llAttachToAvatar to attach task to left hip
    </description>
    </completion>
    <completion string="ATTACH_LULEG" value="26">
      <description>
Passed to llAttachToAvatar to attach task to left upper leg
    </description>
    </completion>
    <completion string="ATTACH_LLLEG" value="27">
      <description>
Passed to llAttachToAvatar to attach task to left lower leg
    </description>
    </completion>
    <completion string="ATTACH_BELLY" value="28">
      <description>
Passed to llAttachToAvatar to attach task to belly
    </description>
    </completion>
    <completion string="ATTACH_RPEC" value="29" deprecated="true">
      <description>
Passed to llAttachToAvatar to attach task to LEFT pectoral.
DEPRECATED/MISNAMED - use ATTACH_LEFT_PEC or ATTACH_RIGHT_PEC.
    </description>
    </completion>
    <completion string="ATTACH_LPEC" value="29">
      <description>
Passed to llAttachToAvatar to attach task to left pectoral
    </description>
    </completion>
    <completion string="ATTACH_LPEC" value="30" deprecated="true">
      <description>
Passed to llAttachToAvatar to attach task to RIGHT pectoral.
DEPRECATED/MISNAMED - use ATTACH_LEFT_PEC or ATTACH_RIGHT_PEC.
    </description>
    </completion>
    <completion string="ATTACH_RPEC" value="30">
      <description>
Passed to llAttachToAvatar to attach task to right pectoral
    </description>
    </completion>
    <completion string="ATTACH_LEFT_PEC" value="29">
      <description>
Passed to llAttachToAvatar to attach task to left pectoral
    </description>
    </completion>
    <completion string="ATTACH_RIGHT_PEC" value="30">
      <description>
Passed to llAttachToAvatar to attach task to right pectoral
    </description>
    </completion>
    <completion string="ATTACH_HUD_BOTTOM" value="37">
      <description>
Passed to llAttachToAvatar to attach task to bottom HUD area
    </description>
    </completion>
    <completion string="ATTACH_HUD_BOTTOM_LEFT" value="36">
      <description>
Passed to llAttachToAvatar to attach task to bottom left HUD area
    </description>
    </completion>
    <completion string="ATTACH_HUD_BOTTOM_RIGHT" value="38">
      <description>
Passed to llAttachToAvatar to attach task to bottom right HUD area
    </description>
    </completion>
    <completion string="ATTACH_HUD_CENTER_1" value="35">
      <description>
Passed to llAttachToAvatar to attach task to center 1 HUD area
    </description>
    </completion>
    <completion string="ATTACH_HUD_CENTER_2" value="31">
      <description>
Passed to llAttachToAvatar to attach task to center 2 HUD area
    </description>
    </completion>
    <completion string="ATTACH_HUD_TOP_CENTER" value="33">
      <description>
Passed to llAttachToAvatar to attach task to top center HUD area
    </description>
    </completion>
    <completion string="ATTACH_HUD_TOP_LEFT" value="34">
      <description>
Passed to llAttachToAvatar to attach task to top left HUD area
    </description>
    </completion>
    <completion string="ATTACH_HUD_TOP_RIGHT" value="32">
      <description>
Passed to llAttachToAvatar to attach task to top right HUD area
    </description>
    </completion>
    <completion string="ATTACH_NECK" value="39">
      <description>
Passed to llAttachToAvatar to attach task to neck
    </description>
    </completion>
    <completion string="ATTACH_AVATAR_CENTER" value="40">
      <description>
Passed to llAttachToAvatar to attach task to avatar center
    </description>
    </completion>
    <completion string="ATTACH_LHAND_RING1" value="41">
      <description>
Passed to llAttachToAvatar to attach task to left ring finger
    </description>
    </completion>
    <completion string="ATTACH_RHAND_RING1" value="42">
      <description>
Passed to llAttachToAvatar to attach task to right ring finger
    </description>
    </completion>
    <completion string="ATTACH_TAIL_BASE" value="43">
      <description>
Passed to llAttachToAvatar to attach task to tail base
    </description>
    </completion>
    <completion string="ATTACH_TAIL_TIP" value="44">
      <description>
Passed to llAttachToAvatar to attach task to tail tip
    </description>
    </completion>
    <completion string="ATTACH_LWING" value="45">
      <description>
Passed to llAttachToAvatar to attach task to left wing
    </description>
    </completion>
    <completion string="ATTACH_RWING" value="46">
      <description>
Passed to llAttachToAvatar to attach task to right wing
    </description>
    </completion>
    <completion string="ATTACH_FACE_JAW" value="47">
      <description>
Passed to llAttachToAvatar to attach task to jaw
    </description>
    </completion>
    <completion string="ATTACH_FACE_LEAR" value="48">
      <description>
Passed to llAttachToAvatar to attach task to left ear (extended)
    </description>
    </completion>
    <completion string="ATTACH_FACE_REAR" value="49">
      <description>
Passed to llAttachToAvatar to attach task to right ear (extended)
    </description>
    </completion>
    <completion string="ATTACH_FACE_LEYE" value="50">
      <description>
Passed to llAttachToAvatar to attach task to left eye (extended)
    </description>
    </completion>
    <completion string="ATTACH_FACE_REYE" value="51">
      <description>
Passed to llAttachToAvatar to attach task to right eye (extended)
    </description>
    </completion>
    <completion string="ATTACH_FACE_TONGUE" value="52">
      <description>
Passed to llAttachToAvatar to attach task to tongue
    </description>
    </completion>
    <completion string="ATTACH_GROIN" value="53">
      <description>
Passed to llAttachToAvatar to attach task to groin
    </description>
    </completion>
    <completion string="ATTACH_HIND_LFOOT" value="54">
      <description>
Passed to llAttachToAvatar to attach task to left hindfoot
    </description>
    </completion>
    <completion string="ATTACH_HIND_RFOOT" value="55">
      <description>
Passed to llAttachToAvatar to attach task to right hindfoot
    </description>
    </completion>
    <completion string="LAND_LEVEL" value="0">
      <description>
Passed to llModifyLand to level terrain
    </description>
    </completion>
    <completion string="LAND_RAISE" value="1">
      <description>
Passed to llModifyLand to raise terrain
    </description>
    </completion>
    <completion string="LAND_LOWER" value="2">
      <description>
Passed to llModifyLand to lower terrain
    </description>
    </completion>
    <completion string="LAND_SMOOTH" value="3">
      <description>
Passed to llModifyLand to smooth terrain
    </description>
    </completion>
    <completion string="LAND_NOISE" value="4">
      <description>
Passed to llModifyLand to randomize terrain
    </description>
    </completion>
    <completion string="LAND_REVERT" value="5">
      <description>
Passed to llModifyLand to revert terrain toward original state
    </description>
    </completion>
    <completion string="LAND_SMALL_BRUSH" value="1" deprecated="true">
      <description>
Deprecated, do not use. Use the value 0 to mean a 2x2 brush.
    </description>
    </completion>
    <completion string="LAND_MEDIUM_BRUSH" value="2" deprecated="true">
      <description>
Deprecated, do not use. Use the value 1 to mean a 4x4 brush.
    </description>
    </completion>
    <completion string="LAND_LARGE_BRUSH" value="3" deprecated="true">
      <description>
Deprecated, do not use. Use the value 2 to mean an 8x8 brush.
    </description>
    </completion>
    <completion string="DATA_PAYINFO" value="8">
      <description>
Passed to llRequestAgentData to get payment status of an agent
    </description>
    </completion>
    <completion string="DATA_ONLINE" value="1">
      <description>
Passed to llRequestAgentData to determine if agent is online
    </description>
    </completion>
    <completion string="DATA_NAME" value="2">
      <description>
Passed to llRequestAgentData to get full agent name
    </description>
    </completion>
    <completion string="DATA_BORN" value="3">
      <description>
Passed to llRequestAgentData to get born on date as a string
    </description>
    </completion>
    <completion string="DATA_RATING" value="4" deprecated="true">
      <description>
Passed to llRequestAgentData to get a comma separated sting of integer ratings. DEPRECATED - Ratings are no longer in use and using this value in a query always returns &quot;0, 0, 0, 0, 0, 0&quot;.
    </description>
    </completion>
    <completion string="DATA_SIM_POS" value="5">
      <description>
Passed to llRequestSimulatorData to get a string (cast to vector) of a simulator&apos;s global position
    </description>
    </completion>
    <completion string="DATA_SIM_STATUS" value="6">
      <description>
Passed to llRequestSimulatorData to get the status of a simulator
    </description>
    </completion>
    <completion string="DATA_SIM_RATING" value="7">
      <description>
Passed to llRequestSimulatorData to get the rating of a simulator
    </description>
    </completion>
    <completion string="DATA_SIM_RELEASE" value="128">
      <description>
Passed to llRequestSimulatorData to get the release of a simulator
    </description>
    </completion>
    <completion string="PAYMENT_INFO_ON_FILE" value="0x1">
      <description>
Used with llRequestAgentData to tell if Agent is of &quot;Payment Info On File&quot; status
    </description>
    </completion>
    <completion string="PAYMENT_INFO_USED" value="0x2">
      <description>
Used with llRequestAgentData to tell if Agent is of &quot;Payment Info Used&quot; status
    </description>
    </completion>
    <completion string="ANIM_ON" value="0x1">
      <description>
Enable texture animation
    </description>
    </completion>
    <completion string="LOOP" value="0x2">
      <description>
Loop when animating textures
    </description>
    </completion>
    <completion string="REVERSE" value="0x4">
      <description>
Animate in the reverse direction
    </description>
    </completion>
    <completion string="PING_PONG" value="0x8">
      <description>
Animate forward, then reverse
    </description>
    </completion>
    <completion string="SMOOTH" value="0x10">
      <description>
Textures slides, instead of stepping
    </description>
    </completion>
    <completion string="ROTATE" value="0x20">
      <description>
Rotates the texture, instead of using frames
    </description>
    </completion>
    <completion string="SCALE" value="0x40">
      <description>
Scales the texture, instead of using frames
    </description>
    </completion>
    <completion string="ALL_SIDES" value="-1">
      <description>
Passed to various texture and color library functions to modify all sides
    </description>
    </completion>
    <completion string="LINK_SET" value="-1">
      <description>
Passed to various link functions to modify all blocks in the object
    </description>
    </completion>
    <completion string="LINK_ROOT" value="1">
      <description>
Passed to various link functions to modify only the root block (no effect on single block objects)
    </description>
    </completion>
    <completion string="LINK_ALL_OTHERS" value="-2">
      <description>
Passed to various link functions to modify all other blocks in the object
    </description>
    </completion>
    <completion string="LINK_ALL_CHILDREN" value="-3">
      <description>
Passed to various link functions to modify all child blocks in the object
    </description>
    </completion>
    <completion string="LINK_THIS" value="-4">
      <description>
Passed to various link functions to modify only the calling block
    </description>
    </completion>
    <completion string="CHANGED_INVENTORY" value="0x1">
      <description>
Parameter of changed event handler used to indicate change to task&apos;s inventory
    </description>
    </completion>
    <completion string="CHANGED_COLOR" value="0x2">
      <description>
Parameter of changed event handler used to indicate change to task&apos;s color
    </description>
    </completion>
    <completion string="CHANGED_SHAPE" value="0x4">
      <description>
Parameter of changed event handler used to indicate change to task&apos;s shape parameters
    </description>
    </completion>
    <completion string="CHANGED_SCALE" value="0x8">
      <description>
Parameter of changed event handler used to indicate change to task&apos;s scale
    </description>
    </completion>
    <completion string="CHANGED_TEXTURE" value="0x10">
      <description>
Parameter of changed event handler used to indicate change to task&apos;s texture
    </description>
    </completion>
    <completion string="CHANGED_LINK" value="0x20">
      <description>
Parameter of changed event handler used to indicate change to task&apos;s link status
    </description>
    </completion>
    <completion string="CHANGED_ALLOWED_DROP" value="0x40">
      <description>
Parameter of changed event handler used to indicate a user dropped an inventory item
onto task that was allowed only by llAllowInventoryDrop function call
    </description>
    </completion>
    <completion string="CHANGED_OWNER" value="0x80">
      <description>
Parameter of changed event handler used to indicate change to task&apos;s owner ONLY when an object is sold as original or deeded to group
    </description>
    </completion>
    <completion string="CHANGED_REGION" value="0x100">
      <description>
Parameter of changed event handler used to indicate the region has changed
    </description>
    </completion>
    <completion string="CHANGED_TELEPORT" value="0x200">
      <description>
Parameter of changed event handler used to indicate teleport has completed
    </description>
    </completion>
    <completion string="CHANGED_REGION_START" value="0x400">
      <description>
Parameter of changed event handler used to indicate the region has been restarted
    </description>
    </completion>
    <completion string="CHANGED_REGION_RESTART" value="0x400">
      <description>
Parameter of changed event handler used to indicate the region has been restarted
    </description>
    </completion>
    <completion string="CHANGED_MEDIA" value="0x800">
      <description>
Parameter of changed event handler used to indicate that media has changed on a face of the task
    </description>
    </completion>
    <completion string="CHANGED_ANIMATION" value="0x4000">
      <description>
</description>
    </completion>
    <completion string="CHANGED_STATE" value="0x8000">
      <description>
</description>
    </completion>
    <completion string="CHANGED_POSITION" value="0x8000">
      <description>
</description>
    </completion>
    <completion string="TYPE_INTEGER" value="1">
      <description>
Indicates that the list entry is holding an integer
    </description>
    </completion>
    <completion string="TYPE_FLOAT" value="2">
      <description>
Indicates that the list entry is holding an float
    </description>
    </completion>
    <completion string="TYPE_STRING" value="3">
      <description>
Indicates that the list entry is holding an string
    </description>
    </completion>
    <completion string="TYPE_KEY" value="4">
      <description>
Indicates that the list entry is holding an key
    </description>
    </completion>
    <completion string="TYPE_VECTOR" value="5">
      <description>
Indicates that the list entry is holding an vector
    </description>
    </completion>
    <completion string="TYPE_ROTATION" value="6">
      <description>
Indicates that the list entry is holding an rotation
    </description>
    </completion>
    <completion string="TYPE_INVALID" value="0">
      <description>
Indicates that this wasn&apos;t a valid list entry
    </description>
    </completion>
    <completion string="REMOTE_DATA_CHANNEL" value="1">
      <description>
Value of event_type in remote_event after successful llOpenRemoteDataChannel
    </description>
    </completion>
    <completion string="REMOTE_DATA_REQUEST" value="2">
      <description>
Value of event_type in remote_event if XML-RPC request is received
    </description>
    </completion>
    <completion string="REMOTE_DATA_REPLY" value="3">
      <description>
Value of event_type in remote_event if XML-RPC reply is received
    </description>
    </completion>
    <completion string="PRIM_TYPE" value="9">
      <description>
Followed by PRIM_TYPE_BOX, PRIM_TYPE_CYLINDER, PRIM_TYPE_PRISM, PRIM_TYPE_SPHERE, PRIM_TYPE_TORUS, PRIM_TYPE_TUBE, or PRIM_TYPE_SCULPT and their arguments
    </description>
    </completion>
    <completion string="PRIM_MATERIAL" value="2">
      <description>
Followed by PRIM_MATERIAL_STONE, PRIM_MATERIAL_METAL, PRIM_MATERIAL_GLASS, PRIM_MATERIAL_WOOD, PRIM_MATERIAL_FLESH, PRIM_MATERIAL_PLASTIC, or PRIM_MATERIAL_RUBBER
    </description>
    </completion>
    <completion string="PRIM_PHYSICS" value="3">
      <description>
Sets physics to TRUE or FALSE
    </description>
    </completion>
    <completion string="PRIM_FLEXIBLE" value="21">
      <description>
Followed by TRUE or FALSE, integer softness, float gravity, float friction, float wind, float tension, and vector force
    </description>
    </completion>
    <completion string="PRIM_POINT_LIGHT" value="23">
      <description>
Followed by TRUE or FALSE, vector color, float intensity, float radius, float falloff
    </description>
    </completion>
    <completion string="PRIM_TEMP_ON_REZ" value="4">
      <description>
Sets temporary on rez to TRUE or FALSE
    </description>
    </completion>
    <completion string="PRIM_PHANTOM" value="5">
      <description>
Sets phantom to TRUE or FALSE
    </description>
    </completion>
    <completion string="PRIM_CAST_SHADOWS" value="24">
      <description>
DEPRECATED. Takes 1 parameter, an integer, but has no effect when set and always returns 0 if used in llGetPrimitiveParams.
    </description>
    </completion>
    <completion string="PRIM_POSITION" value="6">
      <description>
Sets prim&apos;s local position to a vector position; gets prim&apos;s world position
    </description>
    </completion>
    <completion string="PRIM_POS_LOCAL" value="33">
      <description>
Gets/Sets primitive local (root-prim relative) position (vector position)
    </description>
    </completion>
    <completion string="PRIM_SIZE" value="7">
      <description>
Sets primitive size to a vector size
    </description>
    </completion>
    <completion string="PRIM_ROTATION" value="8">
      <description>
Gets primitive absolute rotation. Sets absolute rotation for root, and local rotation offset by root&apos;s rotation for children.
    </description>
    </completion>
    <completion string="PRIM_ROT_LOCAL" value="29">
      <description>
Gets/Sets primitive local (root-prim relative) rotation
    </description>
    </completion>
    <completion string="PRIM_TEXTURE" value="17">
      <description>
Followed by an integer face, string name, vector repeats, vector offsets,
and float rotation in radians
    </description>
    </completion>
    <completion string="PRIM_COLOR" value="18">
      <description>
Followed by an integer face, vector color, and float alpha
    </description>
    </completion>
    <completion string="PRIM_BUMP_SHINY" value="19">
      <description>
Followed by an integer face, one of PRIM_SHINY_NONE, PRIM_SHINY_LOW,
PRIM_SHINY_MEDIUM, or PRIM_SHINY_HIGH,
and one of PRIM_BUMP_NONE, PRIM_BUMP_BRIGHT, PRIM_BUMP_DARK, etc
    </description>
    </completion>
    <completion string="PRIM_FULLBRIGHT" value="20">
      <description>
Followed by an integer face, and TRUE or FALSE
    </description>
    </completion>
    <completion string="PRIM_TEXGEN" value="22">
      <description>
Followed by an integer face, and one of PRIM_TEXGEN_DEFAULT or PRIM_TEXGEN_PLANAR
    </description>
    </completion>
    <completion string="PRIM_GLOW" value="25">
      <description>
Followed by an integer face, and a float from 0.0 to 1.0 specifying glow amount
    </description>
    </completion>
    <completion string="PRIM_TEXT" value="26">
      <description>
For floating text. Followed by a string text, vector color, and float alpha.
    </description>
    </completion>
    <completion string="PRIM_NAME" value="27">
      <description>
For primitive name. Followed by a string.
    </description>
    </completion>
    <completion string="PRIM_DESC" value="28">
      <description>
For primitive description. Followed by a string.
    </description>
    </completion>
    <completion string="PRIM_OMEGA" value="32">
      <description>
For primitive target omega. Followed by vector axis, float spinrate, float gain.
    </description>
    </completion>
    <completion string="PRIM_LINK_TARGET" value="34">
      <description>
Will cause subsequent parameters to affect the prim which link number parameter follows this flag, independently of the original prim(s) being affected. Compatible with all PrimitiveParams functions.
    </description>
    </completion>
    <completion string="PRIM_PHYSICS_SHAPE_TYPE" value="30">
      <description>
For primitive physics shape type. Followed with either PRIM_PHYSICS_SHAPE_PRIM, PRIM_PHYSICS_SHAPE_NONE or PRIM_PHYSICS_SHAPE_CONVEX.
    </description>
    </completion>
    <completion string="PRIM_PHYSICS_SHAPE_TYPE" value="35">
      <description>
For primitive physics shape type. Followed with either PRIM_PHYSICS_SHAPE_PRIM, PRIM_PHYSICS_SHAPE_NONE or PRIM_PHYSICS_SHAPE_CONVEX.
    </description>
    </completion>
    <completion string="PRIM_SLICE" value="35">
      <description>
Get and set the &apos;slice&apos; parameter of all shapes. Takes a vector parameter of the form &lt;start_slice, end_slice, 0&gt;.
    </description>
    </completion>
    <completion string="PRIM_TYPE_BOX" value="0">
      <description>
Followed by integer hole shape, vector cut, float hollow, vector twist,
vector top size, and vector top shear
    </description>
    </completion>
    <completion string="PRIM_TYPE_CYLINDER" value="1">
      <description>
Followed by integer hole shape, vector cut, float hollow, vector twist,
vector top size, and vector top shear
    </description>
    </completion>
    <completion string="PRIM_TYPE_PRISM" value="2">
      <description>
Followed by integer hole shape, vector cut, float hollow, vector twist,
vector top size, and vector top shear
    </description>
    </completion>
    <completion string="PRIM_TYPE_SPHERE" value="3">
      <description>
Followed by integer hole shape, vector cut, float hollow, vector twist,
and vector dimple
    </description>
    </completion>
    <completion string="PRIM_TYPE_TORUS" value="4">
      <description>
Followed by integer hole shape, vector cut, float hollow, vector twist,
vector hole size, vector top shear, vector advanced cut, vector taper,
float revolutions, float radius offset, and float skew
    </description>
    </completion>
    <completion string="PRIM_TYPE_TUBE" value="5">
      <description>
Followed by integer hole shape, vector cut, float hollow, vector twist,
vector hole size, vector top shear, vector advanced cut, vector taper,
float revolutions, float radius offset, and float skew
    </description>
    </completion>
    <completion string="PRIM_TYPE_RING" value="6">
      <description>
Followed by integer hole shape, vector cut, float hollow, vector twist,
vector hole size, vector top shear, vector advanced cut, vector taper,
float revolutions, float radius offset, and float skew
    </description>
    </completion>
    <completion string="PRIM_TYPE_SCULPT" value="7">
      <description>
Followed by a key/string texture uuid, and one of PRIM_SCULPT_TYPE_SPHERE, PRIM_SCULPT_TYPE_TORUS, PRIM_SCULPT_TYPE_PLANE, or PRIM_SCULPT_TYPE_CYLINDER
    </description>
    </completion>
    <completion string="PRIM_HOLE_DEFAULT" value="0x0">
      <description>
Sets hole type to match the prim type
    </description>
    </completion>
    <completion string="PRIM_HOLE_SQUARE" value="0x20">
      <description>
Sets hole type to square
    </description>
    </completion>
    <completion string="PRIM_HOLE_CIRCLE" value="0x10">
      <description>
Sets hole type to circle
    </description>
    </completion>
    <completion string="PRIM_HOLE_TRIANGLE" value="0x30">
      <description>
Sets hole type to triangle
    </description>
    </completion>
    <completion string="PRIM_MATERIAL_STONE" value="0">
      <description>
Sets material to stone
    </description>
    </completion>
    <completion string="PRIM_MATERIAL_METAL" value="1">
      <description>
Sets material to metal
    </description>
    </completion>
    <completion string="PRIM_MATERIAL_GLASS" value="2">
      <description>
Sets material to glass
    </description>
    </completion>
    <completion string="PRIM_MATERIAL_WOOD" value="3">
      <description>
Sets material to wood
    </description>
    </completion>
    <completion string="PRIM_MATERIAL_FLESH" value="4">
      <description>
Sets material to flesh
    </description>
    </completion>
    <completion string="PRIM_MATERIAL_PLASTIC" value="5">
      <description>
Sets material to plastic
    </description>
    </completion>
    <completion string="PRIM_MATERIAL_RUBBER" value="6">
      <description>
Sets material to rubber
    </description>
    </completion>
    <completion string="PRIM_MATERIAL_LIGHT" value="7" deprecated="true">
      <description>
Sets material to light. DEPRECATED - use PRIM_FULLBRIGHT instead.
    </description>
    </completion>
    <completion string="PRIM_SHINY_NONE" value="0">
      <description>
No shininess
    </description>
    </completion>
    <completion string="PRIM_SHINY_LOW" value="1">
      <description>
Low shininess
    </description>
    </completion>
    <completion string="PRIM_SHINY_MEDIUM" value="2">
      <description>
Medium shininess
    </description>
    </completion>
    <completion string="PRIM_SHINY_HIGH" value="3">
      <description>
High shininess
    </description>
    </completion>
    <completion string="PRIM_BUMP_NONE" value="0">
      <description>
No bump map
    </description>
    </completion>
    <completion string="PRIM_BUMP_BRIGHT" value="1">
      <description>
Generate bump map from highlights
    </description>
    </completion>
    <completion string="PRIM_BUMP_DARK" value="2">
      <description>
Generate bump map from lowlights
    </description>
    </completion>
    <completion string="PRIM_BUMP_WOOD" value="3">
      <description>
Wood bump map
    </description>
    </completion>
    <completion string="PRIM_BUMP_BARK" value="4">
      <description>
Bark bump map
    </description>
    </completion>
    <completion string="PRIM_BUMP_BRICKS" value="5">
      <description>
Brick bump map
    </description>
    </completion>
    <completion string="PRIM_BUMP_CHECKER" value="6">
      <description>
Checker bump map
    </description>
    </completion>
    <completion string="PRIM_BUMP_CONCRETE" value="7">
      <description>
Concrete bump map
    </description>
    </completion>
    <completion string="PRIM_BUMP_TILE" value="8">
      <description>
Tile bump map
    </description>
    </completion>
    <completion string="PRIM_BUMP_STONE" value="9">
      <description>
Stone bump map
    </description>
    </completion>
    <completion string="PRIM_BUMP_DISKS" value="10">
      <description>
Disk bump map
    </description>
    </completion>
    <completion string="PRIM_BUMP_GRAVEL" value="11">
      <description>
Gravel bump map
    </description>
    </completion>
    <completion string="PRIM_BUMP_BLOBS" value="12">
      <description>
Blob bump map
    </description>
    </completion>
    <completion string="PRIM_BUMP_SIDING" value="13">
      <description>
Siding bump map
    </description>
    </completion>
    <completion string="PRIM_BUMP_LARGETILE" value="14">
      <description>
Large tile bump map
    </description>
    </completion>
    <completion string="PRIM_BUMP_STUCCO" value="15">
      <description>
Stucco bump map
    </description>
    </completion>
    <completion string="PRIM_BUMP_SUCTION" value="16">
      <description>
Suction cup bump map
    </description>
    </completion>
    <completion string="PRIM_BUMP_WEAVE" value="17">
      <description>
Weave bump map
    </description>
    </completion>
    <completion string="PRIM_TEXGEN_DEFAULT" value="0">
      <description>
Default texture mapping
    </description>
    </completion>
    <completion string="PRIM_TEXGEN_PLANAR" value="1">
      <description>
Planar texture mapping
    </description>
    </completion>
    <completion string="PRIM_SCULPT_TYPE_SPHERE" value="1">
      <description>
Stitch edges in a sphere-like way
    </description>
    </completion>
    <completion string="PRIM_SCULPT_TYPE_TORUS" value="2">
      <description>
Stitch edges in a torus-like way
    </description>
    </completion>
    <completion string="PRIM_SCULPT_TYPE_PLANE" value="3">
      <description>
Do not stitch edges
    </description>
    </completion>
    <completion string="PRIM_SCULPT_TYPE_CYLINDER" value="4">
      <description>
Stitch edges in a cylinder-like way
    </description>
    </completion>
    <completion string="PRIM_SCULPT_TYPE_MESH" value="5">
      <description>
</description>
    </completion>
    <completion string="PRIM_SCULPT_TYPE_MASK" value="7">
      <description>
Mask used to determine stitching type
    </description>
    </completion>
    <completion string="PRIM_SCULPT_FLAG_INVERT" value="0x40">
      <description>
Flag to specify that the surface normals should be inverted
    </description>
    </completion>
    <completion string="PRIM_SCULPT_FLAG_MIRROR" value="0x80">
      <description>
Flag to specify that the prim should be reflected along X axis
    </description>
    </completion>
    <completion string="PRIM_PHYSICS_SHAPE_PRIM" value="0">
      <description>
Use the normal prim shape for physics (this is the default for all non-mesh objects)
    </description>
    </completion>
    <completion string="PRIM_PHYSICS_SHAPE_CONVEX" value="2">
      <description>
Use the convex hull of the prim shape for physics (this is the default for mesh objects)
    </description>
    </completion>
    <completion string="PRIM_PHYSICS_SHAPE_NONE" value="1">
      <description>
Ignore this prim in the physics shape. This cannot be applied to the root prim.
    </description>
    </completion>
    <completion string="PRIM_PHYSICS_MATERIAL" value="31">
      <description>
</description>
    </completion>
    <completion string="DENSITY" value="0x1">
      <description>
For use with llSetPhysicsMaterial() as a bitwise value in its material_bits parameter, to set the density
    </description>
    </completion>
    <completion string="DENSITY" value="0">
      <description>
For use with llSetPhysicsMaterial() as a bitwise value in its material_bits parameter, to set the density
    </description>
    </completion>
    <completion string="FRICTION" value="0x2">
      <description>
For use with llSetPhysicsMaterial as a bitwise value in its material_bits parameter, to set the friction
    </description>
    </completion>
    <completion string="FRICTION" value="1">
      <description>
For use with llSetPhysicsMaterial as a bitwise value in its material_bits parameter, to set the friction
    </description>
    </completion>
    <completion string="RESTITUTION" value="0x4">
      <description>
For use with llSetPhysicsMaterial as a bitwise value in its material_bits parameter, to set the restitution
    </description>
    </completion>
    <completion string="RESTITUTION" value="2">
      <description>
For use with llSetPhysicsMaterial as a bitwise value in its material_bits parameter, to set the restitution
    </description>
    </completion>
    <completion string="GRAVITY_MULTIPLIER" value="0x8">
      <description>
For use with llSetPhysicsMaterial as a bitwise value in its material_bits parameter, to set the gravity multiplier
    </description>
    </completion>
    <completion string="GRAVITY_MULTIPLIER" value="3">
      <description>
For use with llSetPhysicsMaterial as a bitwise value in its material_bits parameter, to set the gravity multiplier
    </description>
    </completion>
    <completion string="MASK_BASE" value="0">
      <description>
Base permissions
    </description>
    </completion>
    <completion string="MASK_OWNER" value="1">
      <description>
Owner permissions
    </description>
    </completion>
    <completion string="MASK_GROUP" value="2">
      <description>
Group permissions
    </description>
    </completion>
    <completion string="MASK_EVERYONE" value="3">
      <description>
Everyone permissions
    </description>
    </completion>
    <completion string="MASK_NEXT" value="4">
      <description>
Next owner permissions
    </description>
    </completion>
    <completion string="PERM_TRANSFER" value="0x00002000">
      <description>
Transfer permission
    </description>
    </completion>
    <completion string="PERM_MODIFY" value="0x00004000">
      <description>
Modify permission
    </description>
    </completion>
    <completion string="PERM_COPY" value="0x00008000">
      <description>
Copy permission
    </description>
    </completion>
    <completion string="PERM_MOVE" value="0x00080000">
      <description>
Move permission
    </description>
    </completion>
    <completion string="PERM_ALL" value="0x7FFFFFFF">
      <description>
Move/Modify/Copy/Transfer permissions
    </description>
    </completion>
    <completion string="PARCEL_MEDIA_COMMAND_STOP" value="0">
      <description>
Stop media stream
    </description>
    </completion>
    <completion string="PARCEL_MEDIA_COMMAND_PAUSE" value="1">
      <description>
Pause media stream
    </description>
    </completion>
    <completion string="PARCEL_MEDIA_COMMAND_PLAY" value="2">
      <description>
Play media stream
    </description>
    </completion>
    <completion string="PARCEL_MEDIA_COMMAND_LOOP" value="3">
      <description>
Loop media stream
    </description>
    </completion>
    <completion string="PARCEL_MEDIA_COMMAND_LOOP_SET" value="13">
      <description>
Get or set the parcel&apos;s media loop duration
    </description>
    </completion>
    <completion string="PARCEL_MEDIA_COMMAND_TEXTURE" value="4">
      <description>
Get or set the parcel&apos;s media texture
    </description>
    </completion>
    <completion string="PARCEL_MEDIA_COMMAND_URL" value="5">
      <description>
Get or set the parcel&apos;s media url
    </description>
    </completion>
    <completion string="PARCEL_MEDIA_COMMAND_TYPE" value="10">
      <description>
Get or set the parcel&apos;s media mimetype
    </description>
    </completion>
    <completion string="PARCEL_MEDIA_COMMAND_DESC" value="12">
      <description>
Get or set the parcel&apos;s media description
    </description>
    </completion>
    <completion string="PARCEL_MEDIA_COMMAND_TIME" value="6">
      <description>
Set media stream to specific time
    </description>
    </completion>
    <completion string="PARCEL_MEDIA_COMMAND_SIZE" value="11">
      <description>
Get or set the parcel&apos;s media pixel resolution
    </description>
    </completion>
    <completion string="PARCEL_MEDIA_COMMAND_AGENT" value="7">
      <description>
Allows media stream commands to apply to only one agent
    </description>
    </completion>
    <completion string="PARCEL_MEDIA_COMMAND_UNLOAD" value="8">
      <description>
Unloads the media stream
    </description>
    </completion>
    <completion string="PARCEL_MEDIA_COMMAND_AUTO_ALIGN" value="9">
      <description>
Auto aligns the media stream to the texture size. May cause a performance hit and loss of some visual quality.
    </description>
    </completion>
    <completion string="PAY_HIDE" value="-1">
      <description>
Used with llSetPayPrice to hide a button
    </description>
    </completion>
    <completion string="PAY_DEFAULT" value="-2">
      <description>
Used with llSetPayPrice to use the default price for a button
    </description>
    </completion>
    <completion string="LIST_STAT_MAX" value="2">
      <description>
Used with llListStatistics to find the largest number in a list
    </description>
    </completion>
    <completion string="LIST_STAT_MIN" value="1">
      <description>
Used with llListStatistics to find the smallest number in a list
    </description>
    </completion>
    <completion string="LIST_STAT_MEAN" value="3">
      <description>
Used with llListStatistics to find the mean of the numbers in a list
    </description>
    </completion>
    <completion string="LIST_STAT_MEDIAN" value="4">
      <description>
Used with llListStatistics to find the median of the numbers in a list
    </description>
    </completion>
    <completion string="LIST_STAT_STD_DEV" value="5">
      <description>
Used with llListStatistics to find the standard deviation of the numbers in a list
    </description>
    </completion>
    <completion string="LIST_STAT_SUM" value="6">
      <description>
Used with llListStatistics to find the sum of the numbers in a list
    </description>
    </completion>
    <completion string="LIST_STAT_SUM_SQUARES" value="7">
      <description>
Used with llListStatistics to find the sum of the squares of the numbers in a list
    </description>
    </completion>
    <completion string="LIST_STAT_NUM_COUNT" value="8">
      <description>
Used with llListStatistics to find how many numbers are in a list
    </description>
    </completion>
    <completion string="LIST_STAT_GEOMETRIC_MEAN" value="9">
      <description>
Used with llListStatistics to find the geometric mean of the numbers in a list (all numbers must be &gt; 0)
    </description>
    </completion>
    <completion string="LIST_STAT_HARMONIC_MEAN" value="100">
      <description>
Used with llListStatistics to find the harmonic mean of the numbers in a list (all numbers must be &lt;&gt; 0)
    </description>
    </completion>
    <completion string="LIST_STAT_RANGE" value="0">
      <description>
Used with llListStatistics to find the range of the numbers in a list
    </description>
    </completion>
    <completion string="PARCEL_FLAG_ALLOW_FLY" value="0x00000001">
      <description>
Used with llGetParcelFlags to find if a parcel allows flying
    </description>
    </completion>
    <completion string="PARCEL_FLAG_ALLOW_GROUP_SCRIPTS" value="0x02000000">
      <description>
Used with llGetParcelFlags to find if a parcel allows group scripts
    </description>
    </completion>
    <completion string="PARCEL_FLAG_ALLOW_SCRIPTS" value="0x00000002">
      <description>
Used with llGetParcelFlags to find if a parcel allows outside scripts
    </description>
    </completion>
    <completion string="PARCEL_FLAG_ALLOW_LANDMARK" value="0x00000008">
      <description>
Used with llGetParcelFlags to find if a parcel allows landmarks to be created
    </description>
    </completion>
    <completion string="PARCEL_FLAG_ALLOW_TERRAFORM" value="0x00000010">
      <description>
Used with llGetParcelFlags to find if a parcel allows anyone to terraform the land
    </description>
    </completion>
    <completion string="PARCEL_FLAG_ALLOW_DAMAGE" value="0x00000020">
      <description>
Used with llGetParcelFlags to find if a parcel allows damage
    </description>
    </completion>
    <completion string="PARCEL_FLAG_ALLOW_CREATE_OBJECTS" value="0x00000040">
      <description>
Used with llGetParcelFlags to find if a parcel allows anyone to create objects
    </description>
    </completion>
    <completion string="PARCEL_FLAG_ALLOW_CREATE_GROUP_OBJECTS" value="0x04000000">
      <description>
Used with llGetParcelFlags to find if a parcel allows group members or objects to create objects
    </description>
    </completion>
    <completion string="PARCEL_FLAG_USE_ACCESS_GROUP" value="0x00000100">
      <description>
Used with llGetParcelFlags to find if a parcel limits access to a group
    </description>
    </completion>
    <completion string="PARCEL_FLAG_USE_ACCESS_LIST" value="0x00000200">
      <description>
Used with llGetParcelFlags to find if a parcel limits access to a list of residents
    </description>
    </completion>
    <completion string="PARCEL_FLAG_USE_BAN_LIST" value="0x00000400">
      <description>
Used with llGetParcelFlags to find if a parcel uses a ban list
    </description>
    </completion>
    <completion string="PARCEL_FLAG_USE_LAND_PASS_LIST" value="0x00000800">
      <description>
Used with llGetParcelFlags to find if a parcel allows passes to be purchased
    </description>
    </completion>
    <completion string="PARCEL_FLAG_LOCAL_SOUND_ONLY" value="0x00008000">
      <description>
Used with llGetParcelFlags to find if a parcel restricts spacialized sound to the parcel
    </description>
    </completion>
    <completion string="PARCEL_FLAG_RESTRICT_PUSHOBJECT" value="0x00200000">
      <description>
Used with llGetParcelFlags to find if a parcel restricts llPushObject calls
    </description>
    </completion>
    <completion string="PARCEL_FLAG_ALLOW_ALL_OBJECT_ENTRY" value="0x08000000">
      <description>
Used with llGetParcelFlags to find if a parcel allows all objects to enter
    </description>
    </completion>
    <completion string="PARCEL_FLAG_ALLOW_GROUP_OBJECT_ENTRY" value="0x10000000">
      <description>
Used with llGetParcelFlags to find if a parcel only allows group (and owner) objects to enter
    </description>
    </completion>
    <completion string="REGION_FLAG_ALLOW_DAMAGE" value="0x00000001">
      <description>
Used with llGetRegionFlags to find if a region is entirely damage enabled
    </description>
    </completion>
    <completion string="REGION_FLAG_FIXED_SUN" value="0x00000010">
      <description>
Used with llGetRegionFlags to find if a region has a fixed sun position
    </description>
    </completion>
    <completion string="REGION_FLAG_BLOCK_TERRAFORM" value="0x00000040">
      <description>
Used with llGetRegionFlags to find if a region terraforming disabled
    </description>
    </completion>
    <completion string="REGION_FLAG_SANDBOX" value="0x00000100">
      <description>
Used with llGetRegionFlags to find if a region is a sandbox
    </description>
    </completion>
    <completion string="REGION_FLAG_DISABLE_COLLISIONS" value="0x00001000">
      <description>
Used with llGetRegionFlags to find if a region has disabled collisions
    </description>
    </completion>
    <completion string="REGION_FLAG_DISABLE_PHYSICS" value="0x00004000">
      <description>
Used with llGetRegionFlags to find if a region has disabled physics
    </description>
    </completion>
    <completion string="REGION_FLAG_BLOCK_FLY" value="0x00080000">
      <description>
Used with llGetRegionFlags to find if a region blocks flying
    </description>
    </completion>
    <completion string="REGION_FLAG_ALLOW_DIRECT_TELEPORT" value="0x00100000">
      <description>
Used with llGetRegionFlags to find if a region allows direct teleports
    </description>
    </completion>
    <completion string="REGION_FLAG_RESTRICT_PUSHOBJECT" value="0x00400000">
      <description>
Used with llGetRegionFlags to find if a region restricts llPushObject calls
    </description>
    </completion>
    <completion string="REGION_FLAG_BLOCK_FLYOVER" value="0x08000000">
      <description>
</description>
    </completion>
    <completion string="HTTP_METHOD" value="0">
      <description>
Used with llHTTPRequest to specify the method, such as &quot;GET&quot; or &quot;POST&quot;
    </description>
    </completion>
    <completion string="HTTP_MIMETYPE" value="1">
      <description>
Used with llHTTPRequest to specify the MIME type, defaults to &quot;text/plain&quot;
    </description>
    </completion>
    <completion string="HTTP_BODY_MAXLENGTH" value="2">
      <description>
Used with llHTTPRequest to specify the maximum reponse body to return
    </description>
    </completion>
    <completion string="HTTP_VERIFY_CERT" value="3">
      <description>
Used with llHTTPRequest to specify SSL certificate verification
    </description>
    </completion>
    <completion string="HTTP_BODY_TRUNCATED" value="0">
      <description>
Used with http_response to indicate truncation point in bytes
    </description>
    </completion>
    <completion string="HTTP_CUSTOM_HEADER" value="5">
      <description>
Used with http_response to indicate truncation point in bytes
    </description>
    </completion>
    <completion string="HTTP_VERBOSE_THROTTLE" value="4">
      <description>
Used with llHTTPRequest to toggle errors on outgoing requests throttling hit
    </description>
    </completion>
    <completion string="PARCEL_COUNT_TOTAL" value="0">
      <description>
Used with llGetParcelPrimCount to get the total number of prims on the parcel
    </description>
    </completion>
    <completion string="PARCEL_COUNT_OWNER" value="1">
      <description>
Used with llGetParcelPrimCount to get the number of prims on the parcel owned by the owner
    </description>
    </completion>
    <completion string="PARCEL_COUNT_GROUP" value="2">
      <description>
Used with llGetParcelPrimCount to get the number of prims on the parcel owned by the group
    </description>
    </completion>
    <completion string="PARCEL_COUNT_OTHER" value="3">
      <description>
Used with llGetParcelPrimCount to get the number of prims on the parcel owned by others
    </description>
    </completion>
    <completion string="PARCEL_COUNT_SELECTED" value="4">
      <description>
Used with llGetParcelPrimCount to get the number of prims on the parcel currently selected or sat upon
    </description>
    </completion>
    <completion string="PARCEL_COUNT_TEMP" value="5">
      <description>
Used with llGetParcelPrimCount to get the number of prims on the parcel that are temp on rez
    </description>
    </completion>
    <completion string="PARCEL_DETAILS_NAME" value="0">
      <description>
Used with llGetParcelDetails to get the parcel name
    </description>
    </completion>
    <completion string="PARCEL_DETAILS_DESC" value="1">
      <description>
Used with llGetParcelDetails to get the parcel description
    </description>
    </completion>
    <completion string="PARCEL_DETAILS_OWNER" value="2">
      <description>
Used with llGetParcelDetails to get the parcel owner id
    </description>
    </completion>
    <completion string="PARCEL_DETAILS_GROUP" value="3">
      <description>
Used with llGetParcelDetails to get the parcel group id
    </description>
    </completion>
    <completion string="PARCEL_DETAILS_AREA" value="4">
      <description>
Used with llGetParcelDetails to get the parcel area in square meters
    </description>
    </completion>
    <completion string="PARCEL_DETAILS_ID" value="5">
      <description>
Used with llGetParcelDetails to get the parcel id
    </description>
    </completion>
    <completion string="PARCEL_DETAILS_CLAIMDATE" value="10">
      <description>
    </description>
    </completion>
    <completion string="PARCEL_DETAILS_SEE_AVATARS" value="6">
      <description>
Used with llGetParcelDetails to get the avatars visibility setting
    </description>
    </completion>
    <completion string="PARCEL_DETAILS_PRIVACY" value="6">
      <description>
Used with llGetParcelDetails to get the avatars visibility setting
    </description>
    </completion>
    <completion string="STRING_TRIM_HEAD" value="0x1">
      <description>
Used with llStringTrim to trim leading spaces from a string
    </description>
    </completion>
    <completion string="STRING_TRIM_TAIL" value="0x2">
      <description>
Used with llStringTrim to trim trailing spaces from a string
    </description>
    </completion>
    <completion string="STRING_TRIM" value="0x3">
      <description>
Used with llStringTrim to trim both leading and trailing spaces from a string
    </description>
    </completion>
    <completion string="CLICK_ACTION_NONE" value="0">
      <description>
Used with llSetClickAction to disable the click action
    </description>
    </completion>
    <completion string="CLICK_ACTION_TOUCH" value="0">
      <description>
Used with llSetClickAction to set touch as the default action when object is clicked
    </description>
    </completion>
    <completion string="CLICK_ACTION_SIT" value="1">
      <description>
Used with llSetClickAction to set sit as the default action when object is clicked
    </description>
    </completion>
    <completion string="CLICK_ACTION_BUY" value="2">
      <description>
Used with llSetClickAction to set buy as the default action when object is clicked
    </description>
    </completion>
    <completion string="CLICK_ACTION_PAY" value="3">
      <description>
Used with llSetClickAction to set pay as the default action when object is clicked
    </description>
    </completion>
    <completion string="CLICK_ACTION_OPEN" value="4">
      <description>
Used with llSetClickAction to set open as the default action when object is clicked
    </description>
    </completion>
    <completion string="CLICK_ACTION_PLAY" value="5">
      <description>
Used with llSetClickAction to set play as the default action when object is clicked
    </description>
    </completion>
    <completion string="CLICK_ACTION_OPEN_MEDIA" value="6">
      <description>
Used with llSetClickAction to set open-media as the default action when object is clicked
    </description>
    </completion>
    <completion string="CLICK_ACTION_ZOOM" value="7">
      <description>
Used with llSetClickAction to set zoom in as the default action when object is clicked
    </description>
    </completion>
    <completion string="TOUCH_INVALID_FACE" value="-1">
      <description>
Value returned by llDetectedTouchFace when the touch position is not valid
    </description>
    </completion>
    <completion string="PRIM_MEDIA_ALT_IMAGE_ENABLE" value="0">
      <description>
Used with ll{Get,Set}PrimMediaParams to enable the default alt image for media
    </description>
    </completion>
    <completion string="PRIM_MEDIA_CONTROLS" value="1">
      <description>
Used with ll{Get,Set}PrimMediaParams to determine the controls shown for media
    </description>
    </completion>
    <completion string="PRIM_MEDIA_CURRENT_URL" value="2">
      <description>
Used with ll{Get,Set}PrimMediaParams to navigate/access the current URL
    </description>
    </completion>
    <completion string="PRIM_MEDIA_HOME_URL" value="3">
      <description>
Used with ll{Get,Set}PrimMediaParams to access the home URL
    </description>
    </completion>
    <completion string="PRIM_MEDIA_AUTO_LOOP" value="4">
      <description>
Used with ll{Get,Set}PrimMediaParams to determine if media should auto-loop (if applicable)
    </description>
    </completion>
    <completion string="PRIM_MEDIA_AUTO_PLAY" value="5">
      <description>
Used with ll{Get,Set}PrimMediaParams to determine if media should start playing as soon as it is created
    </description>
    </completion>
    <completion string="PRIM_MEDIA_AUTO_SCALE" value="6">
      <description>
Used with ll{Get,Set}PrimMediaParams to determine if media should scale to fit the face it is on
    </description>
    </completion>
    <completion string="PRIM_MEDIA_AUTO_ZOOM" value="7">
      <description>
Used with ll{Get,Set}PrimMediaParams to determine if the user would zoom in when viewing media
    </description>
    </completion>
    <completion string="PRIM_MEDIA_FIRST_CLICK_INTERACT" value="8">
      <description>
Used with ll{Get,Set}PrimMediaParams to determine whether the user interacts with media or not when she first clicks it (versus selection)
    </description>
    </completion>
    <completion string="PRIM_MEDIA_WIDTH_PIXELS" value="9">
      <description>
Used with ll{Get,Set}PrimMediaParams to access the media&apos;s width in pixels
    </description>
    </completion>
    <completion string="PRIM_MEDIA_HEIGHT_PIXELS" value="10">
      <description>
Used with ll{Get,Set}PrimMediaParams to access the media&apos;s height in pixels
    </description>
    </completion>
    <completion string="PRIM_MEDIA_WHITELIST_ENABLE" value="11">
      <description>
Used with ll{Get,Set}PrimMediaParams to determine if the domain whitelist is enabled
    </description>
    </completion>
    <completion string="PRIM_MEDIA_WHITELIST" value="12">
      <description>
Used with ll{Get,Set}PrimMediaParams to access the media&apos;s list of allowable URL prefixes to navigate to
    </description>
    </completion>
    <completion string="PRIM_MEDIA_PERMS_INTERACT" value="13">
      <description>
Used with ll{Get,Set}PrimMediaParams to determine the permissions for who can interact with the media
    </description>
    </completion>
    <completion string="PRIM_MEDIA_PERMS_CONTROL" value="14">
      <description>
Used with ll{Get,Set}PrimMediaParams to determine the permissions for who has controls
    </description>
    </completion>
    <completion string="PRIM_MEDIA_PARAM_MAX" value="14">
      <description>
The value of the largest media param
    </description>
    </completion>
    <completion string="PRIM_MEDIA_CONTROLS_STANDARD" value="0">
      <description>
Used with ll{Get,Set}PrimMediaParams, a PRIM_MEDIA_CONTROLS value meaning &quot;standard controls&quot;
    </description>
    </completion>
    <completion string="PRIM_MEDIA_CONTROLS_MINI" value="1">
      <description>
Used with ll{Get,Set}PrimMediaParams, a PRIM_MEDIA_CONTROLS value meaning &quot;mini controls&quot;
    </description>
    </completion>
    <completion string="PRIM_MEDIA_PERM_NONE" value="0x0">
      <description>
Used with ll{Get,Set}PrimMediaParams, a PRIM_MEDIA_PERMS_INTERACT or PRIM_MEDIA_PERMS_CONTROL bit, no permissions
    </description>
    </completion>
    <completion string="PRIM_MEDIA_PERM_OWNER" value="0x1">
      <description>
Used with ll{Get,Set}PrimMediaParams, a PRIM_MEDIA_PERMS_INTERACT or PRIM_MEDIA_PERMS_CONTROL bit, owner permissions
    </description>
    </completion>
    <completion string="PRIM_MEDIA_PERM_GROUP" value="0x2">
      <description>
Used with ll{Get,Set}PrimMediaParams, a PRIM_MEDIA_PERMS_INTERACT or PRIM_MEDIA_PERMS_CONTROL bit, group permissions
    </description>
    </completion>
    <completion string="PRIM_MEDIA_PERM_ANYONE" value="0x4">
      <description>
Used with ll{Get,Set}PrimMediaParams, a PRIM_MEDIA_PERMS_INTERACT or PRIM_MEDIA_PERMS_CONTROL bit, anyone has permissions
    </description>
    </completion>
    <completion string="PRIM_MEDIA_MAX_URL_LENGTH" value="1024">
      <description>
Used with ll{Get,Set}PrimMediaParams, the maximum length of PRIM_MEDIA_CURRENT_URL or PRIM_MEDIA_HOME_URL
    </description>
    </completion>
    <completion string="PRIM_MEDIA_MAX_WHITELIST_SIZE" value="1024">
      <description>
Used with ll{Get,Set}PrimMediaParams, the maximum length, in bytes, of PRIM_MEDIA_WHITELIST
    </description>
    </completion>
    <completion string="PRIM_MEDIA_MAX_WHITELIST_COUNT" value="64">
      <description>
Used with ll{Get,Set}PrimMediaParams, the maximum number of items allowed in PRIM_MEDIA_WHITELIST
    </description>
    </completion>
    <completion string="PRIM_MEDIA_MAX_WIDTH_PIXELS" value="2048">
      <description>
Used with ll{Get,Set}PrimMediaParams, the maximum width allowed in PRIM_MEDIA_WIDTH_PIXELS
    </description>
    </completion>
    <completion string="PRIM_MEDIA_MAX_HEIGHT_PIXELS" value="2048">
      <description>
Used with ll{Get,Set}PrimMediaParams, the maximum width allowed in PRIM_MEDIA_HEIGHT_PIXELS
    </description>
    </completion>
    <completion string="STATUS_OK" value="0">
      <description>
Result of llSetPrimMediaParams function call was success
    </description>
    </completion>
    <completion string="LSL_STATUS_OK" value="0">
      <description>
Result of llSetPrimMediaParams function call was success
    </description>
    </completion>
    <completion string="STATUS_MALFORMED_PARAMS" value="1000">
      <description>
llSetPrimMediaParams function was called with malformed params
    </description>
    </completion>
    <completion string="LSL_STATUS_MALFORMED_PARAMS" value="1000">
      <description>
llSetPrimMediaParams function was called with malformed params
    </description>
    </completion>
    <completion string="STATUS_TYPE_MISMATCH" value="1001">
      <description>
Argument(s) passed to llSetPrimMediaParams function had a type mismatch
    </description>
    </completion>
    <completion string="LSL_STATUS_TYPE_MISMATCH" value="1001">
      <description>
Argument(s) passed to llSetPrimMediaParams function had a type mismatch
    </description>
    </completion>
    <completion string="STATUS_BOUNDS_ERROR" value="1002">
      <description>
Argument(s) passed to llSetPrimMediaParams function had a bounds error
    </description>
    </completion>
    <completion string="LSL_STATUS_BOUNDS_ERROR" value="1002">
      <description>
Argument(s) passed to llSetPrimMediaParams function had a bounds error
    </description>
    </completion>
    <completion string="STATUS_NOT_FOUND" value="1003">
      <description>
llSetPrimMediaParams reported that the object or other item was not found
    </description>
    </completion>
    <completion string="LSL_STATUS_NOT_FOUND" value="1003">
      <description>
llSetPrimMediaParams reported that the object or other item was not found
    </description>
    </completion>
    <completion string="STATUS_NOT_SUPPORTED" value="1004">
      <description>
Feature not supported in llSetPrimMediaParams
    </description>
    </completion>
    <completion string="LSL_STATUS_NOT_SUPPORTED" value="1004">
      <description>
Feature not supported in llSetPrimMediaParams
    </description>
    </completion>
    <completion string="STATUS_INTERNAL_ERROR" value="1999">
      <description>
An internal error occurred in llSetPrimMediaParams
    </description>
    </completion>
    <completion string="LSL_STATUS_INTERNAL_ERROR" value="1999">
      <description>
An internal error occurred in llSetPrimMediaParams
    </description>
    </completion>
    <completion string="STATUS_WHITELIST_FAILED" value="2001">
      <description>
URL failed to pass whitelist in llSetPrimMediaParams
    </description>
    </completion>
    <completion string="LSL_STATUS_WHITELIST_FAILED" value="2001">
      <description>
URL failed to pass whitelist in llSetPrimMediaParams
    </description>
    </completion>
    <completion string="CONTENT_TYPE_TEXT" value="0">
      <description>
Used with llSetContentType to indicate text contents
    </description>
    </completion>
    <completion string="CONTENT_TYPE_HTML" value="1">
      <description>
Used with llSetContentType to indicate HTML contents
    </description>
    </completion>
    <completion string="CONTENT_TYPE_XML" value="2">
      <description>
Used with llSetContentType to indicate XML contents
    </description>
    </completion>
    <completion string="CONTENT_TYPE_XHTML" value="3">
      <description>
Used with llSetContentType to indicate XHTML contents
    </description>
    </completion>
    <completion string="CONTENT_TYPE_ATOM" value="4">
      <description>
Used with llSetContentType to indicate Atom Syndication Format contents
    </description>
    </completion>
    <completion string="CONTENT_TYPE_JSON" value="5">
      <description>
Used with llSetContentType to indicate JSON (JavaScript Object Notation) contents
    </description>
    </completion>
    <completion string="CONTENT_TYPE_LLSD" value="6">
      <description>
Used with llSetContentType to indicate LLSD (Linden Lab Serialized Data) contents
    </description>
    </completion>
    <completion string="CONTENT_TYPE_FORM" value="7">
      <description>
Used with llSetContentType to indicate form data contents
    </description>
    </completion>
    <completion string="CONTENT_TYPE_RSS" value="8">
      <description>
Used with llSetContentType to indicate RSS contents
    </description>
    </completion>
    <completion string="KFM_COMMAND" value="0">
      <description>
Option for llSetKeyframedMotion, followed by one of KFM_CMD_STOP, KFM_CMD_PLAY, KFM_CMD_PAUSE. Note that KFM_COMMAND must be the only option in the list, and cannot be specified in the same function call that sets the keyframes list.
    </description>
    </completion>
    <completion string="KFM_COMMAND" value="0x100">
      <description>
Option for llSetKeyframedMotion, followed by one of KFM_CMD_STOP, KFM_CMD_PLAY, KFM_CMD_PAUSE. Note that KFM_COMMAND must be the only option in the list, and cannot be specified in the same function call that sets the keyframes list.
    </description>
    </completion>
    <completion string="KFM_MODE" value="1">
      <description>
Option for llSetKeyframedMotion, used to specify the playback mode, followed by one of KFM_FORWARD, KFM_LOOP, KFM_PING_PONG or KFM_REVERSE
    </description>
    </completion>
    <completion string="KFM_MODE" value="0x2">
      <description>
Option for llSetKeyframedMotion, used to specify the playback mode, followed by one of KFM_FORWARD, KFM_LOOP, KFM_PING_PONG or KFM_REVERSE
    </description>
    </completion>
    <completion string="KFM_DATA" value="2">
      <description>
Option for llSetKeyframedMotion, followed by a bitwise combination of KFM_TRANSLATION and KFM_ROTATION. If you specify one or the other, you should only include translations or rotations in your keyframe list.
    </description>
    </completion>
    <completion string="KFM_DATA" value="0x1000">
      <description>
Option for llSetKeyframedMotion, followed by a bitwise combination of KFM_TRANSLATION and KFM_ROTATION. If you specify one or the other, you should only include translations or rotations in your keyframe list.
    </description>
    </completion>
    <completion string="KFM_FORWARD" value="0">
      <description>
Option for llSetKeyframedMotion, used after KFM_MODE to specify the forward playback mode
    </description>
    </completion>
    <completion string="KFM_FORWARD" value="0x10">
      <description>
Option for llSetKeyframedMotion, used after KFM_MODE to specify the forward playback mode
    </description>
    </completion>
    <completion string="KFM_LOOP" value="1">
      <description>
Option for llSetKeyframedMotion, used after KFM_MODE to specify the loop playback mode
    </description>
    </completion>
    <completion string="KFM_LOOP" value="0x4">
      <description>
Option for llSetKeyframedMotion, used after KFM_MODE to specify the loop playback mode
    </description>
    </completion>
    <completion string="KFM_PING_PONG" value="2">
      <description>
Option for llSetKeyframedMotion, used after KFM_MODE to specify the ping pong playback mode
    </description>
    </completion>
    <completion string="KFM_PING_PONG" value="0x20">
      <description>
Option for llSetKeyframedMotion, used after KFM_MODE to specify the ping pong playback mode
    </description>
    </completion>
    <completion string="KFM_REVERSE" value="3">
      <description>
Option for llSetKeyframedMotion, used after KFM_MODE to specify the reverse playback mode
    </description>
    </completion>
    <completion string="KFM_REVERSE" value="0x8">
      <description>
Option for llSetKeyframedMotion, used after KFM_MODE to specify the reverse playback mode
    </description>
    </completion>
    <completion string="KFM_ROTATION" value="1">
      <description>
Option for llSetKeyframedMotion, used after KFM_DATA, possibly as a bitwise combination with KFM_TRANSLATION
    </description>
    </completion>
    <completion string="KFM_ROTATION" value="0x80">
      <description>
Option for llSetKeyframedMotion, used after KFM_DATA, possibly as a bitwise combination with KFM_TRANSLATION
    </description>
    </completion>
    <completion string="KFM_TRANSLATION" value="2">
      <description>
Option for llSetKeyframedMotion, used after KFM_DATA, possibly as a bitwise combination with KFM_ROTATION
    </description>
    </completion>
    <completion string="KFM_TRANSLATION" value="0x40">
      <description>
Option for llSetKeyframedMotion, used after KFM_DATA, possibly as a bitwise combination with KFM_ROTATION
    </description>
    </completion>
    <completion string="KFM_CMD_PLAY" value="0">
      <description>
Option for llSetKeyframedMotion, used after KFM_COMMAND to play the motion
    </description>
    </completion>
    <completion string="KFM_CMD_PLAY" value="0x400">
      <description>
Option for llSetKeyframedMotion, used after KFM_COMMAND to play the motion
    </description>
    </completion>
    <completion string="KFM_CMD_STOP" value="1">
      <description>
Option for llSetKeyframedMotion, used after KFM_COMMAND to stop the motion
    </description>
    </completion>
    <completion string="KFM_CMD_STOP" value="0x200">
      <description>
Option for llSetKeyframedMotion, used after KFM_COMMAND to stop the motion
    </description>
    </completion>
    <completion string="KFM_CMD_PAUSE" value="2">
      <description>
Option for llSetKeyframedMotion, used after KFM_COMMAND to pause the motion
    </description>
    </completion>
    <completion string="KFM_CMD_PAUSE" value="0x800">
      <description>
Option for llSetKeyframedMotion, used after KFM_COMMAND to pause the motion
    </description>
    </completion>
    <completion string="ESTATE_ACCESS_ALLOWED_AGENT_ADD" value="0x4">
      <description>
Used with llManageEstateAccess to add an agent to this estate&apos;s allowed residents list
    </description>
    </completion>
    <completion string="ESTATE_ACCESS_ALLOWED_AGENT_ADD" value="0">
      <description>
Used with llManageEstateAccess to add an agent to this estate&apos;s allowed residents list
    </description>
    </completion>
    <completion string="ESTATE_ACCESS_ALLOWED_AGENT_REMOVE" value="0x8">
      <description>
Used with llManageEstateAccess to remove an agent from this estate&apos;s allowed residents list
    </description>
    </completion>
    <completion string="ESTATE_ACCESS_ALLOWED_AGENT_REMOVE" value="1">
      <description>
Used with llManageEstateAccess to remove an agent from this estate&apos;s allowed residents list
    </description>
    </completion>
    <completion string="ESTATE_ACCESS_ALLOWED_GROUP_ADD" value="0x10">
      <description>
Used with llManageEstateAccess to add a group to this estate&apos;s allowed groups list
    </description>
    </completion>
    <completion string="ESTATE_ACCESS_ALLOWED_GROUP_ADD" value="2">
      <description>
Used with llManageEstateAccess to add a group to this estate&apos;s allowed groups list
    </description>
    </completion>
    <completion string="ESTATE_ACCESS_ALLOWED_GROUP_REMOVE" value="0x20">
      <description>
Used with llManageEstateAccess to remove a group from this estate&apos;s allowed groups list
    </description>
    </completion>
    <completion string="ESTATE_ACCESS_ALLOWED_GROUP_REMOVE" value="3">
      <description>
Used with llManageEstateAccess to remove a group from this estate&apos;s allowed groups list
    </description>
    </completion>
    <completion string="ESTATE_ACCESS_BANNED_AGENT_ADD" value="0x40">
      <description>
Used with llManageEstateAccess to add an agent to this estate&apos;s banned residents list
    </description>
    </completion>
    <completion string="ESTATE_ACCESS_BANNED_AGENT_ADD" value="4">
      <description>
Used with llManageEstateAccess to add an agent to this estate&apos;s banned residents list
    </description>
    </completion>
    <completion string="ESTATE_ACCESS_BANNED_AGENT_REMOVE" value="0x80">
      <description>
Used with llManageEstateAccess to remove an agent from this estate&apos;s banned residents list
    </description>
    </completion>
    <completion string="ESTATE_ACCESS_BANNED_AGENT_REMOVE" value="5">
      <description>
Used with llManageEstateAccess to remove an agent from this estate&apos;s banned residents list
    </description>
    </completion>
    <completion string="PROFILE_NONE" value="0">
      <description>
Disables memory profiling when passed to llScriptProfiler
    </description>
    </completion>
    <completion string="PROFILE_SCRIPT_MEMORY" value="1">
      <description>
Enables memory profiling when passed to llScriptProfiler
    </description>
    </completion>
    <completion string="RCERR_UNKNOWN" value="-1">
      <description>
Returned by llCastRay when the raycast failed for an unspecified reason
    </description>
    </completion>
    <completion string="RCERR_SIM_PERF_LOW" value="-2">
      <description>
Returned by llCastRay when the raycast failed because simulator performance is low
    </description>
    </completion>
    <completion string="RCERR_CAST_TIME_EXCEEDED" value="-3">
      <description>
Returned by llCastRay when the raycast failed because the parcel or agent has exceeded the maximum time allowed for raycasting
    </description>
    </completion>
    <completion string="RCERR_CAST_TIME_EXCEEDED" value="1">
      <description>
Returned by llCastRay when the raycast failed because the parcel or agent has exceeded the maximum time allowed for raycasting
    </description>
    </completion>
    <completion string="RC_REJECT_TYPES" value="0">
      <description>
Option for llCastRay used to ignore specific types of objects, followed with a bitwise combination of RC_REJECT_AGENTS, RC_REJECT_PHYSICAL, RC_REJECT_NONPHYSICAL and RC_REJECT_LAND
    </description>
    </completion>
    <completion string="RC_REJECT_TYPES" value="2">
      <description>
Option for llCastRay used to ignore specific types of objects, followed with a bitwise combination of RC_REJECT_AGENTS, RC_REJECT_PHYSICAL, RC_REJECT_NONPHYSICAL and RC_REJECT_LAND
    </description>
    </completion>
    <completion string="RC_DETECT_PHANTOM" value="1">
      <description>
Option for llCastRay followed with TRUE to detect phantom AND volume detect objects, FASLE otherwise
    </description>
    </completion>
    <completion string="RC_DETECT_PHANTOM" value="16">
      <description>
Option for llCastRay followed with TRUE to detect phantom AND volume detect objects, FASLE otherwise
    </description>
    </completion>
    <completion string="RC_DATA_FLAGS" value="2">
      <description>
Option for llCastRay followed with a bitwise combination of RC_GET_NORMAL, RC_GET_ROOT_KEY and RC_GET_LINK_NUM
    </description>
    </completion>
    <completion string="RC_DATA_FLAGS" value="4">
      <description>
Option for llCastRay followed with a bitwise combination of RC_GET_NORMAL, RC_GET_ROOT_KEY and RC_GET_LINK_NUM
    </description>
    </completion>
    <completion string="RC_MAX_HITS" value="3">
      <description>
Option for llCastRay followed with an integer specifying the maximum number of hits to return (must be &lt;= 256)
    </description>
    </completion>
    <completion string="RC_MAX_HITS" value="8">
      <description>
Option for llCastRay followed with an integer specifying the maximum number of hits to return (must be &lt;= 256)
    </description>
    </completion>
    <completion string="RC_REJECT_AGENTS" value="0x1">
      <description>
Flag used in the RC_REJECT_TYPES mask to reject agents in llCastRay
    </description>
    </completion>
    <completion string="RC_REJECT_AGENTS" value="0x2">
      <description>
Flag used in the RC_REJECT_TYPES mask to reject agents in llCastRay
    </description>
    </completion>
    <completion string="RC_REJECT_PHYSICAL" value="0x2">
      <description>
Flag used in the RC_REJECT_TYPES mask to reject physical objects in llCastRay
    </description>
    </completion>
    <completion string="RC_REJECT_PHYSICAL" value="0x4">
      <description>
Flag used in the RC_REJECT_TYPES mask to reject physical objects in llCastRay
    </description>
    </completion>
    <completion string="RC_REJECT_NONPHYSICAL" value="0x4">
      <description>
Flag used in the RC_REJECT_TYPES mask to reject non-physical objects in llCastRay
    </description>
    </completion>
    <completion string="RC_REJECT_NONPHYSICAL" value="0x8">
      <description>
Flag used in the RC_REJECT_TYPES mask to reject non-physical objects in llCastRay
    </description>
    </completion>
    <completion string="RC_REJECT_LAND" value="0x8">
      <description>
Flag used in the RC_REJECT_TYPES mask to reject land in llCastRay
    </description>
    </completion>
    <completion string="RC_REJECT_LAND" value="0x10">
      <description>
Flag used in the RC_REJECT_TYPES mask to reject land in llCastRay
    </description>
    </completion>
    <completion string="RC_GET_NORMAL" value="0x1">
      <description>
Flag used in the RC_DATA_FLAGS mask to get hit normals in llCastRay results
    </description>
    </completion>
    <completion string="RC_GET_NORMAL" value="0x2">
      <description>
Flag used in the RC_DATA_FLAGS mask to get hit normals in llCastRay results
    </description>
    </completion>
    <completion string="RC_GET_ROOT_KEY" value="0x2">
      <description>
Flag used in the RC_DATA_FLAGS mask to get root keys in llCastRay results
    </description>
    </completion>
    <completion string="RC_GET_ROOT_KEY" value="0x4">
      <description>
Flag used in the RC_DATA_FLAGS mask to get root keys in llCastRay results
    </description>
    </completion>
    <completion string="RC_GET_LINK_NUM" value="0x4">
      <description>
Flag used in the RC_DATA_FLAGS mask to get link numbers in llCastRay results
    </description>
    </completion>
    <completion string="RC_GET_LINK_NUM" value="0x8">
      <description>
Flag used in the RC_DATA_FLAGS mask to get link numbers in llCastRay results
    </description>
    </completion>
    <completion string="REQUIRE_LINE_OF_SIGHT" value="2">
      <description>
</description>
    </completion>
    <completion string="PURSUIT_FUZZ_FACTOR" value="3">
      <description>
</description>
    </completion>
    <completion string="PURSUIT_FUZZ_FACTOR" value="8">
      <description>
</description>
    </completion>
    <completion string="PURSUIT_INTERCEPT" value="4">
      <description>
</description>
    </completion>
    <completion string="PURSUIT_GOAL_TOLERANCE" value="5">
      <description>
</description>
    </completion>
    <completion string="PURSUIT_OFFSET" value="1">
      <description>
</description>
    </completion>
    <completion string="FORCE_DIRECT_PATH" value="1">
      <description>
</description>
    </completion>
    <completion string="AVOID_CHARACTERS" value="1">
      <description>
</description>
    </completion>
    <completion string="AVOID_DYNAMIC_OBSTACLES" value="2">
      <description>
</description>
    </completion>
    <completion string="AVOID_NONE" value="0">
      <description>
</description>
    </completion>
    <completion string="PU_EVADE_HIDDEN" value="7">
      <description>
Triggered when an llEvade character thinks it has hidden from its pursuer
    </description>
    </completion>
    <completion string="PU_EVADE_SPOTTED" value="8">
      <description>
Triggered when an llEvade character switches from hiding to running
    </description>
    </completion>
    <completion string="PU_FAILURE_INVALID_GOAL" value="3">
      <description>
Goal is not on the navigation-mesh and cannot be reached
    </description>
    </completion>
    <completion string="PU_FAILURE_INVALID_START" value="2">
      <description>
Character cannot navigate from the current location - e.g., the character is off the navmesh or too high above it
    </description>
    </completion>
    <completion string="PU_FAILURE_NO_VALID_DESTINATION" value="6">
      <description>
There&apos;s no good place for the character to go - e.g., it is patrolling and all the patrol points are now unreachable
    </description>
    </completion>
    <completion string="PU_FAILURE_OTHER" value="1000000">
      <description>
Unknown failure
    </description>
    </completion>
    <completion string="PU_FAILURE_TARGET_GONE" value="5">
      <description>
Target (for llPursue or llEvade) can no longer be tracked - e.g., it left the region or is an avatar that is now more than about 30m outside the region
    </description>
    </completion>
    <completion string="PU_FAILURE_UNREACHABLE" value="4">
      <description>
Goal is no longer reachable for some reason - e.g., an obstacle blocks the path
    </description>
    </completion>
    <completion string="PU_GOAL_REACHED" value="1">
      <description>
Character has reached the goal and will stop or choose a new goal (if wandering)
    </description>
    </completion>
    <completion string="PU_SLOWDOWN_DISTANCE_REACHED" value="0">
      <description>
Character is near current goal
    </description>
    </completion>
    <completion string="PU_FAILURE_NO_NAVMESH" value="9">
      <description>
Triggered if no navmesh is available for the region
    </description>
    </completion>
    <completion string="PU_FAILURE_DYNAMIC_PATHFINDING_DISABLED" value="10">
      <description>
Triggered when a character enters a region with dynamic pathfinding disabled
    </description>
    </completion>
    <completion string="PU_FAILURE_PARCEL_UNREACHABLE" value="11">
      <description>
Triggered when a character failed to enter a parcel because it is not allowed to enter, e.g. because the parcel is already full or because object entry was disabled after the navmesh was baked
    </description>
    </completion>
    <completion string="TRAVERSAL_TYPE" value="7">
      <description>
</description>
    </completion>
    <completion string="TRAVERSAL_TYPE_SLOW" value="0">
      <description>
</description>
    </completion>
    <completion string="TRAVERSAL_TYPE_SLOW" value="4">
      <description>
</description>
    </completion>
    <completion string="TRAVERSAL_TYPE_FAST" value="1">
      <description>
</description>
    </completion>
    <completion string="TRAVERSAL_TYPE_FAST" value="2">
      <description>
</description>
    </completion>
    <completion string="TRAVERSAL_TYPE_NONE" value="2">
      <description>
</description>
    </completion>
    <completion string="TRAVERSAL_TYPE_NONE" value="1">
      <description>
</description>
    </completion>
    <completion string="CHARACTER_AVOIDANCE_MODE" value="5">
      <description>
</description>
    </completion>
    <completion string="CHARACTER_AVOIDANCE_MODE" value="9">
      <description>
</description>
    </completion>
    <completion string="CHARACTER_CMD_JUMP" value="1">
      <description>
</description>
    </completion>
    <completion string="CHARACTER_CMD_SMOOTH_STOP" value="2">
      <description>
</description>
    </completion>
    <completion string="CHARACTER_CMD_STOP" value="0">
      <description>
</description>
    </completion>
    <completion string="CHARACTER_DESIRED_SPEED" value="1">
      <description>
</description>
    </completion>
    <completion string="CHARACTER_DESIRED_TURN_SPEED" value="12">
      <description>
</description>
    </completion>
    <completion string="CHARACTER_LENGTH" value="3">
      <description>
</description>
    </completion>
    <completion string="CHARACTER_MAX_ACCEL" value="8">
      <description>
</description>
    </completion>
    <completion string="CHARACTER_MAX_ACCEL" value="10">
      <description>
</description>
    </completion>
    <completion string="CHARACTER_MAX_ANGULAR_ACCEL" value="13">
      <description>
</description>
    </completion>
    <completion string="CHARACTER_MAX_DECEL" value="9">
      <description>
</description>
    </completion>
    <completion string="CHARACTER_MAX_DECEL" value="11">
      <description>
</description>
    </completion>
    <completion string="CHARACTER_MAX_SPEED" value="13">
      <description>
</description>
    </completion>
    <completion string="CHARACTER_MAX_ANGULAR_SPEED" value="13">
      <description>
</description>
    </completion>
    <completion string="CHARACTER_MAX_TURN_RADIUS" value="10">
      <description>
</description>
    </completion>
    <completion string="CHARACTER_TURN_SPEED_MULTIPLIER" value="14">
      <description>
</description>
    </completion>
    <completion string="CHARACTER_ORIENTATION" value="4">
      <description>
</description>
    </completion>
    <completion string="CHARACTER_RADIUS" value="2">
      <description>
</description>
    </completion>
    <completion string="CHARACTER_TYPE" value="6">
      <description>
</description>
    </completion>
    <completion string="CHARACTER_TYPE" value="8">
      <description>
</description>
    </completion>
    <completion string="CHARACTER_TYPE_A" value="0">
      <description>
</description>
    </completion>
    <completion string="CHARACTER_TYPE_A" value="1">
      <description>
</description>
    </completion>
    <completion string="CHARACTER_TYPE_B" value="1">
      <description>
</description>
    </completion>
    <completion string="CHARACTER_TYPE_B" value="2">
      <description>
</description>
    </completion>
    <completion string="CHARACTER_TYPE_C" value="2">
      <description>
</description>
    </completion>
    <completion string="CHARACTER_TYPE_C" value="3">
      <description>
</description>
    </completion>
    <completion string="CHARACTER_TYPE_D" value="3">
      <description>
</description>
    </completion>
    <completion string="CHARACTER_TYPE_D" value="4">
      <description>
</description>
    </completion>
    <completion string="CHARACTER_TYPE_NONE" value="4">
      <description>
</description>
    </completion>
    <completion string="CHARACTER_TYPE_NONE" value="0">
      <description>
</description>
    </completion>
    <completion string="GCNP_RADIUS" value="0">
      <description>
</description>
    </completion>
    <completion string="GCNP_STATIC" value="1">
      <description>
</description>
    </completion>
    <completion string="NPC" value="0x20">
      <description>
</description>
    </completion>
    <completion string="HORIZONTAL" value="1">
      <description>
</description>
    </completion>
    <completion string="HORIZONTAL" value="0">
      <description>
</description>
    </completion>
    <completion string="VERTICAL" value="0">
      <description>
</description>
    </completion>
    <completion string="VERTICAL" value="1">
      <description>
</description>
    </completion>
    <completion string="PATROL_PAUSE_AT_WAYPOINTS" value="0">
      <description>
</description>
    </completion>
    <completion string="WANDER_PAUSE_AT_WAYPOINTS" value="0">
      <description>
</description>
    </completion>
    <completion string="CHARACTER_ACCOUNT_FOR_SKIPPED_FRAMES" value="14">
      <description>
</description>
    </completion>
    <completion string="CHARACTER_STAY_WITHIN_PARCEL" value="15">
      <description>
</description>
    </completion>
    <completion string="SIM_STAT_PCT_CHARS_STEPPED" value="0">
      <description>
</description>
    </completion>
    <completion string="HTTP_PRAGMA_NO_CACHE" value="6">
      <description>
</description>
    </completion>
    <completion string="OBJECT_PHYSICS" value="21">
      <description>
</description>
    </completion>
    <completion string="OBJECT_PHANTOM" value="22">
      <description>
</description>
    </completion>
    <completion string="OBJECT_TEMP_ON_REZ" value="23">
      <description>
</description>
    </completion>
    <completion string="JSON_APPEND" value="-1">
      <description>
</description>
    </completion>
    <completion string="OBJECT_RETURN_PARCEL" value="0x1">
      <description>
</description>
    </completion>
    <completion string="OBJECT_RETURN_PARCEL_OWNER" value="0x2">
      <description>
</description>
    </completion>
    <completion string="OBJECT_RETURN_REGION" value="0x4">
      <description>
</description>
    </completion>
    <completion string="ERR_GENERIC" value="-1">
      <description>
</description>
    </completion>
    <completion string="ERR_PARCEL_PERMISSIONS" value="-2">
      <description>
</description>
    </completion>
    <completion string="ERR_MALFORMED_PARAMS" value="-3">
      <description>
</description>
    </completion>
    <completion string="ERR_RUNTIME_PERMISSIONS" value="-4">
      <description>
</description>
    </completion>
    <completion string="ERR_THROTTLED" value="-5">
      <description>
</description>
    </completion>
    <completion string="PRIM_NORMAL" value="37">
      <description>
</description>
    </completion>
    <completion string="PRIM_SPECULAR" value="36">
      <description>
</description>
    </completion>
    <completion string="PRIM_ALPHA_MODE" value="38">
      <description>
</description>
    </completion>
    <completion string="PRIM_ALPHA_MODE_NONE" value="0">
      <description>
</description>
    </completion>
    <completion string="PRIM_ALPHA_MODE_BLEND" value="1">
      <description>
</description>
    </completion>
    <completion string="PRIM_ALPHA_MODE_MASK" value="2">
      <description>
</description>
    </completion>
    <completion string="PRIM_ALPHA_MODE_EMISSIVE" value="3">
      <description>
</description>
    </completion>
    <completion string="XP_ERROR_NONE" value="0">
      <description>
</description>
    </completion>
    <completion string="XP_ERROR_THROTTLED" value="1">
      <description>
</description>
    </completion>
    <completion string="XP_ERROR_EXPERIENCES_DISABLED" value="2">
      <description>
</description>
    </completion>
    <completion string="XP_ERROR_INVALID_PARAMETERS" value="3">
      <description>
</description>
    </completion>
    <completion string="XP_ERROR_NOT_PERMITTED" value="4">
      <description>
</description>
    </completion>
    <completion string="XP_ERROR_NO_EXPERIENCE" value="5">
      <description>
</description>
    </completion>
    <completion string="XP_ERROR_NOT_FOUND" value="6">
      <description>
</description>
    </completion>
    <completion string="XP_ERROR_INVALID_EXPERIENCE" value="7">
      <description>
</description>
    </completion>
    <completion string="XP_ERROR_EXPERIENCE_DISABLED" value="8">
      <description>
</description>
    </completion>
    <completion string="XP_ERROR_EXPERIENCE_SUSPENDED" value="9">
      <description>
</description>
    </completion>
    <completion string="XP_ERROR_UNKNOWN_ERROR" value="10">
      <description>
</description>
    </completion>
    <completion string="XP_ERROR_QUOTA_EXCEEDED" value="11">
      <description>
</description>
    </completion>
    <completion string="XP_ERROR_STORE_DISABLED" value="12">
      <description>
</description>
    </completion>
    <completion string="XP_ERROR_STORAGE_EXCEPTION" value="13">
      <description>
</description>
    </completion>
    <completion string="XP_ERROR_KEY_NOT_FOUND" value="14">
      <description>
</description>
    </completion>
    <completion string="XP_ERROR_RETRY_UPDATE" value="15">
      <description>
</description>
    </completion>
    <completion string="XP_ERROR_MATURITY_EXCEEDED" value="16">
      <description>
</description>
    </completion>
    <completion string="XP_ERROR_NOT_PERMITTED_LAND" value="17">
      <description>
</description>
    </completion>
    <completion string="XP_ERROR_REQUEST_PERM_TIMEOUT" value="18">
      <description>
</description>
    </completion>
    <completion string="PASS_IF_NOT_HANDLED" value="0">
      <description>
Used with llPassTouches to only pass touches to the root if the touch event was not handled.
    </description>
    </completion>
    <completion string="PASS_ALWAYS" value="1">
      <description>
Used with llPassTouches to always pass touches to the root regardless of whether the touch event was handled or not.
    </description>
    </completion>
    <completion string="PASS_NEVER" value="2">
      <description>
Used with llPassTouches to never pass touches to the root.
    </description>
    </completion>
    <completion string="OBJECT_PRIM_COUNT" value="30">
      <description>
</description>
    </completion>
    <completion string="OBJECT_TOTAL_INVENTORY_COUNT" value="31">
      <description>
</description>
    </completion>
    <completion string="OBJECT_REZZER_KEY" value="32">
      <description>
</description>
    </completion>
    <completion string="PRIM_ALLOW_UNSIT" value="39">
      <description>
</description>
    </completion>
    <completion string="PRIM_SCRIPTED_SIT_ONLY" value="40">
      <description>
</description>
    </completion>
    <completion string="PRIM_SIT_TARGET" value="41">
      <description>
</description>
    </completion>
    <completion string="OBJECT_GROUP_TAG" value="33">
      <description>
</description>
    </completion>
    <completion string="OBJECT_TEMP_ATTACHED" value="34">
      <description>
</description>
    </completion>
    <completion string="OBJECT_ATTACHED_SLOTS_AVAILABLE" value="35">
      <description>
</description>
    </completion>
    <completion string="SIT_NOT_EXPERIENCE" value="-1">
      <description>
</description>
    </completion>
    <completion string="SIT_NO_EXPERIENCE_PERMISSION" value="-2">
      <description>
</description>
    </completion>
    <completion string="SIT_NO_SIT_TARGET" value="-3">
      <description>
</description>
    </completion>
    <completion string="SIT_INVALID_AGENT" value="-4">
      <description>
</description>
    </completion>
    <completion string="SIT_INVALID_LINK" value="-5">
      <description>
</description>
    </completion>
    <completion string="SIT_NO_ACCESS" value="-6">
      <description>
</description>
    </completion>
    <completion string="SIT_INVALID_OBJECT" value="-7">
      <description>
</description>
    </completion>
    <completion string="HTTP_USER_AGENT" value="7">
      <description>
</description>
    </completion>
    <completion string="HTTP_ACCEPT" value="8">
      <description>
</description>
    </completion>
    <completion string="OBJECT_CREATION_TIME" value="36">
      <description>
</description>
    </completion>
    <completion string="OBJECT_SELECT_COUNT" value="37">
      <description>
</description>
    </completion>
    <completion string="OBJECT_SIT_COUNT" value="38">
      <description>
</description>
    </completion>
    <completion string="SKY_AMBIENT" value="0">
      <description>
</description>
    </completion>
    <completion string="SKY_TEXTURE_DEFAULTS" value="1">
      <description>
</description>
    </completion>
    <completion string="SKY_CLOUDS" value="2">
      <description>
</description>
    </completion>
    <completion string="SKY_DENSITY_PROFILE_COUNTS" value="3">
      <description>
</description>
    </completion>
    <completion string="SKY_DOME" value="4">
      <description>
</description>
    </completion>
    <completion string="SKY_GAMMA" value="5">
      <description>
</description>
    </completion>
    <completion string="SKY_GLOW" value="6">
      <description>
</description>
    </completion>
    <completion string="SKY_LIGHT" value="8">
      <description>
</description>
    </completion>
    <completion string="SKY_MOON" value="9">
      <description>
</description>
    </completion>
    <completion string="SKY_PLANET" value="10">
      <description>
</description>
    </completion>
    <completion string="SKY_REFRACTION" value="11">
      <description>
</description>
    </completion>
    <completion string="SKY_STAR_BRIGHTNESS" value="13">
      <description>
</description>
    </completion>
    <completion string="SKY_SUN" value="14">
      <description>
</description>
    </completion>
    <completion string="SKY_TRACKS" value="15" deprecated="true">
      <description>
</description>
    </completion>
    <completion string="SKY_ABSORPTION_CONFIG" value="16">
      <description>
</description>
    </completion>
    <completion string="SKY_MIE_CONFIG" value="17">
      <description>
</description>
    </completion>
    <completion string="SKY_RAYLEIGH_CONFIG" value="18">
      <description>
</description>
    </completion>
    <completion string="SKY_CLOUD_TEXTURE" value="19">
      <description>
</description>
    </completion>
    <completion string="SKY_MOON_TEXTURE" value="20">
      <description>
</description>
    </completion>
    <completion string="SKY_SUN_TEXTURE" value="21">
      <description>
</description>
    </completion>
    <completion string="WATER_BLUR_MULTIPLIER" value="100">
      <description>
</description>
    </completion>
    <completion string="WATER_NORMAL_TEXTURE" value="107">
      <description>
</description>
    </completion>
    <completion string="WATER_FOG" value="101">
      <description>
</description>
    </completion>
    <completion string="WATER_FRESNEL" value="102">
      <description>
</description>
    </completion>
    <completion string="WATER_TEXTURE_DEFAULTS" value="103">
      <description>
</description>
    </completion>
    <completion string="WATER_NORMAL_SCALE" value="104">
      <description>
</description>
    </completion>
    <completion string="WATER_REFRACTION" value="105">
      <description>
</description>
    </completion>
    <completion string="WATER_WAVE_DIRECTION" value="106">
      <description>
</description>
    </completion>
    <completion string="INVENTORY_SETTING" value="56">
      <description>
</description>
    </completion>
    <completion string="ENVIRONMENT_DAYINFO" value="200">
      <description>
</description>
    </completion>
    <completion string="ENV_INVALID_AGENT" value="-4">
      <description>
</description>
    </completion>
    <completion string="ENV_INVALID_RULE" value="-5">
      <description>
</description>
    </completion>
    <completion string="ENV_NOT_EXPERIENCE" value="-1">
      <description>
</description>
    </completion>
    <completion string="ENV_NO_ENVIRONMENT" value="-3">
      <description>
</description>
    </completion>
    <completion string="ENV_NO_EXPERIENCE_PERMISSION" value="-2">
      <description>
</description>
    </completion>
    <completion string="ENV_VALIDATION_FAIL" value="-6">
      <description>
</description>
    </completion>
    <completion string="ENV_NO_EXPERIENCE_LAND" value="-7">
      <description>
</description>
    </completion>
    <completion string="ENV_THROTTLE" value="-8">
      <description>
</description>
    </completion>
    <completion string="OBJECT_ANIMATED_COUNT" value="39">
      <description>
</description>
    </completion>
    <completion string="OBJECT_ANIMATED_SLOTS_AVAILABLE" value="40">
      <description>
</description>
    </completion>
    <completion string="TARGETED_EMAIL_ROOT_CREATOR" value="1">
      <description>
</description>
    </completion>
    <completion string="TARGETED_EMAIL_OBJECT_OWNER" value="2">
      <description>
</description>
    </completion>
    <completion string="CLICK_ACTION_DISABLED" value="8">
      <description>
</description>
    </completion>
    <completion string="SKY_BLUE" value="22">
      <description>
</description>
    </completion>
    <completion string="SKY_HAZE" value="23">
      <description>
</description>
    </completion>
    <completion string="HTTP_EXTENDED_ERROR" value="9">
      <description>
</description>
    </completion>
    <completion string="NULL_KEY" value="00000000-0000-0000-0000-000000000000">
      <description>
Indicates an empty key
    </description>
    </completion>
    <completion string="EOF" value="


">
      <description>
Indicates the last line of a notecard was read
    </description>
    </completion>
    <completion string="TEXTURE_BLANK" value="5748decc-f629-461c-9a36-a35a221fe21f">
      <description>
UUID for the &quot;Blank&quot; texture
    </description>
    </completion>
    <completion string="TEXTURE_DEFAULT" value="89556747-24cb-43ed-920b-47caed15465f">
      <description>
Alias for TEXTURE_PLYWOOD
    </description>
    </completion>
    <completion string="TEXTURE_MEDIA" value="8b5fec65-8d8d-9dc5-cda8-8fdf2716e361">
      <description>
UUID for the &quot;Default Media&quot; texture
    </description>
    </completion>
    <completion string="TEXTURE_PLYWOOD" value="89556747-24cb-43ed-920b-47caed15465f">
      <description>
UUID for the default &quot;Plywood&quot; texture
    </description>
    </completion>
    <completion string="TEXTURE_TRANSPARENT" value="8dcd4a48-2d37-4909-9f78-f7a9eb4ef903">
      <description>
UUID for the &quot;Default Transparent&quot; texture
    </description>
    </completion>
    <completion string="IMG_USE_BAKED_AUX1" value="9742065b-19b5-297c-858a-29711d539043">
      <description>
</description>
    </completion>
    <completion string="IMG_USE_BAKED_AUX2" value="03642e83-2bd1-4eb9-34b4-4c47ed586d2d">
      <description>
</description>
    </completion>
    <completion string="IMG_USE_BAKED_AUX3" value="edd51b77-fc10-ce7a-4b3d-011dfc349e4f">
      <description>
</description>
    </completion>
    <completion string="IMG_USE_BAKED_EYES" value="52cc6bb6-2ee5-e632-d3ad-50197b1dcb8a">
      <description>
</description>
    </completion>
    <completion string="IMG_USE_BAKED_HAIR" value="09aac1fb-6bce-0bee-7d44-caac6dbb6c63">
      <description>
</description>
    </completion>
    <completion string="IMG_USE_BAKED_HEAD" value="5a9f4a74-30f2-821c-b88d-70499d3e7183">
      <description>
</description>
    </completion>
    <completion string="IMG_USE_BAKED_LEFTARM" value="ff62763f-d60a-9855-890b-0c96f8f8cd98">
      <description>
</description>
    </completion>
    <completion string="IMG_USE_BAKED_LEFTLEG" value="8e915e25-31d1-cc95-ae08-d58a47488251">
      <description>
</description>
    </completion>
    <completion string="IMG_USE_BAKED_LOWER" value="24daea5f-0539-cfcf-047f-fbc40b2786ba">
      <description>
</description>
    </completion>
    <completion string="IMG_USE_BAKED_SKIRT" value="43529ce8-7faa-ad92-165a-bc4078371687">
      <description>
</description>
    </completion>
    <completion string="IMG_USE_BAKED_UPPER" value="ae2de45c-d252-50b8-5c6e-19f39ce79317">
      <description>
</description>
    </completion>
    <completion string="URL_REQUEST_GRANTED" value="URL_REQUEST_GRANTED">
      <description>
Used with http_request when a public URL is successfully granted
    </description>
    </completion>
    <completion string="URL_REQUEST_DENIED" value="URL_REQUEST_DENIED">
      <description>
Used with http_request when a public URL is not available
    </description>
    </completion>
    <completion string="JSON_INVALID" value="﷐">
      <description>
</description>
    </completion>
    <completion string="JSON_OBJECT" value="﷑">
      <description>
</description>
    </completion>
    <completion string="JSON_ARRAY" value="﷒">
      <description>
</description>
    </completion>
    <completion string="JSON_NUMBER" value="﷓">
      <description>
</description>
    </completion>
    <completion string="JSON_STRING" value="﷔">
      <description>
</description>
    </completion>
    <completion string="JSON_NULL" value="﷕">
      <description>
</description>
    </completion>
    <completion string="JSON_TRUE" value="﷖">
      <description>
</description>
    </completion>
    <completion string="JSON_FALSE" value="﷗">
      <description>
</description>
    </completion>
    <completion string="JSON_DELETE" value="﷘">
      <description>
</description>
    </completion>
    <completion string="JSON_ARRAY" value="JSON_ARRAY">
      <description>
</description>
    </completion>
    <completion string="JSON_OBJECT" value="JSON_OBJECT">
      <description>
</description>
    </completion>
    <completion string="JSON_INVALID" value="JSON_INVALID">
      <description>
</description>
    </completion>
    <completion string="JSON_NUMBER" value="JSON_NUMBER">
      <description>
</description>
    </completion>
    <completion string="JSON_STRING" value="JSON_STRING">
      <description>
</description>
    </completion>
    <completion string="JSON_TRUE" value="JSON_TRUE">
      <description>
</description>
    </completion>
    <completion string="JSON_FALSE" value="JSON_FALSE">
      <description>
</description>
    </completion>
    <completion string="JSON_NULL" value="JSON_NULL">
      <description>
</description>
    </completion>
    <completion string="JSON_APPEND" value="JSON_APPEND">
      <description>
</description>
    </completion>
    <completion string="PI" value="3.14159265">
      <description>
3.1415926535897932384626433832795
    </description>
    </completion>
    <completion string="PI" value="3.14159274f"/>
    <completion string="TWO_PI" value="6.2831853">
      <description>
6.283185307179586476925286766559
    </description>
    </completion>
    <completion string="TWO_PI" value="6.28318548f"/>
    <completion string="PI_BY_TWO" value="1.57079633">
      <description>
1.5707963267948966192313216916398
    </description>
    </completion>
    <completion string="PI_BY_TWO" value="1.57079637f"/>
    <completion string="DEG_TO_RAD" value="0.017453293">
      <description>
To convert from degrees to radians
    </description>
    </completion>
    <completion string="DEG_TO_RAD" value="0.01745329238f"/>
    <completion string="RAD_TO_DEG" value="57.2957795">
      <description>
To convert from radians to degrees
    </description>
    </completion>
    <completion string="RAD_TO_DEG" value="57.29578f"/>
    <completion string="SQRT2" value="1.41421356">
      <description>
1.4142135623730950488016887242097
    </description>
    </completion>
    <completion string="SQRT2" value="1.414213538f"/>
    <completion string="ZERO_VECTOR" value="&lt;0.0, 0.0, 0.0&gt;">
      <description>
&lt;0.0, 0.0, 0.0&gt;
    </description>
    </completion>
    <completion string="TOUCH_INVALID_TEXCOORD" value="&lt;-1.0, -1.0, 0.0&gt;">
      <description>
Value returned by llDetectedTouchUV and llDetectedTouchST when the touch position is not valid
    </description>
    </completion>
    <completion string="TOUCH_INVALID_VECTOR" value="&lt;0.0, 0.0, 0.0&gt;">
      <description>
Value returned by llDetectedTouchPos, llDetectedTouchNormal, and llDetectedTouchBinormal when the touch position is not valid
    </description>
    </completion>
    <completion string="ZERO_ROTATION" value="&lt;0.0, 0.0, 0.0, 1.0&gt;">
      <description>
&lt;0.0, 0.0, 0.0, 1.0&gt;
    </description>
    </completion>
    <completion string="STATS_ACTIVE_PRIMS" value="7">
      <description>
</description>
    </completion>
    <completion string="STATS_ACTIVE_PRIMS" value="12">
      <description>
</description>
    </completion>
    <completion string="STATS_ACTIVE_SCRIPTS" value="19">
      <description>
</description>
    </completion>
    <completion string="STATS_ACTIVE_SCRIPTS" value="15">
      <description>
</description>
    </completion>
    <completion string="STATS_AGENT_MS" value="16">
      <description>
</description>
    </completion>
    <completion string="STATS_AGENT_MS" value="8">
      <description>
</description>
    </completion>
    <completion string="STATS_AGENT_UPDATES" value="3">
      <description>
</description>
    </completion>
    <completion string="STATS_CHILD_AGENTS" value="5">
      <description>
</description>
    </completion>
    <completion string="STATS_CHILD_AGENTS" value="14">
      <description>
</description>
    </completion>
    <completion string="STATS_FRAME_MS" value="8">
      <description>
</description>
    </completion>
    <completion string="STATS_FRAME_MS" value="4">
      <description>
</description>
    </completion>
    <completion string="STATS_IMAGE_MS" value="11">
      <description>
</description>
    </completion>
    <completion string="STATS_IMAGE_MS" value="9">
      <description>
</description>
    </completion>
    <completion string="STATS_IN_PACKETS_PER_SECOND" value="13">
      <description>
</description>
    </completion>
    <completion string="STATS_IN_PACKETS_PER_SECOND" value="17">
      <description>
</description>
    </completion>
    <completion string="STATS_NET_MS" value="9">
      <description>
</description>
    </completion>
    <completion string="STATS_NET_MS" value="5">
      <description>
</description>
    </completion>
    <completion string="STATS_OTHER_MS" value="12">
      <description>
</description>
    </completion>
    <completion string="STATS_OTHER_MS" value="6">
      <description>
</description>
    </completion>
    <completion string="STATS_OUT_PACKETS_PER_SECOND" value="14">
      <description>
</description>
    </completion>
    <completion string="STATS_OUT_PACKETS_PER_SECOND" value="18">
      <description>
</description>
    </completion>
    <completion string="STATS_PENDING_DOWNLOADS" value="17">
      <description>
</description>
    </completion>
    <completion string="STATS_PENDING_DOWNLOADS" value="19">
      <description>
</description>
    </completion>
    <completion string="STATS_PENDING_UPLOADS" value="18">
      <description>
</description>
    </completion>
    <completion string="STATS_PENDING_UPLOADS" value="20">
      <description>
</description>
    </completion>
    <completion string="STATS_PHYSICS_FPS" value="2">
      <description>
</description>
    </completion>
    <completion string="STATS_PHYSICS_MS" value="10">
      <description>
</description>
    </completion>
    <completion string="STATS_PHYSICS_MS" value="7">
      <description>
</description>
    </completion>
    <completion string="STATS_ROOT_AGENTS" value="4">
      <description>
</description>
    </completion>
    <completion string="STATS_ROOT_AGENTS" value="13">
      <description>
</description>
    </completion>
    <completion string="STATS_SCRIPT_LPS" value="20">
      <description>
</description>
    </completion>
    <completion string="STATS_SCRIPT_LPS" value="16">
      <description>
</description>
    </completion>
    <completion string="STATS_SCRIPT_EPS" value="31">
      <description>
</description>
    </completion>
    <completion string="STATS_SCRIPT_MS" value="10">
      <description>
</description>
    </completion>
    <completion string="STATS_SIM_FPS" value="1">
      <description>
</description>
    </completion>
    <completion string="STATS_TIME_DILATION" value="0">
      <description>
</description>
    </completion>
    <completion string="STATS_TOTAL_PRIMS" value="6">
      <description>
</description>
    </completion>
    <completion string="STATS_TOTAL_PRIMS" value="11">
      <description>
</description>
    </completion>
    <completion string="STATS_UNACKED_BYTES" value="15">
      <description>
</description>
    </completion>
    <completion string="STATS_UNACKED_BYTES" value="24">
      <description>
</description>
    </completion>
    <completion string="OS_ATTACH_MSG_ALL" value="-65535">
      <description>
Instructs osMessageAttachements to send the message to attachments on every point
    </description>
    </completion>
    <completion string="OS_ATTACH_MSG_INVERT_POINTS" value="1">
      <description>
Instructs osMessageAttachements to invert how the attachment points list should be treated (e.g. go from inclusive operation to exclusive operation)
    </description>
    </completion>
    <completion string="OS_ATTACH_MSG_OBJECT_CREATOR" value="2">
      <description>
Instructs osMessageAttachments to only send the message to attachments with a CreatorID that matches the host object CreatorID
    </description>
    </completion>
    <completion string="OS_ATTACH_MSG_SCRIPT_CREATOR" value="4">
      <description>
Instructs osMessageAttachments to only send the message to attachments with a CreatorID that matches the sending script CreatorID
    </description>
    </completion>
    <completion string="OS_LISTEN_REGEX_NAME" value="0x1">
      <description>
process name parameter as regex
   </description>
    </completion>
    <completion string="OS_LISTEN_REGEX_MESSAGE" value="0x2">
      <description>
process message parameter as regex
    </description>
    </completion>
    <completion string="OS_NPC_CREATOR_OWNED" value="0x1">
      <description>
</description>
    </completion>
    <completion string="OS_NPC_FLY" value="0">
      <description>
</description>
    </completion>
    <completion string="OS_NPC_LAND_AT_TARGET" value="2">
      <description>
</description>
    </completion>
    <completion string="OS_NPC_NOT_OWNED" value="0x2">
      <description>
</description>
    </completion>
    <completion string="OS_NPC_NO_FLY" value="1">
      <description>
</description>
    </completion>
    <completion string="OS_NPC_RUNNING" value="4">
      <description>
</description>
    </completion>
    <completion string="OS_NPC_SENSE_AS_AGENT" value="0x4">
      <description>
</description>
    </completion>
    <completion string="OS_NPC_OBJECT_GROUP" value="0x8">
      <description>
</description>
    </completion>
    <completion string="OS_NPC_SIT_NOW" value="0">
      <description>
</description>
    </completion>
    <completion string="WL_WATER_COLOR" value="0">
      <description>
</description>
    </completion>
    <completion string="WL_WATER_FOG_DENSITY_EXPONENT" value="1">
      <description>
</description>
    </completion>
    <completion string="WL_UNDERWATER_FOG_MODIFIER" value="2">
      <description>
</description>
    </completion>
    <completion string="WL_REFLECTION_WAVELET_SCALE" value="3">
      <description>
</description>
    </completion>
    <completion string="WL_FRESNEL_SCALE" value="4">
      <description>
</description>
    </completion>
    <completion string="WL_FRESNEL_OFFSET" value="5">
      <description>
</description>
    </completion>
    <completion string="WL_REFRACT_SCALE_ABOVE" value="6">
      <description>
</description>
    </completion>
    <completion string="WL_REFRACT_SCALE_BELOW" value="7">
      <description>
</description>
    </completion>
    <completion string="WL_BLUR_MULTIPLIER" value="8">
      <description>
</description>
    </completion>
    <completion string="WL_BIG_WAVE_DIRECTION" value="9">
      <description>
</description>
    </completion>
    <completion string="WL_LITTLE_WAVE_DIRECTION" value="10">
      <description>
</description>
    </completion>
    <completion string="WL_NORMAL_MAP_TEXTURE" value="11">
      <description>
</description>
    </completion>
    <completion string="WL_HORIZON" value="12">
      <description>
</description>
    </completion>
    <completion string="WL_HAZE_HORIZON" value="13">
      <description>
</description>
    </completion>
    <completion string="WL_BLUE_DENSITY" value="14">
      <description>
</description>
    </completion>
    <completion string="WL_HAZE_DENSITY" value="15">
      <description>
</description>
    </completion>
    <completion string="WL_DENSITY_MULTIPLIER" value="16">
      <description>
</description>
    </completion>
    <completion string="WL_DISTANCE_MULTIPLIER" value="17">
      <description>
</description>
    </completion>
    <completion string="WL_MAX_ALTITUDE" value="18">
      <description>
</description>
    </completion>
    <completion string="WL_SUN_MOON_COLOR" value="19">
      <description>
</description>
    </completion>
    <completion string="WL_AMBIENT" value="20">
      <description>
</description>
    </completion>
    <completion string="WL_EAST_ANGLE" value="21">
      <description>
</description>
    </completion>
    <completion string="WL_SUN_GLOW_FOCUS" value="22">
      <description>
</description>
    </completion>
    <completion string="WL_SUN_GLOW_SIZE" value="23">
      <description>
</description>
    </completion>
    <completion string="WL_SCENE_GAMMA" value="24">
      <description>
</description>
    </completion>
    <completion string="WL_STAR_BRIGHTNESS" value="25">
      <description>
</description>
    </completion>
    <completion string="WL_CLOUD_COLOR" value="26">
      <description>
</description>
    </completion>
    <completion string="WL_CLOUD_XY_DENSITY" value="27">
      <description>
</description>
    </completion>
    <completion string="WL_CLOUD_COVERAGE" value="28">
      <description>
</description>
    </completion>
    <completion string="WL_CLOUD_SCALE" value="29">
      <description>
</description>
    </completion>
    <completion string="WL_CLOUD_DETAIL_XY_DENSITY" value="30">
      <description>
</description>
    </completion>
    <completion string="WL_CLOUD_SCROLL_X" value="31">
      <description>
</description>
    </completion>
    <completion string="WL_CLOUD_SCROLL_Y" value="32">
      <description>
</description>
    </completion>
    <completion string="WL_CLOUD_SCROLL_Y_LOCK" value="33">
      <description>
</description>
    </completion>
    <completion string="WL_CLOUD_SCROLL_X_LOCK" value="34">
      <description>
</description>
    </completion>
    <completion string="WL_DRAW_CLASSIC_CLOUDS" value="35">
      <description>
</description>
    </completion>
    <completion string="WL_SUN_MOON_POSITION" value="36">
      <description>
</description>
    </completion>
    <completion string="PASS_IF_NOT_HANDLED" value="0">
      <description>
</description>
    </completion>
    <completion string="PASS_ALWAYS" value="1">
      <description>
</description>
    </completion>
    <completion string="PASS_NEVER" value="2">
      <description>
</description>
    </completion>
    <completion string="ENABLE_GRAVITY" value="enable_gravity">
      <description>
</description>
    </completion>
    <completion string="GRAVITY_FORCE_X" value="gravity_force_x">
      <description>
</description>
    </completion>
    <completion string="GRAVITY_FORCE_Y" value="gravity_force_y">
      <description>
</description>
    </completion>
    <completion string="GRAVITY_FORCE_Z" value="gravity_force_z">
      <description>
</description>
    </completion>
    <completion string="ADD_GRAVITY_POINT" value="add_gravity_point">
      <description>
</description>
    </completion>
    <completion string="ADD_GRAVITY_FORCE" value="add_gravity_force">
      <description>
</description>
    </completion>
    <completion string="START_TIME_REVERSAL_SAVING" value="start_time_reversal_saving">
      <description>
</description>
    </completion>
    <completion string="STOP_TIME_REVERSAL_SAVING" value="stop_time_reversal_saving">
      <description>
</description>
    </completion>
    <completion string="START_TIME_REVERSAL" value="start_time_reversal">
      <description>
</description>
    </completion>
    <completion string="STOP_TIME_REVERSAL" value="stop_time_reversal">
      <description>
</description>
    </completion>
    <completion string="BOT_FOLLOW_FLAG_NONE" value="0">
      <description>
</description>
    </completion>
    <completion string="BOT_FOLLOW_FLAG_INDEFINITELY" value="1">
      <description>
</description>
    </completion>
    <completion string="BOT_FOLLOW_FLAG_FORCEDIRECTPATH" value="4">
      <description>
</description>
    </completion>
    <completion string="BOT_TAG_FIND_ALL" value="AllBots">
      <description>
</description>
    </completion>
    <completion string="BOT_FOLLOW_WALK" value="0">
      <description>
</description>
    </completion>
    <completion string="BOT_FOLLOW_RUN" value="1">
      <description>
</description>
    </completion>
    <completion string="BOT_FOLLOW_FLY" value="2">
      <description>
</description>
    </completion>
    <completion string="BOT_FOLLOW_TELEPORT" value="3">
      <description>
</description>
    </completion>
    <completion string="BOT_FOLLOW_WAIT" value="4">
      <description>
</description>
    </completion>
    <completion string="BOT_FOLLOW_TRIGGER_HERE_EVENT" value="1">
      <description>
</description>
    </completion>
    <completion string="WL_OK" value="-1">
      <description>
</description>
    </completion>
    <completion string="WL_ERROR" value="-2">
      <description>
</description>
    </completion>
    <completion string="WL_ERROR_NO_SCENE_SET" value="-3">
      <description>
</description>
    </completion>
    <completion string="WL_ERROR_SCENE_MUST_BE_STATIC" value="-4">
      <description>
</description>
    </completion>
    <completion string="WL_ERROR_SCENE_MUST_NOT_BE_STATIC" value="-5">
      <description>
</description>
    </completion>
    <completion string="WL_ERROR_BAD_SETTING" value="-6">
      <description>
</description>
    </completion>
    <completion string="WL_ERROR_NO_PRESET_FOUND" value="-7">
      <description>
</description>
    </completion>
    <completion string="WL_AMBIENT" value="0">
      <description>
</description>
    </completion>
    <completion string="WL_SKY_BLUE_DENSITY" value="1">
      <description>
</description>
    </completion>
    <completion string="WL_SKY_BLUR_HORIZON" value="2">
      <description>
</description>
    </completion>
    <completion string="WL_CLOUD_COLOR" value="3">
      <description>
</description>
    </completion>
    <completion string="WL_CLOUD_POS_DENSITY1" value="4">
      <description>
</description>
    </completion>
    <completion string="WL_CLOUD_POS_DENSITY2" value="5">
      <description>
</description>
    </completion>
    <completion string="WL_CLOUD_SCALE" value="6">
      <description>
</description>
    </completion>
    <completion string="WL_CLOUD_SCROLL_X" value="7">
      <description>
</description>
    </completion>
    <completion string="WL_CLOUD_SCROLL_Y" value="8">
      <description>
</description>
    </completion>
    <completion string="WL_CLOUD_SCROLL_X_LOCK" value="9">
      <description>
</description>
    </completion>
    <completion string="WL_CLOUD_SCROLL_Y_LOCK" value="10">
      <description>
</description>
    </completion>
    <completion string="WL_CLOUD_SHADOW" value="11">
      <description>
</description>
    </completion>
    <completion string="WL_SKY_DENSITY_MULTIPLIER" value="12">
      <description>
</description>
    </completion>
    <completion string="WL_SKY_DISTANCE_MULTIPLIER" value="13">
      <description>
</description>
    </completion>
    <completion string="WL_SKY_GAMMA" value="14">
      <description>
</description>
    </completion>
    <completion string="WL_SKY_GLOW" value="15">
      <description>
</description>
    </completion>
    <completion string="WL_SKY_HAZE_DENSITY" value="16">
      <description>
</description>
    </completion>
    <completion string="WL_SKY_HAZE_HORIZON" value="17">
      <description>
</description>
    </completion>
    <completion string="WL_SKY_LIGHT_NORMALS" value="18">
      <description>
</description>
    </completion>
    <completion string="WL_SKY_MAX_ALTITUDE" value="19">
      <description>
</description>
    </completion>
    <completion string="WL_SKY_STAR_BRIGHTNESS" value="20">
      <description>
</description>
    </completion>
    <completion string="WL_SKY_SUNLIGHT_COLOR" value="21">
      <description>
</description>
    </completion>
    <completion string="WL_WATER_BLUR_MULTIPLIER" value="22">
      <description>
</description>
    </completion>
    <completion string="WL_WATER_FRESNEL_OFFSET" value="23">
      <description>
</description>
    </completion>
    <completion string="WL_WATER_FRESNEL_SCALE" value="24">
      <description>
</description>
    </completion>
    <completion string="WL_WATER_NORMAL_MAP" value="25">
      <description>
</description>
    </completion>
    <completion string="WL_WATER_NORMAL_SCALE" value="26">
      <description>
</description>
    </completion>
    <completion string="WL_WATER_SCALE_ABOVE" value="27">
      <description>
</description>
    </completion>
    <completion string="WL_WATER_SCALE_BELOW" value="28">
      <description>
</description>
    </completion>
    <completion string="WL_WATER_UNDERWATER_FOG_MODIFIER" value="29">
      <description>
</description>
    </completion>
    <completion string="WL_WATER_FOG_COLOR" value="30">
      <description>
</description>
    </completion>
    <completion string="WL_WATER_FOG_DENSITY" value="31">
      <description>
</description>
    </completion>
    <completion string="WL_WATER_BIG_WAVE_DIRECTION" value="32">
      <description>
</description>
    </completion>
    <completion string="WL_WATER_LITTLE_WAVE_DIRECTION" value="33">
      <description>
</description>
    </completion>
  </set>
  <!--Functions-->
  <set name="lsl.functions" symbol="function">
    <completion string="llSin" result="float">
      <description>
Returns the sine of theta (theta in radians)
    </description>
      <behavior>
        <append>($[float theta])</append>
      </behavior>
    </completion>
    <completion string="llCos" result="float">
      <description>
Returns the cosine of theta (theta in radians)
    </description>
      <behavior>
        <append>($[float theta])</append>
      </behavior>
    </completion>
    <completion string="llTan" result="float">
      <description>
Returns the tangent of theta (theta in radians)
    </description>
      <behavior>
        <append>($[float theta])</append>
      </behavior>
    </completion>
    <completion string="llAtan2" result="float">
      <description>
Returns the arctangent2 of y, x
    </description>
      <behavior>
        <append>($[float y], $[float x])</append>
      </behavior>
    </completion>
    <completion string="llSqrt" result="float">
      <description>
Returns the square root of val, or returns 0 and triggers a Math Error for imaginary results
    </description>
      <behavior>
        <append>($[float val])</append>
      </behavior>
    </completion>
    <completion string="llPow" result="float">
      <description>
Returns the base raised to the power exponent, or returns 0 and triggers Math Error for imaginary results
    </description>
      <behavior>
        <append>($[float base], $[float exponent])</append>
      </behavior>
    </completion>
    <completion string="llAbs" result="integer">
      <description>
Returns the positive version of val
    </description>
      <behavior>
        <append>($[integer val])</append>
      </behavior>
    </completion>
    <completion string="llFabs" result="float">
      <description>
Returns the positive version of val
    </description>
      <behavior>
        <append>($[float val])</append>
      </behavior>
    </completion>
    <completion string="llFrand" result="float">
      <description>
Returns a pseudo random number in the range [0,mag) or (mag,0]
    </description>
      <behavior>
        <append>($[float mag])</append>
      </behavior>
    </completion>
    <completion string="llFloor" result="integer">
      <description>
Returns largest integer value &lt;= val
    </description>
      <behavior>
        <append>($[float val])</append>
      </behavior>
    </completion>
    <completion string="llCeil" result="integer">
      <description>
Returns smallest integer value &gt;= val
    </description>
      <behavior>
        <append>($[float val])</append>
      </behavior>
    </completion>
    <completion string="llRound" result="integer">
      <description>
Returns val rounded to the nearest integer
    </description>
      <behavior>
        <append>($[float val])</append>
      </behavior>
    </completion>
    <completion string="llVecMag" result="float">
      <description>
Returns the magnitude of v
    </description>
      <behavior>
        <append>($[vector v])</append>
      </behavior>
    </completion>
    <completion string="llVecNorm" result="vector">
      <description>
Returns the v normalized
    </description>
      <behavior>
        <append>($[vector v])</append>
      </behavior>
    </completion>
    <completion string="llVecDist" result="float">
      <description>
Returns the 3D distance between v1 and v2
    </description>
      <behavior>
        <append>($[vector v1], $[vector v2])</append>
      </behavior>
    </completion>
    <completion string="llRot2Euler" result="vector">
      <description>
Returns the Euler representation (roll, pitch, yaw) of q
    </description>
      <behavior>
        <append>($[rotation q])</append>
      </behavior>
    </completion>
    <completion string="llEuler2Rot" result="rotation">
      <description>
Returns the rotation representation of Euler Angles v
    </description>
      <behavior>
        <append>($[vector v])</append>
      </behavior>
    </completion>
    <completion string="llAxes2Rot" result="rotation">
      <description>
Returns the rotation defined by the coordinate axes
    </description>
      <behavior>
        <append>($[vector fwd], $[vector left], $[vector up])</append>
      </behavior>
    </completion>
    <completion string="llRot2Fwd" result="vector">
      <description>
Returns the forward vector defined by q
    </description>
      <behavior>
        <append>($[rotation q])</append>
      </behavior>
    </completion>
    <completion string="llRot2Left" result="vector">
      <description>
Returns the left vector defined by q
    </description>
      <behavior>
        <append>($[rotation q])</append>
      </behavior>
    </completion>
    <completion string="llRot2Up" result="vector">
      <description>
Returns the up vector defined by q
    </description>
      <behavior>
        <append>($[rotation q])</append>
      </behavior>
    </completion>
    <completion string="llRotBetween" result="rotation">
      <description>
Returns the rotation to rotate v1 to v2
    </description>
      <behavior>
        <append>($[vector v1], $[vector v2])</append>
      </behavior>
    </completion>
    <completion string="llWhisper">
      <description>
Whispers the text of msg on channel
    </description>
      <behavior>
        <append>($[integer channel], $[string msg])</append>
      </behavior>
    </completion>
    <completion string="llSay">
      <description>
Says the text of msg on channel
    </description>
      <behavior>
        <append>($[integer channel], $[string msg])</append>
      </behavior>
    </completion>
    <completion string="llShout">
      <description>
Shouts the text of msg on channel
    </description>
      <behavior>
        <append>($[integer channel], $[string msg])</append>
      </behavior>
    </completion>
    <completion string="llListen" result="integer">
      <description>
Sets a callback for msg on channel from name and id (name, id, and/or msg can be empty) and returns an identifier that can be used to deactivate or remove the listen
    </description>
      <behavior>
        <append>($[integer channel], $[string name], $[key id], $[string msg])</append>
      </behavior>
    </completion>
    <completion string="llListenControl">
      <description>
Makes a listen event callback active or inactive
    </description>
      <behavior>
        <append>($[integer number], $[integer active])</append>
      </behavior>
    </completion>
    <completion string="llListenRemove">
      <description>
Removes listen event callback number
    </description>
      <behavior>
        <append>($[integer number])</append>
      </behavior>
    </completion>
    <completion string="llSensor">
      <description>
Performs a single scan for name and id with type (AGENT, ACTIVE, PASSIVE, and/or SCRIPTED) within range meters and arc radians of forward vector (name, id, and/or keytype can be empty or 0)
    </description>
      <behavior>
        <append>($[string name], $[key id], $[integer type], $[float range], $[float arc])</append>
      </behavior>
    </completion>
    <completion string="llSensorRepeat">
      <description>
Sets a callback for name and id with type (AGENT, ACTIVE, PASSIVE, and/or SCRIPTED) within range meters and arc radians of forward vector (name, id, and/or keytype can be empty or 0) and repeats every rate seconds
    </description>
      <behavior>
        <append>($[string name], $[key id], $[integer type], $[float range], $[float arc], $[float rate])</append>
      </behavior>
    </completion>
    <completion string="llSensorRemove">
      <description>
Removes the sensor setup by llSensorRepeat
    </description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="llDetectedName" result="string">
      <description>
Returns the name of detected object number (returns empty string if number is not a valid sensed object)
    </description>
      <behavior>
        <append>($[integer number])</append>
      </behavior>
    </completion>
    <completion string="llDetectedKey" result="key">
      <description>
Returns the key of detected object number (returns empty key if number is not a valid sensed object)
    </description>
      <behavior>
        <append>($[integer number])</append>
      </behavior>
    </completion>
    <completion string="llDetectedOwner" result="key">
      <description>
Returns the key of detected object&apos;s owner (returns empty key if number is not a valid sensed object)
    </description>
      <behavior>
        <append>($[integer number])</append>
      </behavior>
    </completion>
    <completion string="llDetectedType" result="integer">
      <description>
Returns the type (AGENT, ACTIVE, PASSIVE, SCRIPTED) of detected object (returns 0 if number is not a valid sensed object)
    </description>
      <behavior>
        <append>($[integer number])</append>
      </behavior>
    </completion>
    <completion string="llDetectedPos" result="vector">
      <description>
Returns the position of detected object number (returns &lt;0,0,0&gt; if number is not a valid sensed object)
    </description>
      <behavior>
        <append>($[integer number])</append>
      </behavior>
    </completion>
    <completion string="llDetectedVel" result="vector">
      <description>
Returns the velocity of detected object number (returns &lt;0,0,0&gt; if number is not a valid sensed object)
    </description>
      <behavior>
        <append>($[integer number])</append>
      </behavior>
    </completion>
    <completion string="llDetectedGrab" result="vector">
      <description>
Returns the grab offset of the user touching object (returns &lt;0,0,0&gt; if number is not a valid sensed object)
    </description>
      <behavior>
        <append>($[integer number])</append>
      </behavior>
    </completion>
    <completion string="llDetectedRot" result="rotation">
      <description>
Returns the rotation of detected object number (returns &lt;0,0,0,1&gt; if number is not a valid sensed object)
    </description>
      <behavior>
        <append>($[integer number])</append>
      </behavior>
    </completion>
    <completion string="llDetectedGroup" result="integer">
      <description>
Returns TRUE if detected object is part of same group as owner
    </description>
      <behavior>
        <append>($[integer number])</append>
      </behavior>
    </completion>
    <completion string="llDetectedLinkNumber" result="integer">
      <description>
Returns the link position of the triggered event for touches and collisions only
    </description>
      <behavior>
        <append>($[integer number])</append>
      </behavior>
    </completion>
    <completion string="llDie">
      <description>
Deletes the object
    </description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="llGround" result="float">
      <description>
Returns the ground height below the object position + offset
    </description>
      <behavior>
        <append>($[vector offset])</append>
      </behavior>
    </completion>
    <completion string="llCloud" result="float">
      <description>
Returns the cloud density at the object position + offset.
DEPRECATED - It always returns 0.0 now.
    </description>
      <behavior>
        <append>($[vector offset])</append>
      </behavior>
    </completion>
    <completion string="llWind" result="vector">
      <description>
Returns the wind velocity at the object position + offset
    </description>
      <behavior>
        <append>($[vector offset])</append>
      </behavior>
    </completion>
    <completion string="llSetStatus">
      <description>
Sets status (STATUS_PHYSICS, STATUS_PHANTOM, STATUS_BLOCK_GRAB, STATUS_ROTATE_X, STATUS_ROTATE_Y, and/or STATUS_ROTATE_Z) to value
    </description>
      <behavior>
        <append>($[integer status], $[integer value])</append>
      </behavior>
    </completion>
    <completion string="llGetStatus" result="integer">
      <description>
Returns value of status (STATUS_PHYSICS, STATUS_PHANTOM, STATUS_BLOCK_GRAB, STATUS_ROTATE_X, STATUS_ROTATE_Y, and/or STATUS_ROTATE_Z)
    </description>
      <behavior>
        <append>($[integer status])</append>
      </behavior>
    </completion>
    <completion string="llSetScale">
      <description>
Sets the scale of the prim
    </description>
      <behavior>
        <append>($[vector scale])</append>
      </behavior>
    </completion>
    <completion string="llGetScale" result="vector">
      <description>
Returns the scale of the prim
    </description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="llSetColor">
      <description>
Sets the color on face of the prim
    </description>
      <behavior>
        <append>($[vector color], $[integer face])</append>
      </behavior>
    </completion>
    <completion string="llGetAlpha" result="float">
      <description>
Returns the alpha of face
    </description>
      <behavior>
        <append>($[integer face])</append>
      </behavior>
    </completion>
    <completion string="llSetAlpha">
      <description>
Sets the alpha on face
    </description>
      <behavior>
        <append>($[float alpha], $[integer face])</append>
      </behavior>
    </completion>
    <completion string="llGetColor" result="vector">
      <description>
Returns the color on face
    </description>
      <behavior>
        <append>($[integer face])</append>
      </behavior>
    </completion>
    <completion string="llSetTexture">
      <description>
Sets the texture of face or ALL_SIDES
    </description>
      <behavior>
        <append>($[string texture], $[integer face])</append>
      </behavior>
    </completion>
    <completion string="llScaleTexture">
      <description>
Sets the texture u &amp; v scales for the chosen face or ALL_SIDES
    </description>
      <behavior>
        <append>($[float u], $[float v], $[integer face])</append>
      </behavior>
    </completion>
    <completion string="llOffsetTexture">
      <description>
Sets the texture u  &amp; v offsets for the chosen face or ALL_SIDES
    </description>
      <behavior>
        <append>($[float u], $[float v], $[integer face])</append>
      </behavior>
    </completion>
    <completion string="llRotateTexture">
      <description>
Sets the texture rotation for the chosen face
    </description>
      <behavior>
        <append>($[float angle], $[integer face])</append>
      </behavior>
    </completion>
    <completion string="llGetTexture" result="string">
      <description>
Returns a string that is the texture on face (the inventory name if it is a texture in the prim&apos;s inventory, otherwise the key)
    </description>
      <behavior>
        <append>($[integer face])</append>
      </behavior>
    </completion>
    <completion string="llSetPos">
      <description>
Moves the object or prim towards pos without using physics (if the script isn&apos;t physical)
    </description>
      <behavior>
        <append>($[vector pos])</append>
      </behavior>
    </completion>
    <completion string="llGetPos" result="vector">
      <description>
Returns the position of the task in region coordinates
    </description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="llGetLocalPos" result="vector">
      <description>
Returns the position relative to the root
    </description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="llSetRot">
      <description>
Sets the rotation
    </description>
      <behavior>
        <append>($[rotation rot])</append>
      </behavior>
    </completion>
    <completion string="llGetRot" result="rotation">
      <description>
Returns the rotation relative to the region&apos;s axes
    </description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="llGetLocalRot" result="rotation">
      <description>
Returns the rotation local to the root
    </description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="llSetForce">
      <description>
Applies force to the object (if the script is physical), in local coords if local == TRUE
    </description>
      <behavior>
        <append>($[vector force], $[integer local])</append>
      </behavior>
    </completion>
    <completion string="llGetForce" result="vector">
      <description>
Returns the force (if the script is physical)
    </description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="llTarget" result="integer">
      <description>
Sets positions within range of position as a target and return an ID for the target
    </description>
      <behavior>
        <append>($[vector position], $[float range])</append>
      </behavior>
    </completion>
    <completion string="llTargetRemove">
      <description>
Removes positional target number registered with llTarget
    </description>
      <behavior>
        <append>($[integer number])</append>
      </behavior>
    </completion>
    <completion string="llRotTarget" result="integer">
      <description>
Set rotations with error of rot as a rotational target and return an ID for the rotational target
    </description>
      <behavior>
        <append>($[rotation rot], $[float error])</append>
      </behavior>
    </completion>
    <completion string="llRotTargetRemove">
      <description>
Removes rotational target number registered with llRotTarget
    </description>
      <behavior>
        <append>($[integer number])</append>
      </behavior>
    </completion>
    <completion string="llMoveToTarget">
      <description>
Critically damps to target in tau seconds (if the script is physical)
    </description>
      <behavior>
        <append>($[vector target], $[float tau])</append>
      </behavior>
    </completion>
    <completion string="llStopMoveToTarget">
      <description>
Stops critically damped motion
    </description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="llApplyImpulse">
      <description>
Applies impulse to object (if the script is physical), in local coords if local == TRUE
    </description>
      <behavior>
        <append>($[vector force], $[integer local])</append>
      </behavior>
    </completion>
    <completion string="llApplyRotationalImpulse">
      <description>
Applies rotational impulse to object (if the script is physical), in local coords if local == TRUE
    </description>
      <behavior>
        <append>($[vector force], $[integer local])</append>
      </behavior>
    </completion>
    <completion string="llSetTorque">
      <description>
Sets the torque of object (if the script is physical), in local coords if local == TRUE
    </description>
      <behavior>
        <append>($[vector torque], $[integer local])</append>
      </behavior>
    </completion>
    <completion string="llGetTorque" result="vector">
      <description>
Returns the torque (if the script is physical)
    </description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="llSetForceAndTorque">
      <description>
Sets the force and torque of object (if the script is physical), in local coords if local == TRUE
    </description>
      <behavior>
        <append>($[vector force], $[vector torque], $[integer local])</append>
      </behavior>
    </completion>
    <completion string="llGetVel" result="vector">
      <description>
Returns the velocity of the object
    </description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="llGetAccel" result="vector">
      <description>
Returns the acceleration of the object relative to the region&apos;s axes
    </description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="llGetOmega" result="vector">
      <description>
Returns the rotation velocity in radians per second
    </description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="llGetTimeOfDay" result="float">
      <description>
Returns the time in seconds since [CURRENT_GRID] server midnight or since region up-time, whichever is smaller
    </description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="llGetWallclock" result="float">
      <description>
Returns the time in seconds since midnight California Pacific time (PST/PDT)
    </description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="llGetTime" result="float">
      <description>
Returns the time in seconds since the last region reset, script reset, or call to either llResetTime or llGetAndResetTime
    </description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="llResetTime">
      <description>
Sets the script timer to zero
    </description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="llGetAndResetTime" result="float">
      <description>
Returns the script time in seconds and then resets the script timer to zero
    </description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="llSound" deprecated="true">
      <description>
Plays sound at volume and whether it should loop or not. DEPRECATED - Use llPlaySound / llLoopSound / llSetSoundQueueing.
    </description>
      <behavior>
        <append>($[string sound], $[float volume], $[integer queue], $[integer loop])</append>
      </behavior>
    </completion>
    <completion string="llPlaySound">
      <description>
Plays attached sound once at volume (0.0 - 1.0)
    </description>
      <behavior>
        <append>($[string sound], $[float volume])</append>
      </behavior>
    </completion>
    <completion string="llLoopSound">
      <description>
Plays attached sound looping indefinitely at volume (0.0 - 1.0)
    </description>
      <behavior>
        <append>($[string sound], $[float volume])</append>
      </behavior>
    </completion>
    <completion string="llLoopSoundMaster">
      <description>
Plays attached sound looping at volume (0.0 - 1.0), declares it a sync master
    </description>
      <behavior>
        <append>($[string sound], $[float volume])</append>
      </behavior>
    </completion>
    <completion string="llLoopSoundSlave">
      <description>
Plays attached sound looping at volume (0.0 - 1.0), synced to most audible sync master
    </description>
      <behavior>
        <append>($[string sound], $[float volume])</append>
      </behavior>
    </completion>
    <completion string="llPlaySoundSlave">
      <description>
Plays attached sound once at volume (0.0 - 1.0), synced to next loop of most audible sync master
    </description>
      <behavior>
        <append>($[string sound], $[float volume])</append>
      </behavior>
    </completion>
    <completion string="llTriggerSound">
      <description>
Plays sound at volume (0.0 - 1.0), centered at but not attached to object
    </description>
      <behavior>
        <append>($[string sound], $[float volume])</append>
      </behavior>
    </completion>
    <completion string="llStopSound">
      <description>
Stops currently attached sound
    </description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="llPreloadSound">
      <description>
Preloads a sound on viewers within range
    </description>
      <behavior>
        <append>($[string sound])</append>
      </behavior>
    </completion>
    <completion string="llGetSubString" result="string">
      <description>
Returns the indicated substring
    </description>
      <behavior>
        <append>($[string src], $[integer start], $[integer end])</append>
      </behavior>
    </completion>
    <completion string="llDeleteSubString" result="string">
      <description>
Removes the indicated substring and returns the result
    </description>
      <behavior>
        <append>($[string src], $[integer start], $[integer end])</append>
      </behavior>
    </completion>
    <completion string="llInsertString" result="string">
      <description>
Returns a destination string dst with the string src inserted starting at position pos
    </description>
      <behavior>
        <append>($[string dst], $[integer position], $[string src])</append>
      </behavior>
    </completion>
    <completion string="llToUpper" result="string">
      <description>
Returns a string that is src with all upper-case characters
    </description>
      <behavior>
        <append>($[string src])</append>
      </behavior>
    </completion>
    <completion string="llToLower" result="string">
      <description>
Returns a string that is src with all lower-case characters
    </description>
      <behavior>
        <append>($[string src])</append>
      </behavior>
    </completion>
    <completion string="llGiveMoney" result="integer">
      <description>
Transfers amount of L$ from script owner to destination
    </description>
      <behavior>
        <append>($[key destination], $[integer amount])</append>
      </behavior>
    </completion>
    <completion string="llMakeExplosion" deprecated="true">
      <description>
(DEPRECATED) Makes a round explosion of particles
    </description>
      <behavior>
        <append>($[integer particles], $[float scale], $[float vel], $[float lifetime], $[float arc], $[string texture], $[vector offset])</append>
      </behavior>
    </completion>
    <completion string="llMakeFountain" deprecated="true">
      <description>
(DEPRECATED) Makes a fountain of particles
    </description>
      <behavior>
        <append>($[integer particles], $[float scale], $[float vel], $[float lifetime], $[float arc], $[integer bounce], $[string texture], $[vector offset], $[float bounce_offset])</append>
      </behavior>
    </completion>
    <completion string="llMakeSmoke" deprecated="true">
      <description>
(DEPRECATED) Makes smoke like particles
    </description>
      <behavior>
        <append>($[integer particles], $[float scale], $[float vel], $[float lifetime], $[float arc], $[string texture], $[vector offset])</append>
      </behavior>
    </completion>
    <completion string="llMakeFire" deprecated="true">
      <description>
(DEPRECATED) Makes fire like particles
    </description>
      <behavior>
        <append>($[integer particles], $[float scale], $[float vel], $[float lifetime], $[float arc], $[string texture], $[vector offset])</append>
      </behavior>
    </completion>
    <completion string="llRezObject">
      <description>
Instantiates owner&apos;s inventory object at pos with velocity vel and rotation rot with start parameter param
    </description>
      <behavior>
        <append>($[string inventory], $[vector pos], $[vector vel], $[rotation rot], $[integer param])</append>
      </behavior>
    </completion>
    <completion string="llLookAt">
      <description>
Causes object to point its up axis (positive z) towards target, while keeping its forward axis (positive x) below the horizon
    </description>
      <behavior>
        <append>($[vector target], $[float strength], $[float damping])</append>
      </behavior>
    </completion>
    <completion string="llLinkLookAt">
      <description>
Causes a linked prim to point its up axis (positive z) towards target, while keeping its forward axis (positive x) below the horizon
    </description>
      <behavior>
        <append>($[integer link], $[vector target], $[float strength], $[float damping])</append>
      </behavior>
    </completion>
    <completion string="llStopLookAt">
      <description>
Stops causing object to point at a target
    </description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="llSetTimerEvent">
      <description>
Causes the timer event to be triggered a maximum of once every sec seconds
    </description>
      <behavior>
        <append>($[float sec])</append>
      </behavior>
    </completion>
    <completion string="llSleep">
      <description>
Puts the script to sleep for sec seconds
    </description>
      <behavior>
        <append>($[float sec])</append>
      </behavior>
    </completion>
    <completion string="llGetMass" result="float">
      <description>
Returns the mass of object that the script is attached to
    </description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="llCollisionFilter">
      <description>
Sets the collision filter, exclusively or inclusively. If accept == TRUE, only accept collisions with objects name and id (either is optional), otherwise with objects not name or id.
    </description>
      <behavior>
        <append>($[string name], $[key id], $[integer accept])</append>
      </behavior>
    </completion>
    <completion string="llTakeControls">
      <description>
Allows for intercepting keyboard and mouse clicks from the agent the script has permissions for
    </description>
      <behavior>
        <append>($[integer controls], $[integer accept], $[integer pass_on])</append>
      </behavior>
    </completion>
    <completion string="llReleaseControls">
      <description>
Stops taking inputs that were taken with llTakeControls
    </description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="llAttachToAvatar">
      <description>
Attaches the object to the avatar who has granted permission to the script
    </description>
      <behavior>
        <append>($[integer attach_point])</append>
      </behavior>
    </completion>
    <completion string="llDetachFromAvatar">
      <description>
Detaches object from avatar
    </description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="llTakeCamera">
      <description>
Moves avatar&apos;s viewpoint to task
    </description>
      <behavior>
        <append>($[key avatar])</append>
      </behavior>
    </completion>
    <completion string="llReleaseCamera">
      <description>
Returns camera to agent avatar
    </description>
      <behavior>
        <append>($[key avatar])</append>
      </behavior>
    </completion>
    <completion string="llGetOwner" result="key">
      <description>
Returns the object owner&apos;s UUID
    </description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="llInstantMessage">
      <description>
Sends the specified string as an Instant Message to the user
    </description>
      <behavior>
        <append>($[key user], $[string message])</append>
      </behavior>
    </completion>
    <completion string="llEmail">
      <description>
Sends an email to address with the subject and message
    </description>
      <behavior>
        <append>($[string address], $[string subject], $[string message])</append>
      </behavior>
    </completion>
    <completion string="llGetNextEmail">
      <description>
Gets the next waiting email that comes from address, with specified subject
    </description>
      <behavior>
        <append>($[string address], $[string subject])</append>
      </behavior>
    </completion>
    <completion string="llGetKey" result="key">
      <description>
Returns the key of the prim the script is attached to
    </description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="llSetBuoyancy">
      <description>
Sets the buoyancy of the task or object (0 is disabled, &lt; 1.0 sinks, 1.0 floats, &gt; 1.0 rises)
    </description>
      <behavior>
        <append>($[float buoyancy])</append>
      </behavior>
    </completion>
    <completion string="llSetHoverHeight">
      <description>
Critically damps to a height above the ground (or water) in tau seconds
    </description>
      <behavior>
        <append>($[float height], $[integer water], $[float tau])</append>
      </behavior>
    </completion>
    <completion string="llStopHover">
      <description>
Stops hovering to a height
    </description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="llMinEventDelay">
      <description>
Sets the minimum time between events being handled
    </description>
      <behavior>
        <append>($[float delay])</append>
      </behavior>
    </completion>
    <completion string="llSoundPreload" deprecated="true">
      <description>
Preloads a sound on viewers within range. DEPRECATED - Use llPreloadSound.
    </description>
      <behavior>
        <append>($[string sound])</append>
      </behavior>
    </completion>
    <completion string="llRotLookAt">
      <description>
Causes object to point its forward axis towards target
    </description>
      <behavior>
        <append>($[rotation target], $[float strength], $[float damping])</append>
      </behavior>
    </completion>
    <completion string="llLinkRotLookAt">
      <description>
Causes linked prim to point its forward axis towards target
    </description>
      <behavior>
        <append>($[integer link], $[rotation target], $[float strength], $[float damping])</append>
      </behavior>
    </completion>
    <completion string="llStringLength" result="integer">
      <description>
Returns the length of string
    </description>
      <behavior>
        <append>($[string str])</append>
      </behavior>
    </completion>
    <completion string="llStartAnimation">
      <description>
Starts animation anim for agent that granted PERMISSION_TRIGGER_ANIMATION if the permission has not been revoked
    </description>
      <behavior>
        <append>($[string anim])</append>
      </behavior>
    </completion>
    <completion string="llStopAnimation">
      <description>
Stops animation anim for agent that granted permission
    </description>
      <behavior>
        <append>($[string anim])</append>
      </behavior>
    </completion>
    <completion string="llPointAt">
      <description>
Makes agent that owns object point at pos
    </description>
      <behavior>
        <append>($[vector pos])</append>
      </behavior>
    </completion>
    <completion string="llStopPointAt">
      <description>
Stops pointing agent that owns object
    </description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="llTargetOmega">
      <description>
Rotates the object around axis at spinrate with strength gain
    </description>
      <behavior>
        <append>($[vector axis], $[float spinrate], $[float gain])</append>
      </behavior>
    </completion>
    <completion string="llGetStartParameter" result="integer">
      <description>
Returns an integer that is the script start/rez parameter
    </description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="llGodLikeRezObject">
      <description>
Rezzes directly off of UUID if owner is in God Mode
    </description>
      <behavior>
        <append>($[key inventory], $[vector pos])</append>
      </behavior>
    </completion>
    <completion string="llRequestPermissions">
      <description>
Asks the agent for permission to run certain classes of functions
    </description>
      <behavior>
        <append>($[key agent], $[integer perm])</append>
      </behavior>
    </completion>
    <completion string="llGetPermissionsKey" result="key">
      <description>
Returns the key of the avatar that last granted permissions to the script
    </description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="llGetPermissions" result="integer">
      <description>
Returns an integer bitfield with the permissions that have been granted
    </description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="llGetLinkNumber" result="integer">
      <description>
Returns the link number of the prim containing the script (0 means not linked, 1 the prim is the root, 2 the prim is the first child, etc)
    </description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="llSetLinkColor">
      <description>
Sets face to color if a task exists in the link chain at linknumber
    </description>
      <behavior>
        <append>($[integer linknumber], $[vector color], $[integer face])</append>
      </behavior>
    </completion>
    <completion string="llCreateLink">
      <description>
Attempts to link the script&apos;s object with the target (requires that PERMISSION_CHANGE_LINKS be granted). If parent == TRUE, then the script&apos;s object becomes the root.
    </description>
      <behavior>
        <append>($[key target], $[integer parent])</append>
      </behavior>
    </completion>
    <completion string="llBreakLink">
      <description>
Delinks the prim with the given link number in a linked object set (requires that PERMISSION_CHANGE_LINKS be granted)
    </description>
      <behavior>
        <append>($[integer linknum])</append>
      </behavior>
    </completion>
    <completion string="llBreakAllLinks">
      <description>
Delinks all prims in the link set (requires that PERMISSION_CHANGE_LINKS be granted)
    </description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="llGetLinkKey" result="key">
      <description>
Returns the key of the linked prim linknumber
    </description>
      <behavior>
        <append>($[integer linknumber])</append>
      </behavior>
    </completion>
    <completion string="llGetLinkName" result="string">
      <description>
Returns the name of linknumber in a link set
    </description>
      <behavior>
        <append>($[integer linknumber])</append>
      </behavior>
    </completion>
    <completion string="llGetInventoryNumber" result="integer">
      <description>
Returns the number of items of a given type (INVENTORY_* flag) in the prim&apos;s inventory
    </description>
      <behavior>
        <append>($[integer type])</append>
      </behavior>
    </completion>
    <completion string="llGetInventoryName" result="string">
      <description>
Returns the name of the inventory item number of a given type
    </description>
      <behavior>
        <append>($[integer type], $[integer number])</append>
      </behavior>
    </completion>
    <completion string="llSetScriptState">
      <description>
Sets the running state of the specified script
    </description>
      <behavior>
        <append>($[string name], $[integer run])</append>
      </behavior>
    </completion>
    <completion string="llGetEnergy" result="float">
      <description>
Returns how much energy is in the object as a percentage of maximum
    </description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="llGiveInventory">
      <description>
Gives inventory to destination.
Sleeps script for 2 seconds if destination is an avatar.
    </description>
      <behavior>
        <append>($[key destination], $[string inventory])</append>
      </behavior>
    </completion>
    <completion string="llRemoveInventory">
      <description>
Removes the named inventory item
    </description>
      <behavior>
        <append>($[string item])</append>
      </behavior>
    </completion>
    <completion string="llSetText">
      <description>
Displays text that hovers over the prim with specific color and translucency specified with alpha
    </description>
      <behavior>
        <append>($[string text], $[vector color], $[float alpha])</append>
      </behavior>
    </completion>
    <completion string="llWater" result="float">
      <description>
Returns the water height below the object position + offset
    </description>
      <behavior>
        <append>($[vector offset])</append>
      </behavior>
    </completion>
    <completion string="llPassTouches">
      <description>
If pass == TRUE, touches are passed from children on to parents
    </description>
      <behavior>
        <append>($[integer pass])</append>
      </behavior>
    </completion>
    <completion string="llRequestAgentData" result="key">
      <description>
Requests data about agent id. When data is available the dataserver event will be raised.
    </description>
      <behavior>
        <append>($[key id], $[integer data])</append>
      </behavior>
    </completion>
    <completion string="llRequestInventoryData" result="key">
      <description>
Requests data from object&apos;s inventory object. When data is available the dataserver event will be raised.
    </description>
      <behavior>
        <append>($[string name])</append>
      </behavior>
    </completion>
    <completion string="llSetDamage">
      <description>
Sets the amount of damage that will be done when this object hits an avatar
    </description>
      <behavior>
        <append>($[float damage])</append>
      </behavior>
    </completion>
    <completion string="llTeleportAgentHome">
      <description>
Teleports avatar on the owner&apos;s land to their home location without any warning
    </description>
      <behavior>
        <append>($[key id])</append>
      </behavior>
    </completion>
    <completion string="llModifyLand">
      <description>
Modifies land using the specified action on the specified brush size of land
    </description>
      <behavior>
        <append>($[integer action], $[integer brush])</append>
      </behavior>
    </completion>
    <completion string="llCollisionSound">
      <description>
Suppresses default collision sounds, replaces default impact sounds with impact_sound at the volume impact_volume
    </description>
      <behavior>
        <append>($[string impact_sound], $[float impact_volume])</append>
      </behavior>
    </completion>
    <completion string="llCollisionSprite">
      <description>
Suppresses default collision sprites, replaces default impact sprite with impact_sprite (use an empty string to just suppress)
    </description>
      <behavior>
        <append>($[string impact_sprite])</append>
      </behavior>
    </completion>
    <completion string="llGetAnimation" result="string">
      <description>
Returns the name of the currently playing locomotion animation for avatar id
    </description>
      <behavior>
        <append>($[key id])</append>
      </behavior>
    </completion>
    <completion string="llResetScript">
      <description>
Resets the script
    </description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="llMessageLinked">
      <description>
Allows scripts in the same object to communicate. Triggers a link_message event with the same parameters num, str, and id in all scripts in the prim(s) described by linknum.
    </description>
      <behavior>
        <append>($[integer linknum], $[integer num], $[string str], $[key id])</append>
      </behavior>
    </completion>
    <completion string="llPushObject">
      <description>
Applies impulse and ang_impulse to object id
    </description>
      <behavior>
        <append>($[key id], $[vector impulse], $[vector ang_impulse], $[integer local])</append>
      </behavior>
    </completion>
    <completion string="llPassCollisions">
      <description>
If pass == TRUE, collisions are passed from children on to parents (default is FALSE)
    </description>
      <behavior>
        <append>($[integer pass])</append>
      </behavior>
    </completion>
    <completion string="llGetScriptName" result="string">
      <description>
Returns the name of the script that this function is used in
    </description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="llGetNumberOfSides" result="integer">
      <description>
Returns the number of faces (or sides) of the prim
    </description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="llAxisAngle2Rot" result="rotation">
      <description>
Returns the rotation that is a generated angle about axis
    </description>
      <behavior>
        <append>($[vector axis], $[float angle])</append>
      </behavior>
    </completion>
    <completion string="llRot2Axis" result="vector">
      <description>
Returns the rotation axis represented by rot
    </description>
      <behavior>
        <append>($[rotation rot])</append>
      </behavior>
    </completion>
    <completion string="llRot2Angle" result="float">
      <description>
Returns the rotation angle represented by rot
    </description>
      <behavior>
        <append>($[rotation rot])</append>
      </behavior>
    </completion>
    <completion string="llAcos" result="float">
      <description>
Returns the arccosine in radians of val
    </description>
      <behavior>
        <append>($[float val])</append>
      </behavior>
    </completion>
    <completion string="llAsin" result="float">
      <description>
Returns the arcsine in radians of val
    </description>
      <behavior>
        <append>($[float val])</append>
      </behavior>
    </completion>
    <completion string="llAngleBetween" result="float">
      <description>
Returns angle between rotation a and b
    </description>
      <behavior>
        <append>($[rotation a], $[rotation b])</append>
      </behavior>
    </completion>
    <completion string="llGetInventoryKey" result="key">
      <description>
Returns the key that is the UUID of the inventory name
    </description>
      <behavior>
        <append>($[string name])</append>
      </behavior>
    </completion>
    <completion string="llAllowInventoryDrop">
      <description>
If add == TRUE, users without modify permissions can still drop inventory items onto a prim
    </description>
      <behavior>
        <append>($[integer add])</append>
      </behavior>
    </completion>
    <completion string="llGetSunDirection" result="vector">
      <description>
Returns a normalized vector of the direction of the sun in the region
    </description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="llGetTextureOffset" result="vector">
      <description>
Returns the texture offset of face in the x and y components of a vector
    </description>
      <behavior>
        <append>($[integer face])</append>
      </behavior>
    </completion>
    <completion string="llGetTextureScale" result="vector">
      <description>
Returns the texture scale of side in the x and y components of a vector
    </description>
      <behavior>
        <append>($[integer side])</append>
      </behavior>
    </completion>
    <completion string="llGetTextureRot" result="float">
      <description>
Returns the texture rotation of side
    </description>
      <behavior>
        <append>($[integer side])</append>
      </behavior>
    </completion>
    <completion string="llSubStringIndex" result="integer">
      <description>
Returns an integer that is the index in source where pattern first appears.
(Returns -1 if not found.)
    </description>
      <behavior>
        <append>($[string source], $[string pattern])</append>
      </behavior>
    </completion>
    <completion string="llGetOwnerKey" result="key">
      <description>
Returns the owner of object id
    </description>
      <behavior>
        <append>($[key id])</append>
      </behavior>
    </completion>
    <completion string="llGetCenterOfMass" result="vector">
      <description>
Returns the prim&apos;s center of mass (unless called from the root prim, where it returns the object&apos;s center of mass)
    </description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="llListSort" result="list">
      <description>
Sorts the list into blocks of stride, in ascending order if ascending == TRUE.
The sort order is affected by type.
    </description>
      <behavior>
        <append>($[list src], $[integer stride], $[integer ascending])</append>
      </behavior>
    </completion>
    <completion string="llGetListLength" result="integer">
      <description>
Returns the number of elements in the list
    </description>
      <behavior>
        <append>($[list src])</append>
      </behavior>
    </completion>
    <completion string="llList2Integer" result="integer">
      <description>
Copies the integer at index in the list
    </description>
      <behavior>
        <append>($[list src], $[integer index])</append>
      </behavior>
    </completion>
    <completion string="llList2Float" result="float">
      <description>
Copies the float at index in the list
    </description>
      <behavior>
        <append>($[list src], $[integer index])</append>
      </behavior>
    </completion>
    <completion string="llList2String" result="string">
      <description>
Copies the string at index in the list
    </description>
      <behavior>
        <append>($[list src], $[integer index])</append>
      </behavior>
    </completion>
    <completion string="llList2Key" result="key">
      <description>
Copies the key at index in the list
    </description>
      <behavior>
        <append>($[list src], $[integer index])</append>
      </behavior>
    </completion>
    <completion string="llList2Vector" result="vector">
      <description>
Copies the vector at index in the list
    </description>
      <behavior>
        <append>($[list src], $[integer index])</append>
      </behavior>
    </completion>
    <completion string="llList2Rot" result="rotation">
      <description>
Copies the rotation at index in the list
    </description>
      <behavior>
        <append>($[list src], $[integer index])</append>
      </behavior>
    </completion>
    <completion string="llList2List" result="list">
      <description>
Copies the slice of the list from start to end
    </description>
      <behavior>
        <append>($[list src], $[integer start], $[integer end])</append>
      </behavior>
    </completion>
    <completion string="llDeleteSubList" result="list">
      <description>
Removes the slice from start to end and returns the remainder of the list
    </description>
      <behavior>
        <append>($[list src], $[integer start], $[integer end])</append>
      </behavior>
    </completion>
    <completion string="llGetListEntryType" result="integer">
      <description>
Returns the type of the index entry in the list
(TYPE_INTEGER, TYPE_FLOAT, TYPE_STRING, TYPE_KEY, TYPE_VECTOR, TYPE_ROTATION, or TYPE_INVALID if index is off list)
    </description>
      <behavior>
        <append>($[list src], $[integer index])</append>
      </behavior>
    </completion>
    <completion string="llList2CSV" result="string">
      <description>
Creates a string of comma separated values from list
    </description>
      <behavior>
        <append>($[list src])</append>
      </behavior>
    </completion>
    <completion string="llCSV2List" result="list">
      <description>
Creates a list from a string of comma separated values
    </description>
      <behavior>
        <append>($[string src])</append>
      </behavior>
    </completion>
    <completion string="llListRandomize" result="list">
      <description>
Returns a randomized list of blocks of size stride
    </description>
      <behavior>
        <append>($[list src], $[integer stride])</append>
      </behavior>
    </completion>
    <completion string="llList2ListStrided" result="list">
      <description>
Copies the strided slice of the list from start to end
    </description>
      <behavior>
        <append>($[list src], $[integer start], $[integer end], $[integer stride])</append>
      </behavior>
    </completion>
    <completion string="llGetRegionCorner" result="vector">
      <description>
Returns a vector in meters that is the global location of the south-west corner of the region which the object is in
    </description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="llListInsertList" result="list">
      <description>
Returns a list that contains all the elements from dest but with the elements from src inserted at position start
    </description>
      <behavior>
        <append>($[list dest], $[list src], $[integer start])</append>
      </behavior>
    </completion>
    <completion string="llListFindList" result="integer">
      <description>
Returns the index of the first instance of test in src.
(Returns -1 if not found.)
    </description>
      <behavior>
        <append>($[list src], $[list test])</append>
      </behavior>
    </completion>
    <completion string="llGetObjectName" result="string">
      <description>
Returns the name of the prim which the script is attached to
    </description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="llSetObjectName">
      <description>
Sets the prim&apos;s name to the name parameter
    </description>
      <behavior>
        <append>($[string name])</append>
      </behavior>
    </completion>
    <completion string="llGetDate" result="string">
      <description>
Returns the current date in the UTC time zone in the format YYYY-MM-DD
    </description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="llEdgeOfWorld" result="integer">
      <description>
Checks to see whether the border hit by dir from pos is the edge of the world (has no neighboring region)
    </description>
      <behavior>
        <append>($[vector pos], $[vector dir])</append>
      </behavior>
    </completion>
    <completion string="llGetAgentInfo" result="integer">
      <description>
Returns an integer bitfield containing the agent information about id.
Returns AGENT_FLYING, AGENT_ATTACHMENTS, AGENT_SCRIPTED, AGENT_SITTING, AGENT_ON_OBJECT, AGENT_MOUSELOOK, AGENT_AWAY, AGENT_BUSY, AGENT_TYPING, AGENT_CROUCHING, AGENT_ALWAYS_RUN, AGENT_WALKING and/or AGENT_IN_AIR.
    </description>
      <behavior>
        <append>($[key id])</append>
      </behavior>
    </completion>
    <completion string="llAdjustSoundVolume">
      <description>
Adjusts volume of attached sound (0.0 - 1.0)
    </description>
      <behavior>
        <append>($[float volume])</append>
      </behavior>
    </completion>
    <completion string="llSetSoundQueueing">
      <description>
Sets whether attached sounds wait for the current sound to finish (If queue == TRUE then queuing is enabled, if FALSE queuing is disabled [default])
    </description>
      <behavior>
        <append>($[integer queue])</append>
      </behavior>
    </completion>
    <completion string="llSetSoundRadius">
      <description>
Establishes a hard cut-off radius for audibility of scripted sounds (both attached and triggered)
    </description>
      <behavior>
        <append>($[float radius])</append>
      </behavior>
    </completion>
    <completion string="llKey2Name" result="string">
      <description>
Returns the name of the prim or avatar specified by id.
(The id must be a valid rezzed prim or avatar key in the current simulator, otherwise an empty string is returned.)
    </description>
      <behavior>
        <append>($[key id])</append>
      </behavior>
    </completion>
    <completion string="llSetTextureAnim">
      <description>
Animates the texture on the specified face/faces
    </description>
      <behavior>
        <append>($[integer mode], $[integer face], $[integer sizex], $[integer sizey], $[float start], $[float length], $[float rate])</append>
      </behavior>
    </completion>
    <completion string="llTriggerSoundLimited">
      <description>
Plays sound at volume (0.0 - 1.0), centered at but not attached to object, limited to the box defined by vectors top_north_east and bottom_south_west
    </description>
      <behavior>
        <append>($[string sound], $[float volume], $[vector top_north_east], $[vector bottom_south_west])</append>
      </behavior>
    </completion>
    <completion string="llEjectFromLand">
      <description>
Ejects avatar from the parcel
    </description>
      <behavior>
        <append>($[key avatar])</append>
      </behavior>
    </completion>
    <completion string="llParseString2List" result="list">
      <description>
Breaks src into a list, discarding separators, keeping spacers
(separators and spacers must be lists of strings, maximum of 8 each)
    </description>
      <behavior>
        <append>($[string src], $[list separators], $[list spacers])</append>
      </behavior>
    </completion>
    <completion string="llOverMyLand" result="integer">
      <description>
Returns TRUE if id is over land owned by the script owner, otherwise FALSE
    </description>
      <behavior>
        <append>($[key id])</append>
      </behavior>
    </completion>
    <completion string="llGetLandOwnerAt" result="key">
      <description>
Returns the key of the land owner, returns NULL_KEY if public
    </description>
      <behavior>
        <append>($[vector pos])</append>
      </behavior>
    </completion>
    <completion string="llGetNotecardLine" result="key">
      <description>
Returns line line of notecard name via the dataserver event
    </description>
      <behavior>
        <append>($[string name], $[integer line])</append>
      </behavior>
    </completion>
    <completion string="llGetAgentSize" result="vector">
      <description>
If the avatar is in the same region, returns the size of the bounding box of the requested avatar by id, otherwise returns ZERO_VECTOR
    </description>
      <behavior>
        <append>($[key id])</append>
      </behavior>
    </completion>
    <completion string="llSameGroup" result="integer">
      <description>
Returns TRUE if avatar id is in the same region and has the same active group, otherwise FALSE
    </description>
      <behavior>
        <append>($[key id])</append>
      </behavior>
    </completion>
    <completion string="llUnSit">
      <description>
If avatar identified by id is sitting on the object the script is attached to or is over land owned by the object&apos;s owner, the avatar is forced to stand up
    </description>
      <behavior>
        <append>($[key id])</append>
      </behavior>
    </completion>
    <completion string="llGroundSlope" result="vector">
      <description>
Returns the ground slope below the object position + offset
    </description>
      <behavior>
        <append>($[vector offset])</append>
      </behavior>
    </completion>
    <completion string="llGroundNormal" result="vector">
      <description>
Returns the ground normal below the object position + offset
    </description>
      <behavior>
        <append>($[vector offset])</append>
      </behavior>
    </completion>
    <completion string="llGroundContour" result="vector">
      <description>
Returns the ground contour direction below the object position + offset
    </description>
      <behavior>
        <append>($[vector offset])</append>
      </behavior>
    </completion>
    <completion string="llGetAttached" result="integer">
      <description>
Returns the object&apos;s attachment point, or 0 if not attached
    </description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="llGetFreeMemory" result="integer">
      <description>
Returns the number of free bytes of memory the script can use
    </description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="llGetRegionName" result="string">
      <description>
Returns the current region name
    </description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="llGetRegionTimeDilation" result="float">
      <description>
Returns the current time dilation as a float between 0.0 (full dilation) and 1.0 (no dilation)
    </description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="llGetRegionFPS" result="float">
      <description>
Returns the mean region frames per second
    </description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="llParticleSystem">
      <description>
Creates a particle system based on rules. An empty list removes the particle system.
List format is [ rule1, data1, rule2, data2 ... rulen, datan ].
    </description>
      <behavior>
        <append>($[list rules])</append>
      </behavior>
    </completion>
    <completion string="llGroundRepel">
      <description>
Critically damps to height if within height*0.5 of level (either above ground level, or above the higher of land and water if water == TRUE)
    </description>
      <behavior>
        <append>($[float height], $[integer water], $[float tau])</append>
      </behavior>
    </completion>
    <completion string="llGiveInventoryList">
      <description>
Gives inventory items to target, creating a new folder to put them in
    </description>
      <behavior>
        <append>($[key target], $[string folder], $[list inventory])</append>
      </behavior>
    </completion>
    <completion string="llSetVehicleType">
      <description>
Sets the vehicle to one of the default types
    </description>
      <behavior>
        <append>($[integer type])</append>
      </behavior>
    </completion>
    <completion string="llSetVehicleFloatParam">
      <description>
Sets the specified vehicle float parameter
    </description>
      <behavior>
        <append>($[integer param], $[float value])</append>
      </behavior>
    </completion>
    <completion string="llSetVehicleVectorParam">
      <description>
Sets the specified vehicle vector parameter
    </description>
      <behavior>
        <append>($[integer param], $[vector vec])</append>
      </behavior>
    </completion>
    <completion string="llSetVehicleRotationParam">
      <description>
Sets the specified vehicle rotation parameter
    </description>
      <behavior>
        <append>($[integer param], $[rotation rot])</append>
      </behavior>
    </completion>
    <completion string="llSetVehicleFlags">
      <description>
Sets the enabled bits in &apos;flags&apos;
    </description>
      <behavior>
        <append>($[integer flags])</append>
      </behavior>
    </completion>
    <completion string="llRemoveVehicleFlags">
      <description>
Removes the enabled bits in &apos;flags&apos;
    </description>
      <behavior>
        <append>($[integer flags])</append>
      </behavior>
    </completion>
    <completion string="llSitTarget">
      <description>
Sets the sit location for the prim. If offset == &lt;0,0,0&gt; then the sit target is removed.
    </description>
      <behavior>
        <append>($[vector offset], $[rotation rot])</append>
      </behavior>
    </completion>
    <completion string="llAvatarOnSitTarget" result="key">
      <description>
If an avatar is seated on the sit target, returns the avatar&apos;s key, otherwise NULL_KEY
    </description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="llAddToLandPassList">
      <description>
Adds avatar to the land pass list for hours, or indefinitely if hours is 0
    </description>
      <behavior>
        <append>($[key avatar], $[float hours])</append>
      </behavior>
    </completion>
    <completion string="llSetTouchText">
      <description>
Displays text rather than the default &apos;Touch&apos; in the pie menu
    </description>
      <behavior>
        <append>($[string text])</append>
      </behavior>
    </completion>
    <completion string="llSetSitText">
      <description>
Displays text rather than the default &apos;Sit Here&apos; in the pie menu
    </description>
      <behavior>
        <append>($[string text])</append>
      </behavior>
    </completion>
    <completion string="llSetCameraEyeOffset">
      <description>
Sets the camera eye offset for avatars that sit on the object
    </description>
      <behavior>
        <append>($[vector offset])</append>
      </behavior>
    </completion>
    <completion string="llSetCameraAtOffset">
      <description>
Sets the point the camera is looking at to offset for avatars that sit on the object
    </description>
      <behavior>
        <append>($[vector offset])</append>
      </behavior>
    </completion>
    <completion string="llDumpList2String" result="string">
      <description>
Returns the list in a single string, using separator between the entries
    </description>
      <behavior>
        <append>($[list src], $[string separator])</append>
      </behavior>
    </completion>
    <completion string="llScriptDanger" result="integer">
      <description>
Returns TRUE if pos is over public land, sandbox land, land that doesn&apos;t allow everyone to edit and build, or land that doesn&apos;t allow outside scripts
    </description>
      <behavior>
        <append>($[vector pos])</append>
      </behavior>
    </completion>
    <completion string="llDialog">
      <description>
Shows a dialog box on the avatar&apos;s screen with a message and up to 12 buttons.
If a button is pressed, the avatar says the text of the button label on chat_channel.
    </description>
      <behavior>
        <append>($[key avatar], $[string message], $[list buttons], $[integer chat_channel])</append>
      </behavior>
    </completion>
    <completion string="llVolumeDetect">
      <description>
If detect = TRUE, object works much like Phantom, but triggers collision_start and collision_end events when other objects start and stop interpenetrating.
Must be applied to the root prim.
    </description>
      <behavior>
        <append>($[integer detect])</append>
      </behavior>
    </completion>
    <completion string="llResetOtherScript">
      <description>
Resets script name
    </description>
      <behavior>
        <append>($[string name])</append>
      </behavior>
    </completion>
    <completion string="llGetScriptState" result="integer">
      <description>
Returns TRUE if the script name is running
    </description>
      <behavior>
        <append>($[string name])</append>
      </behavior>
    </completion>
    <completion string="llRemoteLoadScript">
      <description>
DEPRECATED!  Please use llRemoteLoadScriptPin instead.
    </description>
      <behavior>
        <append>($[key target], $[string name], $[integer running], $[integer start_param])</append>
      </behavior>
    </completion>
    <completion string="llSetRemoteScriptAccessPin">
      <description>
If pin is set to a non-zero number, allows a prim to have scripts remotely loaded via llRemoteLoadScriptPin when it passes in the correct pin. Otherwise, llRemoteLoadScriptPin is ignored.
    </description>
      <behavior>
        <append>($[integer pin])</append>
      </behavior>
    </completion>
    <completion string="llRemoteLoadScriptPin">
      <description>
Copies script name onto target, if the owner of this scripted object can modify target and is in the same region, and the matching pin is used.
If running == TRUE, starts the script with start_param.
    </description>
      <behavior>
        <append>($[key target], $[string name], $[integer pin], $[integer running], $[integer start_param])</append>
      </behavior>
    </completion>
    <completion string="llOpenRemoteDataChannel">
      <description>
Creates a channel to listen for XML-RPC calls, and will trigger a remote_data event with channel id once it is available
    </description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="llSendRemoteData" result="key">
      <description>
Sends an XML-RPC request to dest through channel with payload of channel (in a string), integer idata and string sdata.
Returns a key that is the message_id for the resulting remote_data events.
    </description>
      <behavior>
        <append>($[key channel], $[string dest], $[integer idata], $[string sdata])</append>
      </behavior>
    </completion>
    <completion string="llRemoteDataReply">
      <description>
Sends an XML-RPC reply to message_id on channel with payload of string sdata and integer idata
    </description>
      <behavior>
        <append>($[key channel], $[key message_id], $[string sdata], $[integer idata])</append>
      </behavior>
    </completion>
    <completion string="llCloseRemoteDataChannel">
      <description>
Closes XML-RPC channel
    </description>
      <behavior>
        <append>($[key channel])</append>
      </behavior>
    </completion>
    <completion string="llMD5String" result="string">
      <description>
Returns a string of 32 hex characters that is a RSA Data Security, Inc. MD5 Message-Digest Algorithm of src with nonce
    </description>
      <behavior>
        <append>($[string src], $[integer nonce])</append>
      </behavior>
    </completion>
    <completion string="llSetPrimitiveParams">
      <description>
Sets the prim&apos;s parameters according to rules
    </description>
      <behavior>
        <append>($[list rules])</append>
      </behavior>
    </completion>
    <completion string="llStringToBase64" result="string">
      <description>
Converts a string to the Base64 representation of the string
    </description>
      <behavior>
        <append>($[string str])</append>
      </behavior>
    </completion>
    <completion string="llBase64ToString" result="string">
      <description>
Converts a Base64 string to a conventional string.
If the conversion creates any unprintable characters, they are converted to spaces.
    </description>
      <behavior>
        <append>($[string str])</append>
      </behavior>
    </completion>
    <completion string="llXorBase64Strings" result="string" deprecated="true">
      <description>
DEPRECATED!  Please use llXorBase64 instead.
Incorrectly performs an exclusive or on two Base64 strings and returns a Base64 string. str2 repeats if it is shorter than str1. Retained for backwards compatability.
    </description>
      <behavior>
        <append>($[string str1], $[string str2])</append>
      </behavior>
    </completion>
    <completion string="llRemoteDataSetRegion" deprecated="true">
      <description>
DEPRECATED!  Please use llOpenRemoteDataChannel instead.
If an object using remote data channels changes regions, you must call this function to reregister the remote data channels. This call is not needed if the prim does not change regions.
    </description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="llLog10" result="float">
      <description>
Returns the base 10 logarithm of val. Returns zero if val &lt;= 0.
    </description>
      <behavior>
        <append>($[float val])</append>
      </behavior>
    </completion>
    <completion string="llLog" result="float">
      <description>
Returns the natural logarithm of val. Returns zero if val &lt;= 0.
    </description>
      <behavior>
        <append>($[float val])</append>
      </behavior>
    </completion>
    <completion string="llGetAnimationList" result="list">
      <description>
Returns a list of keys of playing animations for avatar described by id
    </description>
      <behavior>
        <append>($[key id])</append>
      </behavior>
    </completion>
    <completion string="llSetParcelMusicURL">
      <description>
Sets the streaming audio URL for the parcel which the object is on
    </description>
      <behavior>
        <append>($[string url])</append>
      </behavior>
    </completion>
    <completion string="llGetRootPosition" result="vector">
      <description>
Returns the position (in region coordinates) of the root prim of the object which the script is attached to
    </description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="llGetRootRotation" result="rotation">
      <description>
Returns the rotation (relative to the region) of the root prim of the object which the script is attached to
    </description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="llGetObjectDesc" result="string">
      <description>
Returns the description of the prim the script is attached to
    </description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="llSetObjectDesc">
      <description>
Sets the prim&apos;s description to desc
    </description>
      <behavior>
        <append>($[string desc])</append>
      </behavior>
    </completion>
    <completion string="llGetCreator" result="key">
      <description>
Returns a key for the creator of the prim
    </description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="llGetTimestamp" result="string">
      <description>
Returns the timestamp in the UTC time zone in the format: YYYY-MM-DDThh:mm:ss.ff..fZ
    </description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="llSetLinkAlpha">
      <description>
If a prim exists in the link chain at linknumber, sets face to alpha
    </description>
      <behavior>
        <append>($[integer linknumber], $[float alpha], $[integer face])</append>
      </behavior>
    </completion>
    <completion string="llGetNumberOfPrims" result="integer">
      <description>
Returns the number of prims in a link set the script is attached to
    </description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="llGetNumberOfNotecardLines" result="key">
      <description>
Returns number of lines in notecard name via the dataserver event (cast return value to integer)
    </description>
      <behavior>
        <append>($[string name])</append>
      </behavior>
    </completion>
    <completion string="llGetBoundingBox" result="list">
      <description>
Returns the bounding box around the object (including any linked prims) relative to its root prim, in a list in the format [ (vector) min_corner, (vector) max_corner ]
    </description>
      <behavior>
        <append>($[key object])</append>
      </behavior>
    </completion>
    <completion string="llGetGeometricCenter" result="vector">
      <description>
Returns the geometric center of the linked set the script is attached to
    </description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="llGetPrimitiveParams" result="list">
      <description>
Returns the primitive parameters specified in the params list
    </description>
      <behavior>
        <append>($[list params])</append>
      </behavior>
    </completion>
    <completion string="llIntegerToBase64" result="string">
      <description>
Returns a string that is a Base64 big endian encode of number
    </description>
      <behavior>
        <append>($[integer number])</append>
      </behavior>
    </completion>
    <completion string="llBase64ToInteger" result="integer">
      <description>
Returns an integer that is the str Base64 decoded as a big endian integer
    </description>
      <behavior>
        <append>($[string str])</append>
      </behavior>
    </completion>
    <completion string="llGetGMTclock" result="float">
      <description>
Returns the time in seconds since midnight GMT
    </description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="llGetSimulatorHostname" result="string">
      <description>
Returns the hostname of the machine which the script is running on (same as string in viewer Help dialog)
    </description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="llSetLocalRot">
      <description>
Sets the rotation of a child prim relative to the root prim
    </description>
      <behavior>
        <append>($[rotation rot])</append>
      </behavior>
    </completion>
    <completion string="llParseStringKeepNulls" result="list">
      <description>
Breaks src into a list, discarding separators, keeping spacers, keeping any null values generated (separators and spacers must be lists of strings, maximum of 8 each)
    </description>
      <behavior>
        <append>($[string src], $[list separators], $[list spacers])</append>
      </behavior>
    </completion>
    <completion string="llRezAtRoot">
      <description>
Instantiates owner&apos;s inventory object rotated to rot with its root at pos, moving at vel, using param as the start parameter
    </description>
      <behavior>
        <append>($[string inventory], $[vector pos], $[vector vel], $[rotation rot], $[integer param])</append>
      </behavior>
    </completion>
    <completion string="llGetObjectPermMask" result="integer">
      <description>
Returns the requested permission mask for the root object the task is attached to
    </description>
      <behavior>
        <append>($[integer mask])</append>
      </behavior>
    </completion>
    <completion string="llSetObjectPermMask">
      <description>
Sets the given permission mask to the new value on the root object the task is attached to (requires God Mode)
    </description>
      <behavior>
        <append>($[integer mask], $[integer value])</append>
      </behavior>
    </completion>
    <completion string="llGetInventoryPermMask" result="integer">
      <description>
Returns the requested permission mask for the inventory item
    </description>
      <behavior>
        <append>($[string item], $[integer mask])</append>
      </behavior>
    </completion>
    <completion string="llSetInventoryPermMask">
      <description>
Sets the given permission mask to the new value on the inventory item (requires God Mode)
    </description>
      <behavior>
        <append>($[string item], $[integer mask], $[integer value])</append>
      </behavior>
    </completion>
    <completion string="llGetInventoryCreator" result="key">
      <description>
Returns a key for the creator of the inventory item
    </description>
      <behavior>
        <append>($[string item])</append>
      </behavior>
    </completion>
    <completion string="llOwnerSay">
      <description>
Says msg to owner only. (Owner must be in the same region.)
    </description>
      <behavior>
        <append>($[string msg])</append>
      </behavior>
    </completion>
    <completion string="llRequestSimulatorData" result="key">
      <description>
Requests data about simulator. When data is available the dataserver event will be raised.
    </description>
      <behavior>
        <append>($[string simulator], $[integer data])</append>
      </behavior>
    </completion>
    <completion string="llForceMouselook">
      <description>
If mouselook is TRUE, any avatar that sits upon the prim will be forced into mouselook mode
    </description>
      <behavior>
        <append>($[integer mouselook])</append>
      </behavior>
    </completion>
    <completion string="llGetObjectMass" result="float">
      <description>
Returns the mass of the avatar or object in the region
    </description>
      <behavior>
        <append>($[key id])</append>
      </behavior>
    </completion>
    <completion string="llListReplaceList" result="list">
      <description>
Returns a list that is dest with start through end removed and src inserted at start
    </description>
      <behavior>
        <append>($[list dest], $[list src], $[integer start], $[integer end])</append>
      </behavior>
    </completion>
    <completion string="llLoadURL">
      <description>
Shows a dialog to avatar offering to load the web page at url with a message.
If user clicks yes, launches the page in their web browser.
    </description>
      <behavior>
        <append>($[key avatar], $[string message], $[string url])</append>
      </behavior>
    </completion>
    <completion string="llParcelMediaCommandList">
      <description>
Sends a list of commands, some with arguments, to a parcel to control the playback of movies and other media
    </description>
      <behavior>
        <append>($[list command])</append>
      </behavior>
    </completion>
    <completion string="llParcelMediaQuery" result="list">
      <description>
Returns a list containing results of the sent query
    </description>
      <behavior>
        <append>($[list query])</append>
      </behavior>
    </completion>
    <completion string="llModPow" result="integer">
      <description>
Returns a raised to the b power, mod c. ( (a**b)%c )
b is capped at 0xFFFF (16 bits).
    </description>
      <behavior>
        <append>($[integer a], $[integer b], $[integer c])</append>
      </behavior>
    </completion>
    <completion string="llGetInventoryType" result="integer">
      <description>
Returns the type of the inventory item name
    </description>
      <behavior>
        <append>($[string name])</append>
      </behavior>
    </completion>
    <completion string="llSetPayPrice">
      <description>
Sets the default amount on the dialog that appears when someone chooses to pay this prim
    </description>
      <behavior>
        <append>($[integer price], $[list quick_pay_buttons])</append>
      </behavior>
    </completion>
    <completion string="llGetCameraPos" result="vector">
      <description>
Returns the current camera position for the agent the task has permissions for
    </description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="llGetCameraRot" result="rotation">
      <description>
Returns the current camera orientation for the agent the task has permissions for
    </description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="llSetPrimURL">
      <description>
Updates the URL for the web page shown on the sides of the object
    </description>
      <behavior>
        <append>($[string url])</append>
      </behavior>
    </completion>
    <completion string="llRefreshPrimURL">
      <description>
Reloads the web page shown on the sides of the object
    </description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="llEscapeURL" result="string">
      <description>
Returns an escaped/encoded version of url, replacing spaces with %20 etc.
    </description>
      <behavior>
        <append>($[string url])</append>
      </behavior>
    </completion>
    <completion string="llUnescapeURL" result="string">
      <description>
Returns an unescaped/ unencoded version of url, replacing %20 with spaces etc.
    </description>
      <behavior>
        <append>($[string url])</append>
      </behavior>
    </completion>
    <completion string="llMapDestination">
      <description>
Opens the World Map centered on the region simname with pos highlighted. (NOTE: look_at currently does nothing.)
Only works for scripts attached to avatar, or during touch events.
    </description>
      <behavior>
        <append>($[string simname], $[vector pos], $[vector look_at])</append>
      </behavior>
    </completion>
    <completion string="llAddToLandBanList">
      <description>
Adds avatar to the land ban list for hours, or indefinitely if hours is 0
    </description>
      <behavior>
        <append>($[key avatar], $[float hours])</append>
      </behavior>
    </completion>
    <completion string="llRemoveFromLandPassList">
      <description>
Removes avatar from the land pass list
    </description>
      <behavior>
        <append>($[key avatar])</append>
      </behavior>
    </completion>
    <completion string="llRemoveFromLandBanList">
      <description>
Removes avatar from the land ban list
    </description>
      <behavior>
        <append>($[key avatar])</append>
      </behavior>
    </completion>
    <completion string="llSetCameraParams">
      <description>
Sets multiple camera parameters at once.
List format is [ rule1, data1, rule2, data2 ... rulen, datan ].
    </description>
      <behavior>
        <append>($[list rules])</append>
      </behavior>
    </completion>
    <completion string="llClearCameraParams">
      <description>
Resets all camera parameters to default values and turns off scripted camera control
    </description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="llListStatistics" result="float">
      <description>
Performs statistical aggregate functions on list src using LIST_STAT_* operations
    </description>
      <behavior>
        <append>($[integer operation], $[list src])</append>
      </behavior>
    </completion>
    <completion string="llGetUnixTime" result="integer">
      <description>
Returns the number of seconds elapsed since 00:00 hours, Jan 1, 1970 UTC from the system clock
    </description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="llGetParcelFlags" result="integer">
      <description>
Returns a mask of the parcel flags (PARCEL_FLAG_*) for the parcel that includes the point pos
    </description>
      <behavior>
        <append>($[vector pos])</append>
      </behavior>
    </completion>
    <completion string="llGetRegionFlags" result="integer">
      <description>
Returns the region flags (REGION_FLAG_*) for the region the object is in
    </description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="llXorBase64StringsCorrect" result="string" deprecated="true">
      <description>
DEPRECATED! Please use llXorBase64 instead.
Incorrectly performs an exclusive or on two Base64 strings and returns a Base64 string.
str2 repeats if it is shorter than str1. Retained for backwards compatability.
    </description>
      <behavior>
        <append>($[string str1], $[string str2])</append>
      </behavior>
    </completion>
    <completion string="llHTTPRequest" result="key">
      <description>
Sends an HTTP request to the specified url with the body of the request and parameters
    </description>
      <behavior>
        <append>($[string url], $[list parameters], $[string body])</append>
      </behavior>
    </completion>
    <completion string="llResetLandBanList">
      <description>
Removes all Residents from the land ban list
    </description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="llResetLandPassList">
      <description>
Removes all Residents from the land access/pass list
    </description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="llGetObjectPrimCount" result="integer">
      <description>
Returns the total number of prims for an object in the region
    </description>
      <behavior>
        <append>($[key object_id])</append>
      </behavior>
    </completion>
    <completion string="llGetParcelPrimOwners" result="list">
      <description>
Returns a list of all Residents who own objects on the parcel at pos and with individual prim counts.
Requires owner-like permissions for the parcel.
    </description>
      <behavior>
        <append>($[vector pos])</append>
      </behavior>
    </completion>
    <completion string="llGetParcelPrimCount" result="integer">
      <description>
Returns the number of prims on the parcel at pos of the given category.
Categories: PARCEL_COUNT_TOTAL, _OWNER, _GROUP, _OTHER, _SELECTED, _TEMP.
    </description>
      <behavior>
        <append>($[vector pos], $[integer category], $[integer sim_wide])</append>
      </behavior>
    </completion>
    <completion string="llGetParcelMaxPrims" result="integer">
      <description>
Returns the maximum number of prims allowed on the parcel at pos
    </description>
      <behavior>
        <append>($[vector pos], $[integer sim_wide])</append>
      </behavior>
    </completion>
    <completion string="llGetParcelDetails" result="list">
      <description>
Returns the parcel details specified in params for the parcel at pos.
Params is one or more of: PARCEL_DETAILS_NAME, _DESC, _OWNER, _GROUP, _AREA, _ID, _SEE_AVATARS.
    </description>
      <behavior>
        <append>($[vector pos], $[list params])</append>
      </behavior>
    </completion>
    <completion string="llSetLinkPrimitiveParams">
      <description>
Sets primitive parameters for linknumber based on rules
    </description>
      <behavior>
        <append>($[integer linknumber], $[list rules])</append>
      </behavior>
    </completion>
    <completion string="llSetLinkTexture">
      <description>
Sets the texture of face for a task that exists in the link chain at linknumber
    </description>
      <behavior>
        <append>($[integer linknumber], $[string texture], $[integer face])</append>
      </behavior>
    </completion>
    <completion string="llStringTrim" result="string">
      <description>
Trims the leading and/or trailing white spaces from a string.
trim_type can be STRING_TRIM, STRING_TRIM_HEAD or STRING_TRIM_TAIL.
    </description>
      <behavior>
        <append>($[string src], $[integer trim_type])</append>
      </behavior>
    </completion>
    <completion string="llRegionSay">
      <description>
Broadcasts msg on channel (not 0) that can be heard anywhere in the region by a script listening on channel
    </description>
      <behavior>
        <append>($[integer channel], $[string msg])</append>
      </behavior>
    </completion>
    <completion string="llGetObjectDetails" result="list">
      <description>
Returns the object details specified in params for the object with key id.
Params are OBJECT_NAME, _DESC, _POS, _ROT, _VELOCITY, _OWNER, _GROUP, _CREATOR.
    </description>
      <behavior>
        <append>($[key id], $[list params])</append>
      </behavior>
    </completion>
    <completion string="llSetClickAction">
      <description>
Sets the action performed when a prim is clicked upon
    </description>
      <behavior>
        <append>($[integer action])</append>
      </behavior>
    </completion>
    <completion string="llGetRegionAgentCount" result="integer">
      <description>
Returns the number of avatars in the region
    </description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="llTextBox">
      <description>
Shows a window on the avatar&apos;s screen with the message.
It contains a text box for input, and if entered that text is chatted on chat_channel.
    </description>
      <behavior>
        <append>($[key avatar], $[string message], $[integer chat_channel])</append>
      </behavior>
    </completion>
    <completion string="llGetAgentLanguage" result="string">
      <description>
Returns the language code of the preferred interface language of the avatar
    </description>
      <behavior>
        <append>($[key avatar])</append>
      </behavior>
    </completion>
    <completion string="llDetectedTouchUV" result="vector">
      <description>
Returns the u and v coordinates in the first two components of a vector, for the texture coordinates where the prim number was touched in a triggered touch event
    </description>
      <behavior>
        <append>($[integer number])</append>
      </behavior>
    </completion>
    <completion string="llDetectedTouchFace" result="integer">
      <description>
Returns the index of the face where the avatar number clicked in a triggered touch event
    </description>
      <behavior>
        <append>($[integer number])</append>
      </behavior>
    </completion>
    <completion string="llDetectedTouchPos" result="vector">
      <description>
Returns the position where the object number was touched in a triggered touch event
    </description>
      <behavior>
        <append>($[integer number])</append>
      </behavior>
    </completion>
    <completion string="llDetectedTouchNormal" result="vector">
      <description>
Returns the surface normal for a triggered touch event
    </description>
      <behavior>
        <append>($[integer number])</append>
      </behavior>
    </completion>
    <completion string="llDetectedTouchBinormal" result="vector">
      <description>
Returns the surface binormal for a triggered touch event
    </description>
      <behavior>
        <append>($[integer number])</append>
      </behavior>
    </completion>
    <completion string="llDetectedTouchST" result="vector">
      <description>
Returns the s and t coordinates in the first two components of a vector, for the surface coordinates where the prim was touched in a triggered touch event
    </description>
      <behavior>
        <append>($[integer number])</append>
      </behavior>
    </completion>
    <completion string="llSHA1String" result="string">
      <description>
Returns a string of 40 hex characters that is the SHA1 security Hash of src
    </description>
      <behavior>
        <append>($[string src])</append>
      </behavior>
    </completion>
    <completion string="llGetFreeURLs" result="integer">
      <description>
Returns the number of available URLs for the current script
    </description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="llRequestURL" result="key">
      <description>
Requests one HTTP:// url for use by this object.
An http_request event is triggered with the results.
    </description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="llRequestSecureURL" result="key">
      <description>
Requests one HTTPS:// (SSL) url for use by this object.
An http_request event is triggered with the results.
    </description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="llReleaseURL">
      <description>
Releases the specified URL, it will no longer be usable
    </description>
      <behavior>
        <append>($[string url])</append>
      </behavior>
    </completion>
    <completion string="llHTTPResponse">
      <description>
Responds to request_id with status and body
    </description>
      <behavior>
        <append>($[key request_id], $[integer status], $[string body])</append>
      </behavior>
    </completion>
    <completion string="llGetHTTPHeader" result="string">
      <description>
Returns the value for header for request_id
    </description>
      <behavior>
        <append>($[key request_id], $[string header])</append>
      </behavior>
    </completion>
    <completion string="llSetPrimMediaParams" result="integer">
      <description>
Sets the media params for a particular face on an object. If media is not already on this object, add it.
List is a set of name/value pairs in no particular order. Params not specified are unchanged, or if new media is added then set to the default specified.
    </description>
      <behavior>
        <append>($[integer face], $[list params])</append>
      </behavior>
    </completion>
    <completion string="llGetPrimMediaParams" result="list">
      <description>
Returns the media params for a particular face on an object, given the desired list of names, in the order requested.
(Returns an empty list if no media exists on the face.)
    </description>
      <behavior>
        <append>($[integer face], $[list params])</append>
      </behavior>
    </completion>
    <completion string="llClearPrimMedia" result="integer">
      <description>
Clears (deletes) the media and all params from the given face
    </description>
      <behavior>
        <append>($[integer face])</append>
      </behavior>
    </completion>
    <completion string="llSetLinkPrimitiveParamsFast">
      <description>
Set primitive parameters for linknumber based on rules
    </description>
      <behavior>
        <append>($[integer linknumber], $[list rules])</append>
      </behavior>
    </completion>
    <completion string="llGetLinkPrimitiveParams" result="list">
      <description>
Get primitive parameters for linknumber based on rules
    </description>
      <behavior>
        <append>($[integer linknumber], $[list rules])</append>
      </behavior>
    </completion>
    <completion string="llLinkParticleSystem">
      <description>
Creates a particle system based on rules. Empty list removes particle system from object.
List format is [ rule1, data1, rule2, data2 ... rulen, datan ].
    </description>
      <behavior>
        <append>($[integer linknumber], $[list rules])</append>
      </behavior>
    </completion>
    <completion string="llSetLinkTextureAnim">
      <description>
Animate the texture on the specified prim&apos;s face/faces
    </description>
      <behavior>
        <append>($[integer link], $[integer mode], $[integer face], $[integer sizex], $[integer sizey], $[float start], $[float length], $[float rate])</append>
      </behavior>
    </completion>
    <completion string="llGetLinkNumberOfSides" result="integer">
      <description>
Returns the number of sides of the specified linked prim
    </description>
      <behavior>
        <append>($[integer link])</append>
      </behavior>
    </completion>
    <completion string="llGetUsername" result="string">
      <description>
Returns the single-word username of an avatar, iff the avatar is in the current region, otherwise the empty string
    </description>
      <behavior>
        <append>($[key id])</append>
      </behavior>
    </completion>
    <completion string="llRequestUsername" result="key">
      <description>
Requests single-word username of an avatar. When data is available the dataserver event will be raised.
    </description>
      <behavior>
        <append>($[key id])</append>
      </behavior>
    </completion>
    <completion string="llGetDisplayName" result="string">
      <description>
Returns the name of an avatar, iff the avatar is in the current simulator, and the name has been cached, otherwise the same as llGetUsername. Use llRequestDisplayName if you absolutely must have the display name.
    </description>
      <behavior>
        <append>($[key id])</append>
      </behavior>
    </completion>
    <completion string="llRequestDisplayName" result="key">
      <description>
Requests name of an avatar. When data is available the dataserver event will be raised.
    </description>
      <behavior>
        <append>($[key id])</append>
      </behavior>
    </completion>
    <completion string="llGetEnv" result="string">
      <description>
Returns a string with the requested data about the region
    </description>
      <behavior>
        <append>($[string name])</append>
      </behavior>
    </completion>
    <completion string="llRegionSayTo">
      <description>
Sends msg on channel (not DEBUG_CHANNEL) directly to prim or avatar target anywhere within the region
    </description>
      <behavior>
        <append>($[key target], $[integer channel], $[string msg])</append>
      </behavior>
    </completion>
    <completion string="llSetMemoryLimit" result="integer">
      <description>
Request limit bytes to be reserved for this script.
Returns a success/failure flag (STATUS_OK when sucessful, another of the STATUS_* flags on failure) for whether the memory limit was set.
Only relevant for Mono-compiled scripts.
    </description>
      <behavior>
        <append>($[integer limit])</append>
      </behavior>
    </completion>
    <completion string="llGetMemoryLimit" result="integer">
      <description>
Get the maximum memory a script can use.
Returns the integer amount of memory the script can use in bytes.
    </description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="llSetLinkMedia" result="integer">
      <description>
Set the media params for a particular face on linked prim. List is a set of name/value pairs (in no particular order). If media is not already on this object, add it. Params not specified are unchanged, or if new media is added set to the default specified.
    </description>
      <behavior>
        <append>($[integer link], $[integer face], $[list params])</append>
      </behavior>
    </completion>
    <completion string="llGetLinkMedia" result="list">
      <description>
Get the media params for a particular face on linked prim, given the desired list of names. Returns a list of values in the order requested. Returns an empty list if no media exists on the face.
    </description>
      <behavior>
        <append>($[integer link], $[integer face], $[list params])</append>
      </behavior>
    </completion>
    <completion string="llClearLinkMedia" result="integer">
      <description>
Clears (deletes) the media and all params from the given face on linked prim
    </description>
      <behavior>
        <append>($[integer link], $[integer face])</append>
      </behavior>
    </completion>
    <completion string="llSetLinkCamera">
      <description>
Sets the camera eye offset, and the offset that camera is looking at, for avatars that sit on the linked prim.
The two vector parameters are offsets relative to the object&apos;s center and expressed in local coordinates.
    </description>
      <behavior>
        <append>($[integer link], $[vector eye], $[vector at])</append>
      </behavior>
    </completion>
    <completion string="llSetContentType">
      <description>
Set the Internet media type of an LSL HTTP server response.
content_type may be one of CONTENT_TYPE_TEXT (default) &quot;text/plain&quot;, or CONTENT_TYPE_HTML &quot;text/html&quot;, only valid for embedded browsers on content owned by the person viewing. Falls back to &quot;text/plain&quot; otherwise.
    </description>
      <behavior>
        <append>($[key request_id], $[integer content_type])</append>
      </behavior>
    </completion>
    <completion string="llLinkSitTarget">
      <description>
Set the sit location for this object (if offset == &lt;0,0,0&gt; clear it)
    </description>
      <behavior>
        <append>($[integer link], $[vector offset], $[rotation rot])</append>
      </behavior>
    </completion>
    <completion string="llAvatarOnLinkSitTarget" result="key">
      <description>
If an avatar is sitting on the sit target, return the avatar&apos;s key, NULL_KEY otherwise
    </description>
      <behavior>
        <append>($[integer link])</append>
      </behavior>
    </completion>
    <completion string="llAvatarOnLinkSitTarget" result="key">
      <description>
If an avatar is sitting on the sit target, return the avatar&apos;s key, NULL_KEY otherwise
    </description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="llSetVelocity">
      <description>
Sets an objects velocity, in local coords if local == TRUE (if the script is physical)
    </description>
      <behavior>
        <append>($[vector velocity], $[integer local])</append>
      </behavior>
    </completion>
    <completion string="llCastRay" result="list">
      <description>
Casts a ray into the physics world from &apos;start&apos; to &apos;end&apos; and returns data according to details in params
    </description>
      <behavior>
        <append>($[vector start], $[vector end], $[list params])</append>
      </behavior>
    </completion>
    <completion string="llGetMassMKS" result="float">
      <description>
Returns the mass of the linkset in kilograms
    </description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="llSetPhysicsMaterial">
      <description>
Sets the requested attributes of the root object&apos;s physics material
    </description>
      <behavior>
        <append>($[integer flags], $[float gravity_multiplier], $[float restitution], $[float friction], $[float density])</append>
      </behavior>
    </completion>
    <completion string="llGetPhysicsMaterial" result="list">
      <description>
Returns the gravity multiplier, restitution, friction, and density of the linkset as a list in that order
    </description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="llManageEstateAccess" result="integer">
      <description>
To add or remove agents from the estate&apos;s agent access or ban lists or groups from the estate&apos;s group access list.
Only works for objects owned by the Estate Owner or an Estate Manager.
Returns TRUE if successful and FALSE if throttled, on invalid action, on invalid or null id, or if object owner is not allowed to manage the estate.
&apos;action&apos; can be any of: ESTATE_ACCESS_ALLOWED_[AGENT/GROUP]_[ADD/REMOVE] or ESTATE_ACCESS_BANNED_AGENT_[ADD/REMOVE].
    </description>
      <behavior>
        <append>($[integer action], $[key id])</append>
      </behavior>
    </completion>
    <completion string="llSetKeyframedMotion">
      <description>
Requests that a nonphysical object be keyframed according to keyframe list
    </description>
      <behavior>
        <append>($[list keyframes], $[list options])</append>
      </behavior>
    </completion>
    <completion string="llTransferLindenDollars" result="key">
      <description>
Transfer amount of linden dollars (L$) from script owner to destination. Returns a key to a corresponding transaction_result event for the success of the transfer.
    </description>
      <behavior>
        <append>($[key destination], $[integer amount])</append>
      </behavior>
    </completion>
    <completion string="llGetParcelMusicURL" result="string">
      <description>
Gets the streaming audio URL for the parcel of land on which the object is located
    </description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="llScriptProfiler">
      <description>
Enabled or disables script profiling options. Currently only supports PROFILE_SCRIPT_MEMORY (mono only) and PROFILE_NONE.
MAY SIGNIFICANTLY REDUCE SCRIPT PERFORMANCE!
    </description>
      <behavior>
        <append>($[integer flags])</append>
      </behavior>
    </completion>
    <completion string="llGetSPMaxMemory" result="integer">
      <description>
Returns the maximum used memory for the current script. Only valid after using PROFILE_SCRIPT_MEMORY. Non-mono scripts always use 16k.
    </description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="llGetUsedMemory" result="integer">
      <description>
Returns the current used memory for the current script. Non-mono scripts always use 16k.
    </description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="llSetAngularVelocity">
      <description>
Sets an objects angular velocity, in local coords if local == TRUE (if the script is physical)
    </description>
      <behavior>
        <append>($[vector angular_velocity], $[integer local])</append>
      </behavior>
    </completion>
    <completion string="llSetRegionPos" result="integer">
      <description>
Sets the position anywhere within the region (if the object isn&apos;t physical)
    </description>
      <behavior>
        <append>($[vector pos])</append>
      </behavior>
    </completion>
    <completion string="llGetAgentList" result="list">
      <description>
Requests a list of agents currently in the region, limited by the scope parameter
    </description>
      <behavior>
        <append>($[integer scope], $[list options])</append>
      </behavior>
    </completion>
    <completion string="llAttachToAvatarTemp">
      <description>
Attaches the object to the avatar who has granted permission to the script, with the exception that the object will not create new inventory for the user, and will disappear on detach or disconnect
    </description>
      <behavior>
        <append>($[integer attach_point])</append>
      </behavior>
    </completion>
    <completion string="llTeleportAgent">
      <description>
Requests a teleport of avatar to a landmark stored in the object&apos;s inventory. If no landmark is provided (an empty string), the avatar is teleported to the location position in the current region. In either case, the avatar is turned to face the position given by look_at in local coordinates.
    </description>
      <behavior>
        <append>($[key avatar], $[string landmark], $[vector position], $[vector look_at])</append>
      </behavior>
    </completion>
    <completion string="llTeleportAgentGlobalCoords">
      <description>
Teleports an agent to set of a region_coordinates within a region at the specified global_coordinates. The agent lands facing the position defined by look_at local coordinates.
A region&apos;s global coordinates can be retrieved using llRequestSimulatorData(region_name, DATA_SIM_POS).
    </description>
      <behavior>
        <append>($[key agent], $[vector global_coordinates], $[vector region_coordinates], $[vector look_at])</append>
      </behavior>
    </completion>
    <completion string="llGenerateKey" result="key">
      <description>
Return a unique generated key
    </description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="llNavigateTo">
      <description>
For AI Character: Navigate to destination
    </description>
      <behavior>
        <append>($[vector point], $[list options])</append>
      </behavior>
    </completion>
    <completion string="llCreateCharacter">
      <description>
Convert linkset to AI Character which can navigate the world
    </description>
      <behavior>
        <append>($[list options])</append>
      </behavior>
    </completion>
    <completion string="llPursue">
      <description>
For AI Character: Chase after a target
    </description>
      <behavior>
        <append>($[key target], $[list options])</append>
      </behavior>
    </completion>
    <completion string="llWanderWithin">
      <description>
For AI Character: Wander within a specified volume
    </description>
      <behavior>
        <append>($[vector center], $[vector radius], $[list options])</append>
      </behavior>
    </completion>
    <completion string="llWanderWithin">
      <description>
For AI Character: Wander within a specified volume
    </description>
      <behavior>
        <append>($[vector center], $[float radius], $[list options])</append>
      </behavior>
    </completion>
    <completion string="llFleeFrom">
      <description>
For AI Character: Flee from a point
    </description>
      <behavior>
        <append>($[vector source], $[float radius], $[list options])</append>
      </behavior>
    </completion>
    <completion string="llPatrolPoints">
      <description>
For AI Character: Patrol a list of points
    </description>
      <behavior>
        <append>($[list points], $[list options])</append>
      </behavior>
    </completion>
    <completion string="llExecCharacterCmd">
      <description>
For AI Character: Execute a character command
    </description>
      <behavior>
        <append>($[integer cmd], $[list options])</append>
      </behavior>
    </completion>
    <completion string="llDeleteCharacter">
      <description>
Convert linkset from AI Character to Physics object
    </description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="llUpdateCharacter">
      <description>
Change the AI Character&apos;s settings
    </description>
      <behavior>
        <append>($[list options])</append>
      </behavior>
    </completion>
    <completion string="llEvade">
      <description>
For AI Character: Evade a specified target
    </description>
      <behavior>
        <append>($[key target], $[list options])</append>
      </behavior>
    </completion>
    <completion string="llGetClosestNavPoint" result="list">
      <description>
For AI Character: Get the closest navigable point to the point provided
    </description>
      <behavior>
        <append>($[vector point], $[list options])</append>
      </behavior>
    </completion>
    <completion string="llGetStaticPath" result="list">
      <description>
Returns a list of position vectors indicating pathfinding waypoints between positions at start and end, for a character of a given radius
    </description>
      <behavior>
        <append>($[vector start], $[vector end], $[float radius], $[list params])</append>
      </behavior>
    </completion>
    <completion string="llGetSimStats" result="float">
      <description>
Returns the value of a particular simulator statistic
    </description>
      <behavior>
        <append>($[integer stat_type])</append>
      </behavior>
    </completion>
    <completion string="llSetAnimationOverride">
      <description>
Set the animation that will play for the given animation state. Requires PERMISSION_OVERRIDE_ANIMATIONS.
    </description>
      <behavior>
        <append>($[string anim_state], $[string anim])</append>
      </behavior>
    </completion>
    <completion string="llGetAnimationOverride" result="string">
      <description>
Get the name of the animation currently set for the given animation state. Requires either PERMISSION_OVERRIDE_ANIMATIONS or PERMISSION_TRIGGER_ANIMATION.
    </description>
      <behavior>
        <append>($[string anim_state])</append>
      </behavior>
    </completion>
    <completion string="llResetAnimationOverride">
      <description>
Resets the animation for the given animation state to the default. The special value &quot;ALL&quot; will reset the animations for all states. Requires PERMISSION_OVERRIDE_ANIMATIONS.
    </description>
      <behavior>
        <append>($[string anim_state])</append>
      </behavior>
    </completion>
    <completion string="llJson2List" result="list">
      <description>
Converts the top level of the json string to a list
    </description>
      <behavior>
        <append>($[string json])</append>
      </behavior>
    </completion>
    <completion string="llList2Json" result="string">
      <description>
Converts either a strided list of key:value pairs to a JSON_OBJECT or a list of values to a JSON_ARRAY. type must be either JSON_OBJECT or JSON_ARRAY.
    </description>
      <behavior>
        <append>($[string type], $[list values])</append>
      </behavior>
    </completion>
    <completion string="llJsonGetValue" result="string">
      <description>
Gets the value indicated by specifiers from the json string
    </description>
      <behavior>
        <append>($[string json], $[list specifiers])</append>
      </behavior>
    </completion>
    <completion string="llJsonSetValue" result="string">
      <description>
Returns a new json string that is the json given with the value indicated by specifiers set to value
    </description>
      <behavior>
        <append>($[string json], $[list specifiers], $[string value])</append>
      </behavior>
    </completion>
    <completion string="llJsonValueType" result="string">
      <description>
Returns the type constant for the value in json indicated by specifiers
    </description>
      <behavior>
        <append>($[string json], $[list specifiers])</append>
      </behavior>
    </completion>
    <completion string="llReturnObjectsByID" result="integer">
      <description>
</description>
      <behavior>
        <append>($[list objects])</append>
      </behavior>
    </completion>
    <completion string="llReturnObjectsByOwner" result="integer">
      <description>
</description>
      <behavior>
        <append>($[key owner], $[integer scope])</append>
      </behavior>
    </completion>
    <completion string="llXorBase64" result="string">
      <description>
Performs an exclusive or on two Base64 strings and returns a Base64 string.
str2 repeats if it is shorter than str1.
    </description>
      <behavior>
        <append>($[string str1], $[string str2])</append>
      </behavior>
    </completion>
    <completion string="llScaleByFactor" result="integer">
      <description>
</description>
      <behavior>
        <append>($[float scaling_factor])</append>
      </behavior>
    </completion>
    <completion string="llGetMinScaleFactor" result="float">
      <description>
</description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="llGetMaxScaleFactor" result="float">
      <description>
</description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="llAgentInExperience" result="integer">
      <description>
</description>
      <behavior>
        <append>($[key agent])</append>
      </behavior>
    </completion>
    <completion string="llGetExperienceDetails" result="list">
      <description>
</description>
      <behavior>
        <append>($[key experience_id])</append>
      </behavior>
    </completion>
    <completion string="llRequestExperiencePermissions">
      <description>
</description>
      <behavior>
        <append>($[key agent], $[string name])</append>
      </behavior>
    </completion>
    <completion string="llReadKeyValue" result="key">
      <description>
</description>
      <behavior>
        <append>($[string k])</append>
      </behavior>
    </completion>
    <completion string="llCreateKeyValue" result="key">
      <description>
</description>
      <behavior>
        <append>($[string k], $[string v])</append>
      </behavior>
    </completion>
    <completion string="llUpdateKeyValue" result="key">
      <description>
</description>
      <behavior>
        <append>($[string k], $[string v], $[integer checked], $[string original_value])</append>
      </behavior>
    </completion>
    <completion string="llDeleteKeyValue" result="key">
      <description>
</description>
      <behavior>
        <append>($[string k])</append>
      </behavior>
    </completion>
    <completion string="llDataSizeKeyValue" result="key">
      <description>
</description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="llKeysKeyValue" result="key">
      <description>
</description>
      <behavior>
        <append>($[integer start], $[integer count])</append>
      </behavior>
    </completion>
    <completion string="llKeyCountKeyValue" result="key">
      <description>
</description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="llGetExperienceErrorMessage" result="string">
      <description>
</description>
      <behavior>
        <append>($[integer value])</append>
      </behavior>
    </completion>
    <completion string="llGetExperienceList" result="list">
      <description>
</description>
      <behavior>
        <append>($[key agent])</append>
      </behavior>
    </completion>
    <completion string="llClearExperiencePermissions">
      <description>
</description>
      <behavior>
        <append>($[key agent])</append>
      </behavior>
    </completion>
    <completion string="llGetAttachedList" result="list">
      <description>
</description>
      <behavior>
        <append>($[key agent])</append>
      </behavior>
    </completion>
    <completion string="llSitOnLink" result="integer">
      <description>
</description>
      <behavior>
        <append>($[key agent_id], $[integer link])</append>
      </behavior>
    </completion>
    <completion string="llName2Key" result="key">
      <description>
</description>
      <behavior>
        <append>($[string name])</append>
      </behavior>
    </completion>
    <completion string="llRequestUserKey" result="key">
      <description>
</description>
      <behavior>
        <append>($[string name])</append>
      </behavior>
    </completion>
    <completion string="llStartObjectAnimation">
      <description>
</description>
      <behavior>
        <append>($[string anim])</append>
      </behavior>
    </completion>
    <completion string="llStopObjectAnimation">
      <description>
</description>
      <behavior>
        <append>($[string anim])</append>
      </behavior>
    </completion>
    <completion string="llGetObjectAnimationNames" result="list">
      <description>
</description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="llGetEnvironment" result="list">
      <description>
</description>
      <behavior>
        <append>($[vector pos], $[list params])</append>
      </behavior>
    </completion>
    <completion string="llGetDayLength" result="integer">
      <description>
</description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="llGetDayOffset" result="integer">
      <description>
</description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="llGetRegionDayLength" result="integer">
      <description>
</description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="llGetRegionDayOffset" result="integer">
      <description>
</description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="llGetMoonRotation" result="rotation">
      <description>
</description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="llGetRegionMoonRotation" result="rotation">
      <description>
</description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="llGetRegionSunRotation" result="rotation">
      <description>
</description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="llGetSunRotation" result="rotation">
      <description>
</description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="llGetMoonDirection" result="vector">
      <description>
</description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="llGetRegionMoonDirection" result="vector">
      <description>
</description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="llGetRegionSunDirection" result="vector">
      <description>
</description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="llGetRegionTimeOfDay" result="float">
      <description>
</description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="llSetAgentEnvironment" result="integer">
      <description>
</description>
      <behavior>
        <append>($[key agent_id], $[float transition], $[list params])</append>
      </behavior>
    </completion>
    <completion string="llReplaceAgentEnvironment" result="integer">
      <description>
</description>
      <behavior>
        <append>($[key agent_id], $[float transition], $[string environment])</append>
      </behavior>
    </completion>
    <completion string="llTargetedEmail">
      <description>
</description>
      <behavior>
        <append>($[integer target], $[string header], $[string body])</append>
      </behavior>
    </completion>
    <completion string="llsRGB2Linear" result="vector">
      <behavior>
        <append>($[vector srgb])</append>
      </behavior>
    </completion>
    <completion string="llLinear2sRGB" result="vector">
      <behavior>
        <append>($[vector color])</append>
      </behavior>
    </completion>
    <completion string="llOrd" result="integer">
      <behavior>
        <append>($[string val], $[integer index])</append>
      </behavior>
    </completion>
    <completion string="llChar" result="string">
      <behavior>
        <append>($[integer code])</append>
      </behavior>
    </completion>
    <completion string="llHash" result="integer">
      <behavior>
        <append>($[string val])</append>
      </behavior>
    </completion>
    <completion string="llOpenFloater" result="integer">
      <behavior>
        <append>($[string title], $[string url], $[list params])</append>
      </behavior>
    </completion>
    <completion string="llGetInventoryAcquireTime" result="string">
      <behavior>
        <append>($[string item])</append>
      </behavior>
    </completion>
    <completion string="lsGetWindlightScene" result="list">
      <description>
</description>
      <behavior>
        <append>($[list rules])</append>
      </behavior>
    </completion>
    <completion string="lsSetWindlightScene" result="integer">
      <description>
</description>
      <behavior>
        <append>($[list rules])</append>
      </behavior>
    </completion>
    <completion string="lsSetWindlightSceneTargeted" result="integer">
      <description>
</description>
      <behavior>
        <append>($[list rules], $[key target])</append>
      </behavior>
    </completion>
    <completion string="lsClearWindlightScene">
      <description>
</description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="osSetDynamicTextureURL" result="string">
      <description>
</description>
      <behavior>
        <append>($[string dynamicID], $[string contentType], $[string url], $[string extraParams], $[integer timer])</append>
      </behavior>
    </completion>
    <completion string="osSetDynamicTextureURLBlend" result="string">
      <description>
</description>
      <behavior>
        <append>($[string dynamicID], $[string contentType], $[string url], $[string extraParams], $[integer timer], $[integer alpha])</append>
      </behavior>
    </completion>
    <completion string="osSetDynamicTextureURLBlendFace" result="string">
      <description>
</description>
      <behavior>
        <append>($[string dynamicID], $[string contentType], $[string url], $[string extraParams], $[integer blend], $[integer disp], $[integer timer], $[integer alpha], $[integer face])</append>
      </behavior>
    </completion>
    <completion string="osSetDynamicTextureURLBlendFace" result="string">
      <description>
</description>
      <behavior>
        <append>($[string dynamicID], $[string contentType], $[string url], $[string extraParams], $[bool blend], $[integer disp], $[integer timer], $[integer alpha], $[integer face])</append>
      </behavior>
    </completion>
    <completion string="osSetDynamicTextureData" result="string">
      <description>
</description>
      <behavior>
        <append>($[string dynamicID], $[string contentType], $[string data], $[string extraParams], $[integer timer])</append>
      </behavior>
    </completion>
    <completion string="osSetDynamicTextureDataBlend" result="string">
      <description>
</description>
      <behavior>
        <append>($[string dynamicID], $[string contentType], $[string data], $[string extraParams], $[integer timer], $[integer alpha])</append>
      </behavior>
    </completion>
    <completion string="osSetDynamicTextureDataBlendFace" result="string">
      <description>
</description>
      <behavior>
        <append>($[string dynamicID], $[string contentType], $[string data], $[string extraParams], $[integer blend], $[integer disp], $[integer timer], $[integer alpha], $[integer face])</append>
      </behavior>
    </completion>
    <completion string="osSetDynamicTextureDataBlendFace" result="string">
      <description>
</description>
      <behavior>
        <append>($[string dynamicID], $[string contentType], $[string data], $[string extraParams], $[bool blend], $[integer disp], $[integer timer], $[integer alpha], $[integer face])</append>
      </behavior>
    </completion>
    <completion string="osGetTerrainHeight" result="float">
      <description>
</description>
      <behavior>
        <append>($[integer x], $[integer y])</append>
      </behavior>
    </completion>
    <completion string="osTerrainGetHeight" result="float" deprecated="true">
      <description>
</description>
      <behavior>
        <append>($[integer x], $[integer y])</append>
      </behavior>
    </completion>
    <completion string="osSetTerrainHeight" result="integer">
      <description>
</description>
      <behavior>
        <append>($[integer x], $[integer y], $[float val])</append>
      </behavior>
    </completion>
    <completion string="osTerrainSetHeight" result="integer" deprecated="true">
      <description>
</description>
      <behavior>
        <append>($[integer x], $[integer y], $[float val])</append>
      </behavior>
    </completion>
    <completion string="osTerrainFlush">
      <description>
</description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="osRegionRestart" result="integer">
      <description>
</description>
      <behavior>
        <append>($[float seconds])</append>
      </behavior>
    </completion>
    <completion string="osRegionNotice">
      <description>
</description>
      <behavior>
        <append>($[string msg])</append>
      </behavior>
    </completion>
    <completion string="osConsoleCommand" result="integer">
      <description>
</description>
      <behavior>
        <append>($[string Command])</append>
      </behavior>
    </completion>
    <completion string="osConsoleCommand" result="bool">
      <description>
</description>
      <behavior>
        <append>($[string Command])</append>
      </behavior>
    </completion>
    <completion string="osSetParcelMediaURL">
      <description>
</description>
      <behavior>
        <append>($[string url])</append>
      </behavior>
    </completion>
    <completion string="osSetPrimFloatOnWater">
      <description>
</description>
      <behavior>
        <append>($[integer floatYN])</append>
      </behavior>
    </completion>
    <completion string="osSetParcelSIPAddress">
      <description>
</description>
      <behavior>
        <append>($[string SIPAddress])</append>
      </behavior>
    </completion>
    <completion string="osGetAgentIP" result="string">
      <description>
</description>
      <behavior>
        <append>($[string agent])</append>
      </behavior>
    </completion>
    <completion string="osGetAgents" result="list">
      <description>
</description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="osTeleportAgent">
      <description>
</description>
      <behavior>
        <append>($[string agent], $[string regionName], $[vector position], $[vector lookat])</append>
      </behavior>
    </completion>
    <completion string="osTeleportAgent">
      <description>
</description>
      <behavior>
        <append>($[string agent], $[integer regionX], $[integer regionY], $[vector position], $[vector lookat])</append>
      </behavior>
    </completion>
    <completion string="osTeleportAgent">
      <description>
</description>
      <behavior>
        <append>($[string agent], $[vector position], $[vector lookat])</append>
      </behavior>
    </completion>
    <completion string="osTeleportOwner">
      <description>
</description>
      <behavior>
        <append>($[string regionName], $[vector position], $[vector lookat])</append>
      </behavior>
    </completion>
    <completion string="osTeleportOwner">
      <description>
</description>
      <behavior>
        <append>($[integer regionX], $[integer regionY], $[vector position], $[vector lookat])</append>
      </behavior>
    </completion>
    <completion string="osTeleportOwner">
      <description>
</description>
      <behavior>
        <append>($[vector position], $[vector lookat])</append>
      </behavior>
    </completion>
    <completion string="osAvatarPlayAnimation">
      <description>
</description>
      <behavior>
        <append>($[string avatar], $[string animation])</append>
      </behavior>
    </completion>
    <completion string="osAvatarStopAnimation">
      <description>
</description>
      <behavior>
        <append>($[string avatar], $[string animation])</append>
      </behavior>
    </completion>
    <completion string="osForceAttachToAvatar">
      <description>
Attach the object containing this script to the avatar that owns it without asking for PERMISSION_ATTACH
    </description>
      <behavior>
        <append>($[integer attachment])</append>
      </behavior>
    </completion>
    <completion string="osForceAttachToAvatarFromInventory">
      <description>
Attach an inventory item in the object containing this script to the avatar that owns it without asking for PERMISSION_ATTACH
    </description>
      <behavior>
        <append>($[string itemName], $[integer attachment])</append>
      </behavior>
    </completion>
    <completion string="osForceAttachToOtherAvatarFromInventory">
      <description>
Attach an inventory item in the object containing this script to any avatar in the region without asking for PERMISSION_ATTACH
    </description>
      <behavior>
        <append>($[string rawAvatarId], $[string itemName], $[integer attachmentPoint])</append>
      </behavior>
    </completion>
    <completion string="osForceDetachFromAvatar">
      <description>
Detach the object containing this script from the avatar it is attached to without checking for PERMISSION_ATTACH
    </description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="osGetAvatarHomeURI" result="string">
      <description>
</description>
      <behavior>
        <append>($[string uuid])</append>
      </behavior>
    </completion>
    <completion string="osGetNumberOfAttachments" result="list">
      <description>
Returns a strided list of the specified attachment points and the number of attachments on those points
    </description>
      <behavior>
        <append>($[key avatar], $[list attachmentPoints])</append>
      </behavior>
    </completion>
    <completion string="osForceOtherSit">
      <description>
</description>
      <behavior>
        <append>($[string avatar], $[string target])</append>
      </behavior>
    </completion>
    <completion string="osMessageAttachments">
      <description>
Sends a specified message to the specified avatar&apos;s attachments on the specified attachment points
    </description>
      <behavior>
        <append>($[key avatar], $[string message], $[list attachmentPoints], $[integer flags])</append>
      </behavior>
    </completion>
    <completion string="osMovePen" result="string">
      <description>
</description>
      <behavior>
        <append>($[string drawList], $[integer x], $[integer y])</append>
      </behavior>
    </completion>
    <completion string="osDrawLine" result="string">
      <description>
</description>
      <behavior>
        <append>($[string drawList], $[integer startX], $[integer startY], $[integer endX], $[integer endY])</append>
      </behavior>
    </completion>
    <completion string="osDrawLine" result="string">
      <description>
</description>
      <behavior>
        <append>($[string drawList], $[integer endX], $[integer endY])</append>
      </behavior>
    </completion>
    <completion string="osDrawText" result="string">
      <description>
</description>
      <behavior>
        <append>($[string drawList], $[string text])</append>
      </behavior>
    </completion>
    <completion string="osDrawEllipse" result="string">
      <description>
</description>
      <behavior>
        <append>($[string drawList], $[integer width], $[integer height])</append>
      </behavior>
    </completion>
    <completion string="osDrawRectangle" result="string">
      <description>
</description>
      <behavior>
        <append>($[string drawList], $[integer width], $[integer height])</append>
      </behavior>
    </completion>
    <completion string="osDrawFilledRectangle" result="string">
      <description>
</description>
      <behavior>
        <append>($[string drawList], $[integer width], $[integer height])</append>
      </behavior>
    </completion>
    <completion string="osDrawPolygon" result="string">
      <description>
</description>
      <behavior>
        <append>($[string drawList], $[list x], $[list y])</append>
      </behavior>
    </completion>
    <completion string="osDrawFilledPolygon" result="string">
      <description>
</description>
      <behavior>
        <append>($[string drawList], $[list x], $[list y])</append>
      </behavior>
    </completion>
    <completion string="osSetFontName" result="string">
      <description>
</description>
      <behavior>
        <append>($[string drawList], $[string fontName])</append>
      </behavior>
    </completion>
    <completion string="osSetFontSize" result="string">
      <description>
</description>
      <behavior>
        <append>($[string drawList], $[integer fontSize])</append>
      </behavior>
    </completion>
    <completion string="osSetPenSize" result="string">
      <description>
</description>
      <behavior>
        <append>($[string drawList], $[integer penSize])</append>
      </behavior>
    </completion>
    <completion string="osSetPenColor" result="string">
      <description>
</description>
      <behavior>
        <append>($[string drawList], $[string color])</append>
      </behavior>
    </completion>
    <completion string="osSetPenColour" result="string" deprecated="true">
      <description>
</description>
      <behavior>
        <append>($[string drawList], $[string colour])</append>
      </behavior>
    </completion>
    <completion string="osSetPenCap" result="string">
      <description>
</description>
      <behavior>
        <append>($[string drawList], $[string direction], $[string type])</append>
      </behavior>
    </completion>
    <completion string="osDrawImage" result="string">
      <description>
</description>
      <behavior>
        <append>($[string drawList], $[integer width], $[integer height], $[string imageUrl])</append>
      </behavior>
    </completion>
    <completion string="osGetDrawStringSize" result="vector">
      <description>
</description>
      <behavior>
        <append>($[string contentType], $[string text], $[string fontName], $[integer fontSize])</append>
      </behavior>
    </completion>
    <completion string="osSetStateEvents">
      <description>
</description>
      <behavior>
        <append>($[integer events])</append>
      </behavior>
    </completion>
    <completion string="osList2Double" result="float">
      <description>
</description>
      <behavior>
        <append>($[list src], $[integer index])</append>
      </behavior>
    </completion>
    <completion string="osSetRegionWaterHeight">
      <description>
</description>
      <behavior>
        <append>($[float height])</append>
      </behavior>
    </completion>
    <completion string="osSetRegionSunSettings">
      <description>
</description>
      <behavior>
        <append>($[integer useEstateSun], $[integer sunFixed], $[float sunHour])</append>
      </behavior>
    </completion>
    <completion string="osSetRegionSunSettings">
      <description>
</description>
      <behavior>
        <append>($[bool useEstateSun], $[bool sunFixed], $[float sunHour])</append>
      </behavior>
    </completion>
    <completion string="osSetEstateSunSettings">
      <description>
</description>
      <behavior>
        <append>($[integer sunFixed], $[float sunHour])</append>
      </behavior>
    </completion>
    <completion string="osSetEstateSunSettings">
      <description>
</description>
      <behavior>
        <append>($[bool sunFixed], $[float sunHour])</append>
      </behavior>
    </completion>
    <completion string="osGetCurrentSunHour" result="float">
      <description>
</description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="osGetSunParam" result="float">
      <description>
</description>
      <behavior>
        <append>($[string param])</append>
      </behavior>
    </completion>
    <completion string="osSunGetParam" result="float" deprecated="true">
      <description>
</description>
      <behavior>
        <append>($[string param])</append>
      </behavior>
    </completion>
    <completion string="osSetSunParam">
      <description>
</description>
      <behavior>
        <append>($[string param], $[float value])</append>
      </behavior>
    </completion>
    <completion string="osSunSetParam" deprecated="true">
      <description>
</description>
      <behavior>
        <append>($[string param], $[float value])</append>
      </behavior>
    </completion>
    <completion string="osWindActiveModelPluginName" result="string">
      <description>
</description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="osSetWindParam">
      <description>
</description>
      <behavior>
        <append>($[string plugin], $[string param], $[float value])</append>
      </behavior>
    </completion>
    <completion string="osGetWindParam" result="float">
      <description>
</description>
      <behavior>
        <append>($[string plugin], $[string param])</append>
      </behavior>
    </completion>
    <completion string="osParcelJoin">
      <description>
</description>
      <behavior>
        <append>($[vector pos1], $[vector pos2])</append>
      </behavior>
    </completion>
    <completion string="osParcelSubdivide">
      <description>
</description>
      <behavior>
        <append>($[vector pos1], $[vector pos2])</append>
      </behavior>
    </completion>
    <completion string="osSetParcelDetails">
      <description>
</description>
      <behavior>
        <append>($[vector pos], $[list rules])</append>
      </behavior>
    </completion>
    <completion string="osParcelSetDetails" deprecated="true">
      <description>
</description>
      <behavior>
        <append>($[vector pos], $[list rules])</append>
      </behavior>
    </completion>
    <completion string="osGetPhysicsEngineName" result="string">
      <description>
</description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="osGetPhysicsEngineType" result="string">
      <description>
</description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="osGetScriptEngineName" result="string">
      <description>
</description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="osGetSimulatorVersion" result="string">
      <description>
</description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="osMessageObject">
      <description>
</description>
      <behavior>
        <append>($[key objectUUID], $[string message])</append>
      </behavior>
    </completion>
    <completion string="osMakeNotecard">
      <description>
</description>
      <behavior>
        <append>($[string notecardName], $[list contents])</append>
      </behavior>
    </completion>
    <completion string="osGetNotecardLine" result="string">
      <description>
</description>
      <behavior>
        <append>($[string name], $[integer line])</append>
      </behavior>
    </completion>
    <completion string="osGetNotecard" result="string">
      <description>
</description>
      <behavior>
        <append>($[string name])</append>
      </behavior>
    </completion>
    <completion string="osGetNumberOfNotecardLines" result="integer">
      <description>
</description>
      <behavior>
        <append>($[string name])</append>
      </behavior>
    </completion>
    <completion string="osAvatarName2Key" result="string">
      <description>
</description>
      <behavior>
        <append>($[string firstname], $[string lastname])</append>
      </behavior>
    </completion>
    <completion string="osKey2Name" result="string">
      <description>
</description>
      <behavior>
        <append>($[string id])</append>
      </behavior>
    </completion>
    <completion string="osGetGridNick" result="string">
      <description>
</description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="osGetGridName" result="string">
      <description>
</description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="osGetGridLoginURI" result="string">
      <description>
</description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="osGetGridHomeURI" result="string">
      <description>
</description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="osGetGridGatekeeperURI" result="string">
      <description>
</description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="osGetGridCustom" result="string">
      <description>
</description>
      <behavior>
        <append>($[string id])</append>
      </behavior>
    </completion>
    <completion string="osGetThreatLevel" result="string">
      <description>
</description>
      <behavior>
        <append>($[string id])</append>
      </behavior>
    </completion>
    <completion string="osReturnObject">
      <description>
</description>
      <behavior>
        <append>($[key userID])</append>
      </behavior>
    </completion>
    <completion string="osReturnObjects">
      <description>
</description>
      <behavior>
        <append>($[float Parameter])</append>
      </behavior>
    </completion>
    <completion string="osShutDown">
      <description>
</description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="osFormatString" result="string">
      <description>
</description>
      <behavior>
        <append>($[string str], $[list strings])</append>
      </behavior>
    </completion>
    <completion string="osMatchString" result="list">
      <description>
</description>
      <behavior>
        <append>($[string src], $[string pattern], $[integer start])</append>
      </behavior>
    </completion>
    <completion string="osReplaceString" result="string">
      <description>
</description>
      <behavior>
        <append>($[string src], $[string pattern], $[string replace], $[integer count], $[integer start])</append>
      </behavior>
    </completion>
    <completion string="osLoadedCreationDate" result="string">
      <description>
</description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="osLoadedCreationTime" result="string">
      <description>
</description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="osLoadedCreationID" result="string">
      <description>
</description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="osGetLinkPrimitiveParams" result="list">
      <description>
</description>
      <behavior>
        <append>($[integer linknumber], $[list rules])</append>
      </behavior>
    </completion>
    <completion string="osAddAgentToGroup" result="integer">
      <description>
</description>
      <behavior>
        <append>($[key AgentID], $[string GroupName], $[string RequestedRole])</append>
      </behavior>
    </completion>
    <completion string="osRezObject">
      <description>
</description>
      <behavior>
        <append>($[string inventory], $[vector pos], $[vector vel], $[rotation rot], $[integer param], $[integer isRezAtRoot], $[integer doRecoil], $[integer SetDieAtEdge], $[integer CheckPos])</append>
      </behavior>
    </completion>
    <completion string="osIsNpc" result="integer">
      <description>
Check if the given key is an npc
    </description>
      <behavior>
        <append>($[key npc])</append>
      </behavior>
    </completion>
    <completion string="osNpcCreate" result="key">
      <description>
</description>
      <behavior>
        <append>($[string user], $[string name], $[vector position], $[string notecard])</append>
      </behavior>
    </completion>
    <completion string="osNpcCreate" result="key">
      <description>
</description>
      <behavior>
        <append>($[string user], $[string name], $[vector position], $[string notecard], $[integer options])</append>
      </behavior>
    </completion>
    <completion string="osNpcSaveAppearance" result="key">
      <description>
</description>
      <behavior>
        <append>($[key npc], $[string notecard])</append>
      </behavior>
    </completion>
    <completion string="osNpcLoadAppearance">
      <description>
</description>
      <behavior>
        <append>($[key npc], $[string notecard])</append>
      </behavior>
    </completion>
    <completion string="osNpcGetPos" result="vector">
      <description>
</description>
      <behavior>
        <append>($[key npc])</append>
      </behavior>
    </completion>
    <completion string="osNpcMoveTo">
      <description>
</description>
      <behavior>
        <append>($[key npc], $[vector position])</append>
      </behavior>
    </completion>
    <completion string="osNpcMoveToTarget">
      <description>
</description>
      <behavior>
        <append>($[key npc], $[vector target], $[integer options])</append>
      </behavior>
    </completion>
    <completion string="osNpcGetOwner" result="key">
      <description>
Get the owner of the NPC
    </description>
      <behavior>
        <append>($[key npc])</append>
      </behavior>
    </completion>
    <completion string="osNpcGetRot" result="rotation">
      <description>
</description>
      <behavior>
        <append>($[key npc])</append>
      </behavior>
    </completion>
    <completion string="osNpcSetRot">
      <description>
</description>
      <behavior>
        <append>($[key npc], $[rotation rot])</append>
      </behavior>
    </completion>
    <completion string="osNpcStopMoveToTarget">
      <description>
</description>
      <behavior>
        <append>($[key npc])</append>
      </behavior>
    </completion>
    <completion string="osNpcSay">
      <description>
</description>
      <behavior>
        <append>($[key npc], $[string message])</append>
      </behavior>
    </completion>
    <completion string="osNpcSay">
      <description>
</description>
      <behavior>
        <append>($[key npc], $[integer channel], $[string message])</append>
      </behavior>
    </completion>
    <completion string="osNpcShout">
      <description>
</description>
      <behavior>
        <append>($[key npc], $[integer channel], $[string message])</append>
      </behavior>
    </completion>
    <completion string="osNpcSit">
      <description>
</description>
      <behavior>
        <append>($[key npc], $[key target], $[integer options])</append>
      </behavior>
    </completion>
    <completion string="osNpcStand">
      <description>
</description>
      <behavior>
        <append>($[key npc])</append>
      </behavior>
    </completion>
    <completion string="osNpcRemove">
      <description>
</description>
      <behavior>
        <append>($[key npc])</append>
      </behavior>
    </completion>
    <completion string="osNpcPlayAnimation">
      <description>
</description>
      <behavior>
        <append>($[key npc], $[string animation])</append>
      </behavior>
    </completion>
    <completion string="osNpcStopAnimation">
      <description>
</description>
      <behavior>
        <append>($[key npc], $[string animation])</append>
      </behavior>
    </completion>
    <completion string="osNpcTouch">
      <description>
</description>
      <behavior>
        <append>($[key npcLSL_Key], $[key object_key], $[integer link_num])</append>
      </behavior>
    </completion>
    <completion string="osNpcWhisper">
      <description>
</description>
      <behavior>
        <append>($[key npc], $[integer channel], $[string message])</append>
      </behavior>
    </completion>
    <completion string="osNpcSetProfileAbout">
      <behavior>
        <append>($[key npc], $[string about])</append>
      </behavior>
    </completion>
    <completion string="osNpcSetProfileImage">
      <behavior>
        <append>($[key npc], $[string image])</append>
      </behavior>
    </completion>
    <completion string="osOwnerSaveAppearance" result="key">
      <description>
</description>
      <behavior>
        <append>($[string notecard])</append>
      </behavior>
    </completion>
    <completion string="osAgentSaveAppearance" result="key">
      <description>
</description>
      <behavior>
        <append>($[key agentId], $[string notecard])</append>
      </behavior>
    </completion>
    <completion string="osGetMapTexture" result="key">
      <description>
</description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="osGetRegionMapTexture" result="key">
      <description>
</description>
      <behavior>
        <append>($[string regionName])</append>
      </behavior>
    </completion>
    <completion string="osGetRegionSize" result="vector">
      <description>
</description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="osGetRegionStats" result="list">
      <description>
</description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="osGetSimulatorMemory" result="integer">
      <description>
</description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="osKickAvatar">
      <description>
</description>
      <behavior>
        <append>($[string FirstName], $[string SurName], $[string alert])</append>
      </behavior>
    </completion>
    <completion string="osSetSpeed">
      <description>
</description>
      <behavior>
        <append>($[key UUID], $[float SpeedModifier])</append>
      </behavior>
    </completion>
    <completion string="osGetHealth" result="float">
      <description>
</description>
      <behavior>
        <append>($[string avatar])</append>
      </behavior>
    </completion>
    <completion string="osSetHealth">
      <description>
</description>
      <behavior>
        <append>($[string avatar], $[float health])</append>
      </behavior>
    </completion>
    <completion string="osGetHealRate" result="float">
      <description>
</description>
      <behavior>
        <append>($[string avatar])</append>
      </behavior>
    </completion>
    <completion string="osSetHealRate">
      <description>
</description>
      <behavior>
        <append>($[string avatar], $[float healrate])</append>
      </behavior>
    </completion>
    <completion string="osCauseHealing">
      <description>
</description>
      <behavior>
        <append>($[string avatar], $[float healing])</append>
      </behavior>
    </completion>
    <completion string="osCauseDamage">
      <description>
</description>
      <behavior>
        <append>($[string avatar], $[float damage])</append>
      </behavior>
    </completion>
    <completion string="osCauseDamage">
      <description>
</description>
      <behavior>
        <append>($[string avatar], $[float damage], $[string regionName], $[vector position], $[vector lookat])</append>
      </behavior>
    </completion>
    <completion string="osDie">
      <behavior>
        <append>($[key uuid])</append>
      </behavior>
    </completion>
    <completion string="osGetPrimitiveParams" result="list">
      <description>
</description>
      <behavior>
        <append>($[key prim], $[list rules])</append>
      </behavior>
    </completion>
    <completion string="osSetPrimitiveParams">
      <description>
</description>
      <behavior>
        <append>($[key prim], $[list rules])</append>
      </behavior>
    </completion>
    <completion string="osSetProjectionParams">
      <description>
</description>
      <behavior>
        <append>($[integer projection], $[key texture], $[float fov], $[float focus], $[float amb])</append>
      </behavior>
    </completion>
    <completion string="osSetProjectionParams">
      <description>
</description>
      <behavior>
        <append>($[bool projection], $[key texture], $[float fov], $[float focus], $[float amb])</append>
      </behavior>
    </completion>
    <completion string="osSetProjectionParams">
      <description>
</description>
      <behavior>
        <append>($[key prim], $[integer projection], $[key texture], $[float fov], $[float focus], $[float amb])</append>
      </behavior>
    </completion>
    <completion string="osSetProjectionParams">
      <description>
</description>
      <behavior>
        <append>($[key prim], $[bool projection], $[key texture], $[float fov], $[float focus], $[float amb])</append>
      </behavior>
    </completion>
    <completion string="osGetAvatarList" result="list">
      <description>
</description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="osGetGender" result="string">
      <description>
</description>
      <behavior>
        <append>($[key rawAvatarId])</append>
      </behavior>
    </completion>
    <completion string="osUnixTimeToTimestamp" result="string">
      <description>
</description>
      <behavior>
        <append>($[integer time])</append>
      </behavior>
    </completion>
    <completion string="osForceBreakAllLinks">
      <description>
</description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="osForceBreakLink">
      <description>
</description>
      <behavior>
        <append>($[integer linknum])</append>
      </behavior>
    </completion>
    <completion string="osForceCreateLink">
      <description>
</description>
      <behavior>
        <append>($[string target], $[integer parent])</append>
      </behavior>
    </completion>
    <completion string="osGetInventoryDesc" result="string">
      <description>
</description>
      <behavior>
        <append>($[string item])</append>
      </behavior>
    </completion>
    <completion string="osInviteToGroup" result="integer">
      <description>
</description>
      <behavior>
        <append>($[key agentId])</append>
      </behavior>
    </completion>
    <completion string="osEjectFromGroup" result="integer">
      <description>
</description>
      <behavior>
        <append>($[key agentId])</append>
      </behavior>
    </completion>
    <completion string="osSetTerrainTexture">
      <description>
</description>
      <behavior>
        <append>($[integer level], $[key texture])</append>
      </behavior>
    </completion>
    <completion string="osSetTerrainTextureHeight">
      <description>
</description>
      <behavior>
        <append>($[integer corner], $[float low], $[float high])</append>
      </behavior>
    </completion>
    <completion string="osIsUUID" result="integer">
      <description>
Checks if thing is a UUID
    </description>
      <behavior>
        <append>($[string thing])</append>
      </behavior>
    </completion>
    <completion string="osMin" result="float">
      <description>
Wraps to Math.Min()
    </description>
      <behavior>
        <append>($[float a], $[float b])</append>
      </behavior>
    </completion>
    <completion string="osMax" result="float">
      <description>
Wraps to Math.max()
    </description>
      <behavior>
        <append>($[float a], $[float b])</append>
      </behavior>
    </completion>
    <completion string="osGetRezzingObject" result="key">
      <description>
Get the key of the object that rezzed this object
    </description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="osSetContentType">
      <description>
Sets the response type for an HTTP request/response
    </description>
      <behavior>
        <append>($[key id], $[string type])</append>
      </behavior>
    </completion>
    <completion string="osDropAttachment">
      <description>
Attempts to drop an attachment to the ground
    </description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="osForceDropAttachment">
      <description>
Attempts to drop an attachment to the ground while bypassing the script permissions
    </description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="osDropAttachmentAt">
      <description>
Attempts to drop an attachment at the specified coordinates
    </description>
      <behavior>
        <append>($[vector pos], $[rotation rot])</append>
      </behavior>
    </completion>
    <completion string="osForceDropAttachmentAt">
      <description>
Attempts to drop an attachment at the specified coordinates while bypassing the script permissions
    </description>
      <behavior>
        <append>($[vector pos], $[rotation rot])</append>
      </behavior>
    </completion>
    <completion string="osListenRegex" result="integer">
      <description>
Identical to llListen except for a bitfield which indicates which string parameters should be parsed as regex patterns
    </description>
      <behavior>
        <append>($[integer channelID], $[string name], $[string ID], $[string msg], $[integer regexBitfield])</append>
      </behavior>
    </completion>
    <completion string="osRegexIsMatch" result="integer">
      <description>
Wraps to bool Regex.IsMatch(string input, string pattern)
    </description>
      <behavior>
        <append>($[string input], $[string pattern])</append>
      </behavior>
    </completion>
    <completion string="osRequestURL">
      <description>
</description>
      <behavior>
        <append>($[list options])</append>
      </behavior>
    </completion>
    <completion string="osRequestSecureURL">
      <description>
</description>
      <behavior>
        <append>($[list options])</append>
      </behavior>
    </completion>
    <completion string="osCheckODE" result="integer">
      <description>
</description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="osCollisionSound">
      <description>
</description>
      <behavior>
        <append>($[string impact_sound], $[float impact_volume])</append>
      </behavior>
    </completion>
    <completion string="osVolumeDetect">
      <description>
</description>
      <behavior>
        <append>($[integer detect])</append>
      </behavior>
    </completion>
    <completion string="aaSetCloudDensity">
      <description>
</description>
      <behavior>
        <append>($[float density])</append>
      </behavior>
    </completion>
    <completion string="aaUpdateDatabase">
      <description>
</description>
      <behavior>
        <append>($[string keyname], $[string value], $[string token])</append>
      </behavior>
    </completion>
    <completion string="aaQueryDatabase" result="list">
      <description>
</description>
      <behavior>
        <append>($[string keyname], $[string token])</append>
      </behavior>
    </completion>
    <completion string="aaDeserializeXMLValues" result="list">
      <description>
</description>
      <behavior>
        <append>($[key xmlFile])</append>
      </behavior>
    </completion>
    <completion string="aaDeserializeXMLKeys" result="list">
      <description>
</description>
      <behavior>
        <append>($[key xmlFile])</append>
      </behavior>
    </completion>
    <completion string="aaSetConeOfSilence">
      <description>
</description>
      <behavior>
        <append>($[float radius])</append>
      </behavior>
    </completion>
    <completion string="aaSerializeXML" result="key">
      <description>
</description>
      <behavior>
        <append>($[list keynames], $[list values])</append>
      </behavior>
    </completion>
    <completion string="aaGetTeam" result="string">
      <description>
</description>
      <behavior>
        <append>($[key id])</append>
      </behavior>
    </completion>
    <completion string="aaGetHealth" result="float">
      <description>
</description>
      <behavior>
        <append>($[key id])</append>
      </behavior>
    </completion>
    <completion string="aaJoinCombat">
      <description>
</description>
      <behavior>
        <append>($[key id])</append>
      </behavior>
    </completion>
    <completion string="aaLeaveCombat">
      <description>
</description>
      <behavior>
        <append>($[key id])</append>
      </behavior>
    </completion>
    <completion string="aaJoinCombatTeam">
      <description>
</description>
      <behavior>
        <append>($[key id], $[string team])</append>
      </behavior>
    </completion>
    <completion string="aaRequestCombatPermission">
      <description>
</description>
      <behavior>
        <append>($[string ID])</append>
      </behavior>
    </completion>
    <completion string="aaThawAvatar">
      <description>
</description>
      <behavior>
        <append>($[string ID])</append>
      </behavior>
    </completion>
    <completion string="aaFreezeAvatar">
      <description>
</description>
      <behavior>
        <append>($[string ID])</append>
      </behavior>
    </completion>
    <completion string="aaGetTeamMembers" result="list">
      <description>
</description>
      <behavior>
        <append>($[string team])</append>
      </behavior>
    </completion>
    <completion string="aaGetLastOwner" result="string">
      <description>
</description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="aaGetLastOwner" result="string">
      <description>
</description>
      <behavior>
        <append>($[string PrimID])</append>
      </behavior>
    </completion>
    <completion string="aaSayDistance">
      <description>
</description>
      <behavior>
        <append>($[integer channelID], $[float Distance], $[string text])</append>
      </behavior>
    </completion>
    <completion string="aaSayTo">
      <description>
</description>
      <behavior>
        <append>($[string userID], $[string text])</append>
      </behavior>
    </completion>
    <completion string="aaGetWalkDisabled" result="integer">
      <description>
</description>
      <behavior>
        <append>($[string userID])</append>
      </behavior>
    </completion>
    <completion string="aaSetWalkDisabled">
      <description>
</description>
      <behavior>
        <append>($[string userID], $[bool Value])</append>
      </behavior>
    </completion>
    <completion string="aaGetFlyDisabled" result="integer">
      <description>
</description>
      <behavior>
        <append>($[string userID])</append>
      </behavior>
    </completion>
    <completion string="aaSetFlyDisabled">
      <description>
</description>
      <behavior>
        <append>($[string userID], $[bool Value])</append>
      </behavior>
    </completion>
    <completion string="aaAvatarFullName2Key" result="key">
      <description>
</description>
      <behavior>
        <append>($[string username])</append>
      </behavior>
    </completion>
    <completion string="aaRaiseError">
      <description>
</description>
      <behavior>
        <append>($[string message])</append>
      </behavior>
    </completion>
    <completion string="aaGetText" result="key">
      <description>
</description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="aaGetTextColor" result="rotation">
      <description>
</description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="aaSetEnv">
      <description>
</description>
      <behavior>
        <append>($[string name], $[list value])</append>
      </behavior>
    </completion>
    <completion string="aaGetIsInfiniteRegion" result="integer">
      <description>
</description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="aaAllRegionInstanceSay">
      <description>
</description>
      <behavior>
        <append>($[integer channelID], $[string text])</append>
      </behavior>
    </completion>
    <completion string="aaWindlightGetSceneIsStatic" result="integer">
      <description>
</description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="aaWindlightGetSceneDayCycleKeyFrameCount" result="integer">
      <description>
</description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="aaWindlightGetDayCycle" result="list">
      <description>
</description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="aaWindlightAddDayCycleFrame" result="integer">
      <description>
</description>
      <behavior>
        <append>($[float dayCyclePosition], $[integer dayCycleFrameToCopy])</append>
      </behavior>
    </completion>
    <completion string="aaWindlightRemoveDayCycleFrame" result="integer">
      <description>
</description>
      <behavior>
        <append>($[integer dayCycleFrame])</append>
      </behavior>
    </completion>
    <completion string="aaWindlightGetScene" result="list">
      <description>
</description>
      <behavior>
        <append>($[list rules])</append>
      </behavior>
    </completion>
    <completion string="aaWindlightGetScene" result="list">
      <description>
</description>
      <behavior>
        <append>($[integer dayCycleKeyFrame], $[list rules])</append>
      </behavior>
    </completion>
    <completion string="aaWindlightSetScene" result="integer">
      <description>
</description>
      <behavior>
        <append>($[list list])</append>
      </behavior>
    </completion>
    <completion string="aaWindlightSetScene" result="integer">
      <description>
</description>
      <behavior>
        <append>($[integer dayCycleIndex], $[list list])</append>
      </behavior>
    </completion>
    <completion string="botGetWaitingTime" result="vector">
      <description>
</description>
      <behavior>
        <append>($[integer waitTime])</append>
      </behavior>
    </completion>
    <completion string="botSetMap">
      <description>
</description>
      <behavior>
        <append>($[string keyOfBot], $[list positions], $[list movementType], $[integer flags])</append>
      </behavior>
    </completion>
    <completion string="botCreateBot" result="string">
      <description>
</description>
      <behavior>
        <append>($[string FirstName], $[string LastName], $[string appearanceToClone], $[vector startPos])</append>
      </behavior>
    </completion>
    <completion string="botRemoveBot">
      <description>
</description>
      <behavior>
        <append>($[string bot])</append>
      </behavior>
    </completion>
    <completion string="botPauseMovement">
      <description>
</description>
      <behavior>
        <append>($[string bot])</append>
      </behavior>
    </completion>
    <completion string="botResumeMovement">
      <description>
</description>
      <behavior>
        <append>($[string bot])</append>
      </behavior>
    </completion>
    <completion string="botFollowAvatar">
      <description>
</description>
      <behavior>
        <append>($[string bot], $[string avatarName], $[float startFollowDistance], $[float endFollowDistance])</append>
      </behavior>
    </completion>
    <completion string="botStopFollowAvatar">
      <description>
</description>
      <behavior>
        <append>($[string bot])</append>
      </behavior>
    </completion>
    <completion string="botSendChatMessage">
      <description>
</description>
      <behavior>
        <append>($[string bot], $[string message], $[integer sayType], $[integer channel])</append>
      </behavior>
    </completion>
    <completion string="botSendIM">
      <description>
</description>
      <behavior>
        <append>($[string bot], $[string user], $[string message])</append>
      </behavior>
    </completion>
    <completion string="botSetShouldFly">
      <description>
</description>
      <behavior>
        <append>($[string keyOfBot], $[integer ShouldFly])</append>
      </behavior>
    </completion>
    <completion string="botSitObject">
      <description>
</description>
      <behavior>
        <append>($[string bot], $[string objectID], $[vector offset])</append>
      </behavior>
    </completion>
    <completion string="botStandUp">
      <description>
</description>
      <behavior>
        <append>($[string bot])</append>
      </behavior>
    </completion>
    <completion string="botTouchObject">
      <description>
</description>
      <behavior>
        <append>($[string bot], $[string objectID])</append>
      </behavior>
    </completion>
    <completion string="botAddTag">
      <description>
</description>
      <behavior>
        <append>($[string bot], $[string tag])</append>
      </behavior>
    </completion>
    <completion string="botGetBotsWithTag" result="list">
      <description>
</description>
      <behavior>
        <append>($[string tag])</append>
      </behavior>
    </completion>
    <completion string="botRemoveBotsWithTag">
      <description>
</description>
      <behavior>
        <append>($[string tag])</append>
      </behavior>
    </completion>
  </set>
  <!--Events-->
  <set name="lsl.events" symbol="event">
    <completion string="state_entry">
      <description>
Triggered on any state transition and startup
    </description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="state_exit">
      <description>
Triggered on any state transition
    </description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="touch_start">
      <description>
Triggered by the start of agent clicking on task
    </description>
      <behavior>
        <append>($[integer num_detected])</append>
      </behavior>
    </completion>
    <completion string="touch">
      <description>
Triggered while agent is clicking on task
    </description>
      <behavior>
        <append>($[integer num_detected])</append>
      </behavior>
    </completion>
    <completion string="touch_end">
      <description>
Triggered when agent stops clicking on task
    </description>
      <behavior>
        <append>($[integer num_detected])</append>
      </behavior>
    </completion>
    <completion string="collision_start">
      <description>
Triggered when task starts colliding with another task
    </description>
      <behavior>
        <append>($[integer num_detected])</append>
      </behavior>
    </completion>
    <completion string="collision">
      <description>
Triggered while task is colliding with another task
    </description>
      <behavior>
        <append>($[integer num_detected])</append>
      </behavior>
    </completion>
    <completion string="collision_end">
      <description>
Triggered when task stops colliding with another task
    </description>
      <behavior>
        <append>($[integer num_detected])</append>
      </behavior>
    </completion>
    <completion string="land_collision_start">
      <description>
Triggered when task starts colliding with land
    </description>
      <behavior>
        <append>($[vector pos])</append>
      </behavior>
    </completion>
    <completion string="land_collision">
      <description>
Triggered when task is colliding with land
    </description>
      <behavior>
        <append>($[vector pos])</append>
      </behavior>
    </completion>
    <completion string="land_collision_end">
      <description>
Triggered when task stops colliding with land
    </description>
      <behavior>
        <append>($[vector pos])</append>
      </behavior>
    </completion>
    <completion string="timer">
      <description>
Result of the llSetTimerEvent library function call
    </description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="listen">
      <description>
Result of the llListen library function call
    </description>
      <behavior>
        <append>($[integer channel], $[string name], $[key id], $[string message])</append>
      </behavior>
    </completion>
    <completion string="sensor">
      <description>
Result of the llSensor library function call
    </description>
      <behavior>
        <append>($[integer num_detected])</append>
      </behavior>
    </completion>
    <completion string="no_sensor">
      <description>
Result of the llSensor library function call
    </description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="control">
      <description>
Result of llTakeControls library function call
    </description>
      <behavior>
        <append>($[key id], $[integer level], $[integer edge])</append>
      </behavior>
    </completion>
    <completion string="at_target">
      <description>
Result of llTarget library function call
    </description>
      <behavior>
        <append>($[integer tnum], $[vector targetpos], $[vector ourpos])</append>
      </behavior>
    </completion>
    <completion string="not_at_target">
      <description>
Result of llTarget library function call
    </description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="at_rot_target">
      <description>
Result of LLRotTarget library function call
    </description>
      <behavior>
        <append>($[integer tnum], $[rotation targetrot], $[rotation ourrot])</append>
      </behavior>
    </completion>
    <completion string="not_at_rot_target">
      <description>
Result of LLRotTarget library function call
    </description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="money">
      <description>
Triggered when L$ is given to task
    </description>
      <behavior>
        <append>($[key id], $[integer amount])</append>
      </behavior>
    </completion>
    <completion string="email">
      <description>
Triggered when task receives email
    </description>
      <behavior>
        <append>($[string time], $[string address], $[string subj], $[string message], $[integer num_left])</append>
      </behavior>
    </completion>
    <completion string="run_time_permissions">
      <description>
Triggered when an agent grants run time permissions to task
    </description>
      <behavior>
        <append>($[integer perm])</append>
      </behavior>
    </completion>
    <completion string="attach">
      <description>
Triggered when task attaches or detaches from agent
    </description>
      <behavior>
        <append>($[key id])</append>
      </behavior>
    </completion>
    <completion string="dataserver">
      <description>
Triggered when task receives asynchronous data
    </description>
      <behavior>
        <append>($[key queryid], $[string data])</append>
      </behavior>
    </completion>
    <completion string="moving_start">
      <description>
Triggered when task begins moving
    </description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="moving_end">
      <description>
Triggered when task stops moving
    </description>
      <behavior>
        <append>()</append>
      </behavior>
    </completion>
    <completion string="on_rez">
      <description>
Triggered when task is rezzed in from inventory or another task
    </description>
      <behavior>
        <append>($[integer start_param])</append>
      </behavior>
    </completion>
    <completion string="object_rez">
      <description>
Triggered when task rezzes in another task
    </description>
      <behavior>
        <append>($[key id])</append>
      </behavior>
    </completion>
    <completion string="link_message">
      <description>
Triggered when task receives a link message via LLMessageLinked library function call
    </description>
      <behavior>
        <append>($[integer sender_num], $[integer num], $[string str], $[key id])</append>
      </behavior>
    </completion>
    <completion string="changed">
      <description>
Triggered various event change the task
(test change with CHANGED_INVENTORY, CHANGED_COLOR, CHANGED_SHAPE, CHANGED_SCALE, CHANGED_TEXTURE, CHANGED_LINK, CHANGED_ALLOWED_DROP, CHANGED_OWNER, CHANGED_REGION, CHANGED_TELEPORT, CHANGED_REGION_START, CHANGED_MEDIA)
    </description>
      <behavior>
        <append>($[integer change])</append>
      </behavior>
    </completion>
    <completion string="remote_data">
      <description>
Triggered by various XML-RPC calls (event_type will be one of REMOTE_DATA_CHANNEL, REMOTE_DATA_REQUEST, REMOTE_DATA_REPLY)
    </description>
      <behavior>
        <append>($[integer event_type], $[key channel], $[key message_id], $[string sender], $[integer idata], $[string sdata])</append>
      </behavior>
    </completion>
    <completion string="http_response">
      <description>
Triggered when task receives a response to one of its llHTTPRequests
    </description>
      <behavior>
        <append>($[key request_id], $[integer status], $[list metadata], $[string body])</append>
      </behavior>
    </completion>
    <completion string="http_request">
      <description>
Triggered when task receives an http request against a public URL
    </description>
      <behavior>
        <append>($[key id], $[string method], $[string body])</append>
      </behavior>
    </completion>
    <completion string="transaction_result">
      <description>
Triggered when transferring L$ to Agent via llTransferLindenDollars
    </description>
      <behavior>
        <append>($[key id], $[integer success], $[string data])</append>
      </behavior>
    </completion>
    <completion string="path_update">
      <description>
</description>
      <behavior>
        <append>($[integer type], $[list reserved])</append>
      </behavior>
    </completion>
    <completion string="experience_permissions">
      <description>
Triggered by llRequestExperiencePermissions when the permission has been granted.
</description>
      <behavior>
        <append>($[key agent])</append>
      </behavior>
    </completion>
    <completion string="experience_permissions_denied">
      <description>
Triggered by llRequestExperiencePermissions when the permission has been denied.
    </description>
      <behavior>
        <append>($[key agent], $[integer reason])</append>
      </behavior>
    </completion>
  </set>
</completions>
